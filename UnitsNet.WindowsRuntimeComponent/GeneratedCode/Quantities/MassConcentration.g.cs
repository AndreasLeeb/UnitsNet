//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     In chemistry, the mass concentration ρi (or γi) is defined as the mass of a constituent mi divided by the volume of the mixture V
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Mass_concentration_(chemistry)
    /// </remarks>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class MassConcentration : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly MassConcentrationUnit? _unit;

        static MassConcentration()
        {
            BaseDimensions = new BaseDimensions(-3, 1, 0, 0, 0, 0, 0);
            BaseUnit = MassConcentrationUnit.KilogramPerCubicMeter;
            MaxValue = new MassConcentration(double.MaxValue, BaseUnit);
            MinValue = new MassConcentration(double.MinValue, BaseUnit);
            QuantityType = QuantityType.MassConcentration;
            Units = Enum.GetValues(typeof(MassConcentrationUnit)).Cast<MassConcentrationUnit>().Except(new MassConcentrationUnit[]{ MassConcentrationUnit.Undefined }).ToArray();
            Zero = new MassConcentration(0, BaseUnit);
            Info = new QuantityInfo(QuantityType.MassConcentration, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit KilogramPerCubicMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public MassConcentration()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private MassConcentration(double value, MassConcentrationUnit unit)
        {
            if (unit == MassConcentrationUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of MassConcentration, which is KilogramPerCubicMeter. All conversions go via this value.
        /// </summary>
        public static MassConcentrationUnit BaseUnit { get; }

        /// <summary>
        /// Represents the largest possible value of MassConcentration
        /// </summary>
        public static MassConcentration MaxValue { get; }

        /// <summary>
        /// Represents the smallest possible value of MassConcentration
        /// </summary>
        public static MassConcentration MinValue { get; }

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public static QuantityType QuantityType { get; }

        /// <summary>
        ///     All units of measurement for the MassConcentration quantity.
        /// </summary>
        public static MassConcentrationUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit KilogramPerCubicMeter.
        /// </summary>
        public static MassConcentration Zero { get; }

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public MassConcentrationUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public QuantityType Type => MassConcentration.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => MassConcentration.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.CentigramPerDeciliter">CentigramsPerDeciliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCentigramsPerDeciliter property.")]
        public double CentigramsPerDeciliter => As(MassConcentrationUnit.CentigramPerDeciliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.CentigramPerLiter">CentigramsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCentigramsPerLiter property.")]
        public double CentigramsPerLiter => As(MassConcentrationUnit.CentigramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.CentigramPerMicroliter">CentigramsPerMicroliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCentigramsPerMicroliter property.")]
        public double CentigramsPerMicroliter => As(MassConcentrationUnit.CentigramPerMicroliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.CentigramPerMilliliter">CentigramsPerMilliliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCentigramsPerMilliliter property.")]
        public double CentigramsPerMilliliter => As(MassConcentrationUnit.CentigramPerMilliliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.DecigramPerDeciliter">DecigramsPerDeciliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecigramsPerDeciliter property.")]
        public double DecigramsPerDeciliter => As(MassConcentrationUnit.DecigramPerDeciliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.DecigramPerLiter">DecigramsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecigramsPerLiter property.")]
        public double DecigramsPerLiter => As(MassConcentrationUnit.DecigramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.DecigramPerMicroliter">DecigramsPerMicroliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecigramsPerMicroliter property.")]
        public double DecigramsPerMicroliter => As(MassConcentrationUnit.DecigramPerMicroliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.DecigramPerMilliliter">DecigramsPerMilliliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecigramsPerMilliliter property.")]
        public double DecigramsPerMilliliter => As(MassConcentrationUnit.DecigramPerMilliliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.GramPerCubicCentimeter">GramsPerCubicCentimeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGramsPerCubicCentimeter property.")]
        public double GramsPerCubicCentimeter => As(MassConcentrationUnit.GramPerCubicCentimeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.GramPerCubicMeter">GramsPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGramsPerCubicMeter property.")]
        public double GramsPerCubicMeter => As(MassConcentrationUnit.GramPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.GramPerCubicMillimeter">GramsPerCubicMillimeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGramsPerCubicMillimeter property.")]
        public double GramsPerCubicMillimeter => As(MassConcentrationUnit.GramPerCubicMillimeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.GramPerDeciliter">GramsPerDeciliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGramsPerDeciliter property.")]
        public double GramsPerDeciliter => As(MassConcentrationUnit.GramPerDeciliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.GramPerLiter">GramsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGramsPerLiter property.")]
        public double GramsPerLiter => As(MassConcentrationUnit.GramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.GramPerMicroliter">GramsPerMicroliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGramsPerMicroliter property.")]
        public double GramsPerMicroliter => As(MassConcentrationUnit.GramPerMicroliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.GramPerMilliliter">GramsPerMilliliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGramsPerMilliliter property.")]
        public double GramsPerMilliliter => As(MassConcentrationUnit.GramPerMilliliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.KilogramPerCubicCentimeter">KilogramsPerCubicCentimeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilogramsPerCubicCentimeter property.")]
        public double KilogramsPerCubicCentimeter => As(MassConcentrationUnit.KilogramPerCubicCentimeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.KilogramPerCubicMeter">KilogramsPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilogramsPerCubicMeter property.")]
        public double KilogramsPerCubicMeter => As(MassConcentrationUnit.KilogramPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.KilogramPerCubicMillimeter">KilogramsPerCubicMillimeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilogramsPerCubicMillimeter property.")]
        public double KilogramsPerCubicMillimeter => As(MassConcentrationUnit.KilogramPerCubicMillimeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.KilogramPerLiter">KilogramsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilogramsPerLiter property.")]
        public double KilogramsPerLiter => As(MassConcentrationUnit.KilogramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.KilopoundPerCubicFoot">KilopoundsPerCubicFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilopoundsPerCubicFoot property.")]
        public double KilopoundsPerCubicFoot => As(MassConcentrationUnit.KilopoundPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.KilopoundPerCubicInch">KilopoundsPerCubicInch</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilopoundsPerCubicInch property.")]
        public double KilopoundsPerCubicInch => As(MassConcentrationUnit.KilopoundPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MicrogramPerCubicMeter">MicrogramsPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicrogramsPerCubicMeter property.")]
        public double MicrogramsPerCubicMeter => As(MassConcentrationUnit.MicrogramPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MicrogramPerDeciliter">MicrogramsPerDeciliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicrogramsPerDeciliter property.")]
        public double MicrogramsPerDeciliter => As(MassConcentrationUnit.MicrogramPerDeciliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MicrogramPerLiter">MicrogramsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicrogramsPerLiter property.")]
        public double MicrogramsPerLiter => As(MassConcentrationUnit.MicrogramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MicrogramPerMicroliter">MicrogramsPerMicroliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicrogramsPerMicroliter property.")]
        public double MicrogramsPerMicroliter => As(MassConcentrationUnit.MicrogramPerMicroliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MicrogramPerMilliliter">MicrogramsPerMilliliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicrogramsPerMilliliter property.")]
        public double MicrogramsPerMilliliter => As(MassConcentrationUnit.MicrogramPerMilliliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MilligramPerCubicMeter">MilligramsPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMilligramsPerCubicMeter property.")]
        public double MilligramsPerCubicMeter => As(MassConcentrationUnit.MilligramPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MilligramPerDeciliter">MilligramsPerDeciliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMilligramsPerDeciliter property.")]
        public double MilligramsPerDeciliter => As(MassConcentrationUnit.MilligramPerDeciliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MilligramPerLiter">MilligramsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMilligramsPerLiter property.")]
        public double MilligramsPerLiter => As(MassConcentrationUnit.MilligramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MilligramPerMicroliter">MilligramsPerMicroliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMilligramsPerMicroliter property.")]
        public double MilligramsPerMicroliter => As(MassConcentrationUnit.MilligramPerMicroliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MilligramPerMilliliter">MilligramsPerMilliliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMilligramsPerMilliliter property.")]
        public double MilligramsPerMilliliter => As(MassConcentrationUnit.MilligramPerMilliliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.NanogramPerDeciliter">NanogramsPerDeciliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNanogramsPerDeciliter property.")]
        public double NanogramsPerDeciliter => As(MassConcentrationUnit.NanogramPerDeciliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.NanogramPerLiter">NanogramsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNanogramsPerLiter property.")]
        public double NanogramsPerLiter => As(MassConcentrationUnit.NanogramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.NanogramPerMicroliter">NanogramsPerMicroliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNanogramsPerMicroliter property.")]
        public double NanogramsPerMicroliter => As(MassConcentrationUnit.NanogramPerMicroliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.NanogramPerMilliliter">NanogramsPerMilliliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNanogramsPerMilliliter property.")]
        public double NanogramsPerMilliliter => As(MassConcentrationUnit.NanogramPerMilliliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.OuncePerImperialGallon">OuncesPerImperialGallon</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToOuncesPerImperialGallon property.")]
        public double OuncesPerImperialGallon => As(MassConcentrationUnit.OuncePerImperialGallon);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.OuncePerUSGallon">OuncesPerUSGallon</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToOuncesPerUSGallon property.")]
        public double OuncesPerUSGallon => As(MassConcentrationUnit.OuncePerUSGallon);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PicogramPerDeciliter">PicogramsPerDeciliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPicogramsPerDeciliter property.")]
        public double PicogramsPerDeciliter => As(MassConcentrationUnit.PicogramPerDeciliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PicogramPerLiter">PicogramsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPicogramsPerLiter property.")]
        public double PicogramsPerLiter => As(MassConcentrationUnit.PicogramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PicogramPerMicroliter">PicogramsPerMicroliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPicogramsPerMicroliter property.")]
        public double PicogramsPerMicroliter => As(MassConcentrationUnit.PicogramPerMicroliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PicogramPerMilliliter">PicogramsPerMilliliter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPicogramsPerMilliliter property.")]
        public double PicogramsPerMilliliter => As(MassConcentrationUnit.PicogramPerMilliliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PoundPerCubicFoot">PoundsPerCubicFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPoundsPerCubicFoot property.")]
        public double PoundsPerCubicFoot => As(MassConcentrationUnit.PoundPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PoundPerCubicInch">PoundsPerCubicInch</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPoundsPerCubicInch property.")]
        public double PoundsPerCubicInch => As(MassConcentrationUnit.PoundPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PoundPerImperialGallon">PoundsPerImperialGallon</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPoundsPerImperialGallon property.")]
        public double PoundsPerImperialGallon => As(MassConcentrationUnit.PoundPerImperialGallon);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PoundPerUSGallon">PoundsPerUSGallon</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPoundsPerUSGallon property.")]
        public double PoundsPerUSGallon => As(MassConcentrationUnit.PoundPerUSGallon);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.SlugPerCubicFoot">SlugsPerCubicFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToSlugsPerCubicFoot property.")]
        public double SlugsPerCubicFoot => As(MassConcentrationUnit.SlugPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.TonnePerCubicCentimeter">TonnesPerCubicCentimeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTonnesPerCubicCentimeter property.")]
        public double TonnesPerCubicCentimeter => As(MassConcentrationUnit.TonnePerCubicCentimeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.TonnePerCubicMeter">TonnesPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTonnesPerCubicMeter property.")]
        public double TonnesPerCubicMeter => As(MassConcentrationUnit.TonnePerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.TonnePerCubicMillimeter">TonnesPerCubicMillimeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTonnesPerCubicMillimeter property.")]
        public double TonnesPerCubicMillimeter => As(MassConcentrationUnit.TonnePerCubicMillimeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.CentigramPerDeciliter">CentigramsPerDeciliter</see>.
        /// </summary>
        public MassConcentration ToCentigramsPerDeciliter => ToUnit(MassConcentrationUnit.CentigramPerDeciliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.CentigramPerLiter">CentigramsPerLiter</see>.
        /// </summary>
        public MassConcentration ToCentigramsPerLiter => ToUnit(MassConcentrationUnit.CentigramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.CentigramPerMicroliter">CentigramsPerMicroliter</see>.
        /// </summary>
        public MassConcentration ToCentigramsPerMicroliter => ToUnit(MassConcentrationUnit.CentigramPerMicroliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.CentigramPerMilliliter">CentigramsPerMilliliter</see>.
        /// </summary>
        public MassConcentration ToCentigramsPerMilliliter => ToUnit(MassConcentrationUnit.CentigramPerMilliliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.DecigramPerDeciliter">DecigramsPerDeciliter</see>.
        /// </summary>
        public MassConcentration ToDecigramsPerDeciliter => ToUnit(MassConcentrationUnit.DecigramPerDeciliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.DecigramPerLiter">DecigramsPerLiter</see>.
        /// </summary>
        public MassConcentration ToDecigramsPerLiter => ToUnit(MassConcentrationUnit.DecigramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.DecigramPerMicroliter">DecigramsPerMicroliter</see>.
        /// </summary>
        public MassConcentration ToDecigramsPerMicroliter => ToUnit(MassConcentrationUnit.DecigramPerMicroliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.DecigramPerMilliliter">DecigramsPerMilliliter</see>.
        /// </summary>
        public MassConcentration ToDecigramsPerMilliliter => ToUnit(MassConcentrationUnit.DecigramPerMilliliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.GramPerCubicCentimeter">GramsPerCubicCentimeter</see>.
        /// </summary>
        public MassConcentration ToGramsPerCubicCentimeter => ToUnit(MassConcentrationUnit.GramPerCubicCentimeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.GramPerCubicMeter">GramsPerCubicMeter</see>.
        /// </summary>
        public MassConcentration ToGramsPerCubicMeter => ToUnit(MassConcentrationUnit.GramPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.GramPerCubicMillimeter">GramsPerCubicMillimeter</see>.
        /// </summary>
        public MassConcentration ToGramsPerCubicMillimeter => ToUnit(MassConcentrationUnit.GramPerCubicMillimeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.GramPerDeciliter">GramsPerDeciliter</see>.
        /// </summary>
        public MassConcentration ToGramsPerDeciliter => ToUnit(MassConcentrationUnit.GramPerDeciliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.GramPerLiter">GramsPerLiter</see>.
        /// </summary>
        public MassConcentration ToGramsPerLiter => ToUnit(MassConcentrationUnit.GramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.GramPerMicroliter">GramsPerMicroliter</see>.
        /// </summary>
        public MassConcentration ToGramsPerMicroliter => ToUnit(MassConcentrationUnit.GramPerMicroliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.GramPerMilliliter">GramsPerMilliliter</see>.
        /// </summary>
        public MassConcentration ToGramsPerMilliliter => ToUnit(MassConcentrationUnit.GramPerMilliliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.KilogramPerCubicCentimeter">KilogramsPerCubicCentimeter</see>.
        /// </summary>
        public MassConcentration ToKilogramsPerCubicCentimeter => ToUnit(MassConcentrationUnit.KilogramPerCubicCentimeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.KilogramPerCubicMeter">KilogramsPerCubicMeter</see>.
        /// </summary>
        public MassConcentration ToKilogramsPerCubicMeter => ToUnit(MassConcentrationUnit.KilogramPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.KilogramPerCubicMillimeter">KilogramsPerCubicMillimeter</see>.
        /// </summary>
        public MassConcentration ToKilogramsPerCubicMillimeter => ToUnit(MassConcentrationUnit.KilogramPerCubicMillimeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.KilogramPerLiter">KilogramsPerLiter</see>.
        /// </summary>
        public MassConcentration ToKilogramsPerLiter => ToUnit(MassConcentrationUnit.KilogramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.KilopoundPerCubicFoot">KilopoundsPerCubicFoot</see>.
        /// </summary>
        public MassConcentration ToKilopoundsPerCubicFoot => ToUnit(MassConcentrationUnit.KilopoundPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.KilopoundPerCubicInch">KilopoundsPerCubicInch</see>.
        /// </summary>
        public MassConcentration ToKilopoundsPerCubicInch => ToUnit(MassConcentrationUnit.KilopoundPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MicrogramPerCubicMeter">MicrogramsPerCubicMeter</see>.
        /// </summary>
        public MassConcentration ToMicrogramsPerCubicMeter => ToUnit(MassConcentrationUnit.MicrogramPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MicrogramPerDeciliter">MicrogramsPerDeciliter</see>.
        /// </summary>
        public MassConcentration ToMicrogramsPerDeciliter => ToUnit(MassConcentrationUnit.MicrogramPerDeciliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MicrogramPerLiter">MicrogramsPerLiter</see>.
        /// </summary>
        public MassConcentration ToMicrogramsPerLiter => ToUnit(MassConcentrationUnit.MicrogramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MicrogramPerMicroliter">MicrogramsPerMicroliter</see>.
        /// </summary>
        public MassConcentration ToMicrogramsPerMicroliter => ToUnit(MassConcentrationUnit.MicrogramPerMicroliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MicrogramPerMilliliter">MicrogramsPerMilliliter</see>.
        /// </summary>
        public MassConcentration ToMicrogramsPerMilliliter => ToUnit(MassConcentrationUnit.MicrogramPerMilliliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MilligramPerCubicMeter">MilligramsPerCubicMeter</see>.
        /// </summary>
        public MassConcentration ToMilligramsPerCubicMeter => ToUnit(MassConcentrationUnit.MilligramPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MilligramPerDeciliter">MilligramsPerDeciliter</see>.
        /// </summary>
        public MassConcentration ToMilligramsPerDeciliter => ToUnit(MassConcentrationUnit.MilligramPerDeciliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MilligramPerLiter">MilligramsPerLiter</see>.
        /// </summary>
        public MassConcentration ToMilligramsPerLiter => ToUnit(MassConcentrationUnit.MilligramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MilligramPerMicroliter">MilligramsPerMicroliter</see>.
        /// </summary>
        public MassConcentration ToMilligramsPerMicroliter => ToUnit(MassConcentrationUnit.MilligramPerMicroliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.MilligramPerMilliliter">MilligramsPerMilliliter</see>.
        /// </summary>
        public MassConcentration ToMilligramsPerMilliliter => ToUnit(MassConcentrationUnit.MilligramPerMilliliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.NanogramPerDeciliter">NanogramsPerDeciliter</see>.
        /// </summary>
        public MassConcentration ToNanogramsPerDeciliter => ToUnit(MassConcentrationUnit.NanogramPerDeciliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.NanogramPerLiter">NanogramsPerLiter</see>.
        /// </summary>
        public MassConcentration ToNanogramsPerLiter => ToUnit(MassConcentrationUnit.NanogramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.NanogramPerMicroliter">NanogramsPerMicroliter</see>.
        /// </summary>
        public MassConcentration ToNanogramsPerMicroliter => ToUnit(MassConcentrationUnit.NanogramPerMicroliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.NanogramPerMilliliter">NanogramsPerMilliliter</see>.
        /// </summary>
        public MassConcentration ToNanogramsPerMilliliter => ToUnit(MassConcentrationUnit.NanogramPerMilliliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.OuncePerImperialGallon">OuncesPerImperialGallon</see>.
        /// </summary>
        public MassConcentration ToOuncesPerImperialGallon => ToUnit(MassConcentrationUnit.OuncePerImperialGallon);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.OuncePerUSGallon">OuncesPerUSGallon</see>.
        /// </summary>
        public MassConcentration ToOuncesPerUSGallon => ToUnit(MassConcentrationUnit.OuncePerUSGallon);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PicogramPerDeciliter">PicogramsPerDeciliter</see>.
        /// </summary>
        public MassConcentration ToPicogramsPerDeciliter => ToUnit(MassConcentrationUnit.PicogramPerDeciliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PicogramPerLiter">PicogramsPerLiter</see>.
        /// </summary>
        public MassConcentration ToPicogramsPerLiter => ToUnit(MassConcentrationUnit.PicogramPerLiter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PicogramPerMicroliter">PicogramsPerMicroliter</see>.
        /// </summary>
        public MassConcentration ToPicogramsPerMicroliter => ToUnit(MassConcentrationUnit.PicogramPerMicroliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PicogramPerMilliliter">PicogramsPerMilliliter</see>.
        /// </summary>
        public MassConcentration ToPicogramsPerMilliliter => ToUnit(MassConcentrationUnit.PicogramPerMilliliter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PoundPerCubicFoot">PoundsPerCubicFoot</see>.
        /// </summary>
        public MassConcentration ToPoundsPerCubicFoot => ToUnit(MassConcentrationUnit.PoundPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PoundPerCubicInch">PoundsPerCubicInch</see>.
        /// </summary>
        public MassConcentration ToPoundsPerCubicInch => ToUnit(MassConcentrationUnit.PoundPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PoundPerImperialGallon">PoundsPerImperialGallon</see>.
        /// </summary>
        public MassConcentration ToPoundsPerImperialGallon => ToUnit(MassConcentrationUnit.PoundPerImperialGallon);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.PoundPerUSGallon">PoundsPerUSGallon</see>.
        /// </summary>
        public MassConcentration ToPoundsPerUSGallon => ToUnit(MassConcentrationUnit.PoundPerUSGallon);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.SlugPerCubicFoot">SlugsPerCubicFoot</see>.
        /// </summary>
        public MassConcentration ToSlugsPerCubicFoot => ToUnit(MassConcentrationUnit.SlugPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.TonnePerCubicCentimeter">TonnesPerCubicCentimeter</see>.
        /// </summary>
        public MassConcentration ToTonnesPerCubicCentimeter => ToUnit(MassConcentrationUnit.TonnePerCubicCentimeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.TonnePerCubicMeter">TonnesPerCubicMeter</see>.
        /// </summary>
        public MassConcentration ToTonnesPerCubicMeter => ToUnit(MassConcentrationUnit.TonnePerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="MassConcentration"/> converted into <see cref="MassConcentrationUnit.TonnePerCubicMillimeter">TonnesPerCubicMillimeter</see>.
        /// </summary>
        public MassConcentration ToTonnesPerCubicMillimeter => ToUnit(MassConcentrationUnit.TonnePerCubicMillimeter);

        #endregion

        #region Static Methods

        internal static void MapGeneratedLocalizations(UnitAbbreviationsCache unitAbbreviationsCache)
        {
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.CentigramPerDeciliter, new CultureInfo("en-US"), false, true, new string[]{"cg/dL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.CentigramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"cg/L"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.CentigramPerMicroliter, new CultureInfo("en-US"), false, true, new string[]{"cg/μL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.CentigramPerMilliliter, new CultureInfo("en-US"), false, true, new string[]{"cg/mL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.DecigramPerDeciliter, new CultureInfo("en-US"), false, true, new string[]{"dg/dL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.DecigramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"dg/L"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.DecigramPerMicroliter, new CultureInfo("en-US"), false, true, new string[]{"dg/μL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.DecigramPerMilliliter, new CultureInfo("en-US"), false, true, new string[]{"dg/mL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.GramPerCubicCentimeter, new CultureInfo("en-US"), false, true, new string[]{"g/cm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.GramPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"g/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.GramPerCubicMeter, new CultureInfo("ru-RU"), false, true, new string[]{"г/м³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.GramPerCubicMillimeter, new CultureInfo("en-US"), false, true, new string[]{"g/mm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.GramPerDeciliter, new CultureInfo("en-US"), false, true, new string[]{"g/dL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.GramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"g/L"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.GramPerMicroliter, new CultureInfo("en-US"), false, true, new string[]{"g/μL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.GramPerMilliliter, new CultureInfo("en-US"), false, true, new string[]{"g/mL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.KilogramPerCubicCentimeter, new CultureInfo("en-US"), false, true, new string[]{"kg/cm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.KilogramPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"kg/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.KilogramPerCubicMeter, new CultureInfo("ru-RU"), false, true, new string[]{"кг/м³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.KilogramPerCubicMillimeter, new CultureInfo("en-US"), false, true, new string[]{"kg/mm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.KilogramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"kg/L"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.KilopoundPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"kip/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.KilopoundPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"kip/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.MicrogramPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"µg/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.MicrogramPerCubicMeter, new CultureInfo("ru-RU"), false, true, new string[]{"мкг/м³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.MicrogramPerDeciliter, new CultureInfo("en-US"), false, true, new string[]{"µg/dL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.MicrogramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"µg/L"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.MicrogramPerMicroliter, new CultureInfo("en-US"), false, true, new string[]{"µg/μL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.MicrogramPerMilliliter, new CultureInfo("en-US"), false, true, new string[]{"µg/mL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.MilligramPerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"mg/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.MilligramPerCubicMeter, new CultureInfo("ru-RU"), false, true, new string[]{"мг/м³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.MilligramPerDeciliter, new CultureInfo("en-US"), false, true, new string[]{"mg/dL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.MilligramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"mg/L"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.MilligramPerMicroliter, new CultureInfo("en-US"), false, true, new string[]{"mg/μL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.MilligramPerMilliliter, new CultureInfo("en-US"), false, true, new string[]{"mg/mL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.NanogramPerDeciliter, new CultureInfo("en-US"), false, true, new string[]{"ng/dL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.NanogramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"ng/L"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.NanogramPerMicroliter, new CultureInfo("en-US"), false, true, new string[]{"ng/μL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.NanogramPerMilliliter, new CultureInfo("en-US"), false, true, new string[]{"ng/mL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.OuncePerImperialGallon, new CultureInfo("en-US"), false, true, new string[]{"oz/gal (imp.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.OuncePerUSGallon, new CultureInfo("en-US"), false, true, new string[]{"oz/gal (U.S.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.PicogramPerDeciliter, new CultureInfo("en-US"), false, true, new string[]{"pg/dL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.PicogramPerLiter, new CultureInfo("en-US"), false, true, new string[]{"pg/L"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.PicogramPerMicroliter, new CultureInfo("en-US"), false, true, new string[]{"pg/μL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.PicogramPerMilliliter, new CultureInfo("en-US"), false, true, new string[]{"pg/mL"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.PoundPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"lb/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.PoundPerCubicInch, new CultureInfo("en-US"), false, true, new string[]{"lb/in³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.PoundPerImperialGallon, new CultureInfo("en-US"), false, true, new string[]{"ppg (imp.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.PoundPerUSGallon, new CultureInfo("en-US"), false, true, new string[]{"ppg (U.S.)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.SlugPerCubicFoot, new CultureInfo("en-US"), false, true, new string[]{"slug/ft³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.TonnePerCubicCentimeter, new CultureInfo("en-US"), false, true, new string[]{"t/cm³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.TonnePerCubicMeter, new CultureInfo("en-US"), false, true, new string[]{"t/m³"});
            unitAbbreviationsCache.PerformAbbreviationMapping(MassConcentrationUnit.TonnePerCubicMillimeter, new CultureInfo("en-US"), false, true, new string[]{"t/mm³"});
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(MassConcentrationUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(MassConcentrationUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.CentigramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromCentigramsPerDeciliter(double centigramsperdeciliter)
        {
            double value = (double) centigramsperdeciliter;
            return new MassConcentration(value, MassConcentrationUnit.CentigramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.CentigramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromCentigramsPerLiter(double centigramsperliter)
        {
            double value = (double) centigramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.CentigramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.CentigramPerMicroliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromCentigramsPerMicroliter(double centigramspermicroliter)
        {
            double value = (double) centigramspermicroliter;
            return new MassConcentration(value, MassConcentrationUnit.CentigramPerMicroliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.CentigramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromCentigramsPerMilliliter(double centigramspermilliliter)
        {
            double value = (double) centigramspermilliliter;
            return new MassConcentration(value, MassConcentrationUnit.CentigramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.DecigramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromDecigramsPerDeciliter(double decigramsperdeciliter)
        {
            double value = (double) decigramsperdeciliter;
            return new MassConcentration(value, MassConcentrationUnit.DecigramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.DecigramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromDecigramsPerLiter(double decigramsperliter)
        {
            double value = (double) decigramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.DecigramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.DecigramPerMicroliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromDecigramsPerMicroliter(double decigramspermicroliter)
        {
            double value = (double) decigramspermicroliter;
            return new MassConcentration(value, MassConcentrationUnit.DecigramPerMicroliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.DecigramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromDecigramsPerMilliliter(double decigramspermilliliter)
        {
            double value = (double) decigramspermilliliter;
            return new MassConcentration(value, MassConcentrationUnit.DecigramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.GramPerCubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromGramsPerCubicCentimeter(double gramspercubiccentimeter)
        {
            double value = (double) gramspercubiccentimeter;
            return new MassConcentration(value, MassConcentrationUnit.GramPerCubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.GramPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromGramsPerCubicMeter(double gramspercubicmeter)
        {
            double value = (double) gramspercubicmeter;
            return new MassConcentration(value, MassConcentrationUnit.GramPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.GramPerCubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromGramsPerCubicMillimeter(double gramspercubicmillimeter)
        {
            double value = (double) gramspercubicmillimeter;
            return new MassConcentration(value, MassConcentrationUnit.GramPerCubicMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.GramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromGramsPerDeciliter(double gramsperdeciliter)
        {
            double value = (double) gramsperdeciliter;
            return new MassConcentration(value, MassConcentrationUnit.GramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.GramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromGramsPerLiter(double gramsperliter)
        {
            double value = (double) gramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.GramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.GramPerMicroliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromGramsPerMicroliter(double gramspermicroliter)
        {
            double value = (double) gramspermicroliter;
            return new MassConcentration(value, MassConcentrationUnit.GramPerMicroliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.GramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromGramsPerMilliliter(double gramspermilliliter)
        {
            double value = (double) gramspermilliliter;
            return new MassConcentration(value, MassConcentrationUnit.GramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.KilogramPerCubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromKilogramsPerCubicCentimeter(double kilogramspercubiccentimeter)
        {
            double value = (double) kilogramspercubiccentimeter;
            return new MassConcentration(value, MassConcentrationUnit.KilogramPerCubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.KilogramPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromKilogramsPerCubicMeter(double kilogramspercubicmeter)
        {
            double value = (double) kilogramspercubicmeter;
            return new MassConcentration(value, MassConcentrationUnit.KilogramPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.KilogramPerCubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromKilogramsPerCubicMillimeter(double kilogramspercubicmillimeter)
        {
            double value = (double) kilogramspercubicmillimeter;
            return new MassConcentration(value, MassConcentrationUnit.KilogramPerCubicMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.KilogramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromKilogramsPerLiter(double kilogramsperliter)
        {
            double value = (double) kilogramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.KilogramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.KilopoundPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromKilopoundsPerCubicFoot(double kilopoundspercubicfoot)
        {
            double value = (double) kilopoundspercubicfoot;
            return new MassConcentration(value, MassConcentrationUnit.KilopoundPerCubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.KilopoundPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromKilopoundsPerCubicInch(double kilopoundspercubicinch)
        {
            double value = (double) kilopoundspercubicinch;
            return new MassConcentration(value, MassConcentrationUnit.KilopoundPerCubicInch);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.MicrogramPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromMicrogramsPerCubicMeter(double microgramspercubicmeter)
        {
            double value = (double) microgramspercubicmeter;
            return new MassConcentration(value, MassConcentrationUnit.MicrogramPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.MicrogramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromMicrogramsPerDeciliter(double microgramsperdeciliter)
        {
            double value = (double) microgramsperdeciliter;
            return new MassConcentration(value, MassConcentrationUnit.MicrogramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.MicrogramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromMicrogramsPerLiter(double microgramsperliter)
        {
            double value = (double) microgramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.MicrogramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.MicrogramPerMicroliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromMicrogramsPerMicroliter(double microgramspermicroliter)
        {
            double value = (double) microgramspermicroliter;
            return new MassConcentration(value, MassConcentrationUnit.MicrogramPerMicroliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.MicrogramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromMicrogramsPerMilliliter(double microgramspermilliliter)
        {
            double value = (double) microgramspermilliliter;
            return new MassConcentration(value, MassConcentrationUnit.MicrogramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.MilligramPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromMilligramsPerCubicMeter(double milligramspercubicmeter)
        {
            double value = (double) milligramspercubicmeter;
            return new MassConcentration(value, MassConcentrationUnit.MilligramPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.MilligramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromMilligramsPerDeciliter(double milligramsperdeciliter)
        {
            double value = (double) milligramsperdeciliter;
            return new MassConcentration(value, MassConcentrationUnit.MilligramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.MilligramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromMilligramsPerLiter(double milligramsperliter)
        {
            double value = (double) milligramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.MilligramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.MilligramPerMicroliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromMilligramsPerMicroliter(double milligramspermicroliter)
        {
            double value = (double) milligramspermicroliter;
            return new MassConcentration(value, MassConcentrationUnit.MilligramPerMicroliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.MilligramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromMilligramsPerMilliliter(double milligramspermilliliter)
        {
            double value = (double) milligramspermilliliter;
            return new MassConcentration(value, MassConcentrationUnit.MilligramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.NanogramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromNanogramsPerDeciliter(double nanogramsperdeciliter)
        {
            double value = (double) nanogramsperdeciliter;
            return new MassConcentration(value, MassConcentrationUnit.NanogramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.NanogramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromNanogramsPerLiter(double nanogramsperliter)
        {
            double value = (double) nanogramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.NanogramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.NanogramPerMicroliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromNanogramsPerMicroliter(double nanogramspermicroliter)
        {
            double value = (double) nanogramspermicroliter;
            return new MassConcentration(value, MassConcentrationUnit.NanogramPerMicroliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.NanogramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromNanogramsPerMilliliter(double nanogramspermilliliter)
        {
            double value = (double) nanogramspermilliliter;
            return new MassConcentration(value, MassConcentrationUnit.NanogramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.OuncePerImperialGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromOuncesPerImperialGallon(double ouncesperimperialgallon)
        {
            double value = (double) ouncesperimperialgallon;
            return new MassConcentration(value, MassConcentrationUnit.OuncePerImperialGallon);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.OuncePerUSGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromOuncesPerUSGallon(double ouncesperusgallon)
        {
            double value = (double) ouncesperusgallon;
            return new MassConcentration(value, MassConcentrationUnit.OuncePerUSGallon);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.PicogramPerDeciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromPicogramsPerDeciliter(double picogramsperdeciliter)
        {
            double value = (double) picogramsperdeciliter;
            return new MassConcentration(value, MassConcentrationUnit.PicogramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.PicogramPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromPicogramsPerLiter(double picogramsperliter)
        {
            double value = (double) picogramsperliter;
            return new MassConcentration(value, MassConcentrationUnit.PicogramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.PicogramPerMicroliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromPicogramsPerMicroliter(double picogramspermicroliter)
        {
            double value = (double) picogramspermicroliter;
            return new MassConcentration(value, MassConcentrationUnit.PicogramPerMicroliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.PicogramPerMilliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromPicogramsPerMilliliter(double picogramspermilliliter)
        {
            double value = (double) picogramspermilliliter;
            return new MassConcentration(value, MassConcentrationUnit.PicogramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.PoundPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromPoundsPerCubicFoot(double poundspercubicfoot)
        {
            double value = (double) poundspercubicfoot;
            return new MassConcentration(value, MassConcentrationUnit.PoundPerCubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.PoundPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromPoundsPerCubicInch(double poundspercubicinch)
        {
            double value = (double) poundspercubicinch;
            return new MassConcentration(value, MassConcentrationUnit.PoundPerCubicInch);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.PoundPerImperialGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromPoundsPerImperialGallon(double poundsperimperialgallon)
        {
            double value = (double) poundsperimperialgallon;
            return new MassConcentration(value, MassConcentrationUnit.PoundPerImperialGallon);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.PoundPerUSGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromPoundsPerUSGallon(double poundsperusgallon)
        {
            double value = (double) poundsperusgallon;
            return new MassConcentration(value, MassConcentrationUnit.PoundPerUSGallon);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.SlugPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromSlugsPerCubicFoot(double slugspercubicfoot)
        {
            double value = (double) slugspercubicfoot;
            return new MassConcentration(value, MassConcentrationUnit.SlugPerCubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.TonnePerCubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromTonnesPerCubicCentimeter(double tonnespercubiccentimeter)
        {
            double value = (double) tonnespercubiccentimeter;
            return new MassConcentration(value, MassConcentrationUnit.TonnePerCubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.TonnePerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromTonnesPerCubicMeter(double tonnespercubicmeter)
        {
            double value = (double) tonnespercubicmeter;
            return new MassConcentration(value, MassConcentrationUnit.TonnePerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="MassConcentration"/> from <see cref="MassConcentrationUnit.TonnePerCubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static MassConcentration FromTonnesPerCubicMillimeter(double tonnespercubicmillimeter)
        {
            double value = (double) tonnespercubicmillimeter;
            return new MassConcentration(value, MassConcentrationUnit.TonnePerCubicMillimeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MassConcentrationUnit" /> to <see cref="MassConcentration" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MassConcentration unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static MassConcentration From(double value, MassConcentrationUnit fromUnit)
        {
            return new MassConcentration((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static MassConcentration Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static MassConcentration Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<MassConcentration, MassConcentrationUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out MassConcentration result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out MassConcentration result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<MassConcentration, MassConcentrationUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static MassConcentrationUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static MassConcentrationUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<MassConcentrationUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out MassConcentrationUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out MassConcentrationUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<MassConcentrationUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if (obj is null) throw new ArgumentNullException(nameof(obj));
            if (!(obj is MassConcentration objMassConcentration)) throw new ArgumentException("Expected type MassConcentration.", nameof(obj));

            return CompareTo(objMassConcentration);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(MassConcentration other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if (obj is null || !(obj is MassConcentration objMassConcentration))
                return false;

            return Equals(objMassConcentration);
        }

        public bool Equals(MassConcentration other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another MassConcentration within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(MassConcentration other, double tolerance, ComparisonType comparisonType)
        {
            if (tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current MassConcentration.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((MassConcentrationUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(MassConcentrationUnit unit)
        {
            if (Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this MassConcentration to another MassConcentration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A MassConcentration with the specified unit.</returns>
        public MassConcentration ToUnit(MassConcentrationUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new MassConcentration(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case MassConcentrationUnit.CentigramPerDeciliter: return (_value / 1e-1) * 1e-2d;
                case MassConcentrationUnit.CentigramPerLiter: return (_value) * 1e-2d;
                case MassConcentrationUnit.CentigramPerMicroliter: return (_value / 1e-6) * 1e-2d;
                case MassConcentrationUnit.CentigramPerMilliliter: return (_value / 1e-3) * 1e-2d;
                case MassConcentrationUnit.DecigramPerDeciliter: return (_value / 1e-1) * 1e-1d;
                case MassConcentrationUnit.DecigramPerLiter: return (_value) * 1e-1d;
                case MassConcentrationUnit.DecigramPerMicroliter: return (_value / 1e-6) * 1e-1d;
                case MassConcentrationUnit.DecigramPerMilliliter: return (_value / 1e-3) * 1e-1d;
                case MassConcentrationUnit.GramPerCubicCentimeter: return _value / 1e-3;
                case MassConcentrationUnit.GramPerCubicMeter: return _value / 1e3;
                case MassConcentrationUnit.GramPerCubicMillimeter: return _value / 1e-6;
                case MassConcentrationUnit.GramPerDeciliter: return _value / 1e-1;
                case MassConcentrationUnit.GramPerLiter: return _value;
                case MassConcentrationUnit.GramPerMicroliter: return _value / 1e-6;
                case MassConcentrationUnit.GramPerMilliliter: return _value / 1e-3;
                case MassConcentrationUnit.KilogramPerCubicCentimeter: return (_value / 1e-3) * 1e3d;
                case MassConcentrationUnit.KilogramPerCubicMeter: return (_value / 1e3) * 1e3d;
                case MassConcentrationUnit.KilogramPerCubicMillimeter: return (_value / 1e-6) * 1e3d;
                case MassConcentrationUnit.KilogramPerLiter: return (_value) * 1e3d;
                case MassConcentrationUnit.KilopoundPerCubicFoot: return (_value / 0.062427961) * 1e3d;
                case MassConcentrationUnit.KilopoundPerCubicInch: return (_value / 3.6127298147753e-5) * 1e3d;
                case MassConcentrationUnit.MicrogramPerCubicMeter: return (_value / 1e3) * 1e-6d;
                case MassConcentrationUnit.MicrogramPerDeciliter: return (_value / 1e-1) * 1e-6d;
                case MassConcentrationUnit.MicrogramPerLiter: return (_value) * 1e-6d;
                case MassConcentrationUnit.MicrogramPerMicroliter: return (_value / 1e-6) * 1e-6d;
                case MassConcentrationUnit.MicrogramPerMilliliter: return (_value / 1e-3) * 1e-6d;
                case MassConcentrationUnit.MilligramPerCubicMeter: return (_value / 1e3) * 1e-3d;
                case MassConcentrationUnit.MilligramPerDeciliter: return (_value / 1e-1) * 1e-3d;
                case MassConcentrationUnit.MilligramPerLiter: return (_value) * 1e-3d;
                case MassConcentrationUnit.MilligramPerMicroliter: return (_value / 1e-6) * 1e-3d;
                case MassConcentrationUnit.MilligramPerMilliliter: return (_value / 1e-3) * 1e-3d;
                case MassConcentrationUnit.NanogramPerDeciliter: return (_value / 1e-1) * 1e-9d;
                case MassConcentrationUnit.NanogramPerLiter: return (_value) * 1e-9d;
                case MassConcentrationUnit.NanogramPerMicroliter: return (_value / 1e-6) * 1e-9d;
                case MassConcentrationUnit.NanogramPerMilliliter: return (_value / 1e-3) * 1e-9d;
                case MassConcentrationUnit.OuncePerImperialGallon: return  _value / 0.1603586720609;
                case MassConcentrationUnit.OuncePerUSGallon: return  _value / 0.1335264711843;
                case MassConcentrationUnit.PicogramPerDeciliter: return (_value / 1e-1) * 1e-12d;
                case MassConcentrationUnit.PicogramPerLiter: return (_value) * 1e-12d;
                case MassConcentrationUnit.PicogramPerMicroliter: return (_value / 1e-6) * 1e-12d;
                case MassConcentrationUnit.PicogramPerMilliliter: return (_value / 1e-3) * 1e-12d;
                case MassConcentrationUnit.PoundPerCubicFoot: return _value / 0.062427961;
                case MassConcentrationUnit.PoundPerCubicInch: return _value / 3.6127298147753e-5;
                case MassConcentrationUnit.PoundPerImperialGallon: return _value * 9.9776398e1;
                case MassConcentrationUnit.PoundPerUSGallon: return _value * 1.19826427e2;
                case MassConcentrationUnit.SlugPerCubicFoot: return _value * 515.378818;
                case MassConcentrationUnit.TonnePerCubicCentimeter: return _value / 1e-9;
                case MassConcentrationUnit.TonnePerCubicMeter: return _value / 0.001;
                case MassConcentrationUnit.TonnePerCubicMillimeter: return _value / 1e-12;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(MassConcentrationUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case MassConcentrationUnit.CentigramPerDeciliter: return (baseUnitValue * 1e-1) / 1e-2d;
                case MassConcentrationUnit.CentigramPerLiter: return (baseUnitValue) / 1e-2d;
                case MassConcentrationUnit.CentigramPerMicroliter: return (baseUnitValue * 1e-6) / 1e-2d;
                case MassConcentrationUnit.CentigramPerMilliliter: return (baseUnitValue * 1e-3) / 1e-2d;
                case MassConcentrationUnit.DecigramPerDeciliter: return (baseUnitValue * 1e-1) / 1e-1d;
                case MassConcentrationUnit.DecigramPerLiter: return (baseUnitValue) / 1e-1d;
                case MassConcentrationUnit.DecigramPerMicroliter: return (baseUnitValue * 1e-6) / 1e-1d;
                case MassConcentrationUnit.DecigramPerMilliliter: return (baseUnitValue * 1e-3) / 1e-1d;
                case MassConcentrationUnit.GramPerCubicCentimeter: return baseUnitValue * 1e-3;
                case MassConcentrationUnit.GramPerCubicMeter: return baseUnitValue * 1e3;
                case MassConcentrationUnit.GramPerCubicMillimeter: return baseUnitValue * 1e-6;
                case MassConcentrationUnit.GramPerDeciliter: return baseUnitValue * 1e-1;
                case MassConcentrationUnit.GramPerLiter: return baseUnitValue;
                case MassConcentrationUnit.GramPerMicroliter: return baseUnitValue * 1e-6;
                case MassConcentrationUnit.GramPerMilliliter: return baseUnitValue * 1e-3;
                case MassConcentrationUnit.KilogramPerCubicCentimeter: return (baseUnitValue * 1e-3) / 1e3d;
                case MassConcentrationUnit.KilogramPerCubicMeter: return (baseUnitValue * 1e3) / 1e3d;
                case MassConcentrationUnit.KilogramPerCubicMillimeter: return (baseUnitValue * 1e-6) / 1e3d;
                case MassConcentrationUnit.KilogramPerLiter: return (baseUnitValue) / 1e3d;
                case MassConcentrationUnit.KilopoundPerCubicFoot: return (baseUnitValue * 0.062427961) / 1e3d;
                case MassConcentrationUnit.KilopoundPerCubicInch: return (baseUnitValue * 3.6127298147753e-5) / 1e3d;
                case MassConcentrationUnit.MicrogramPerCubicMeter: return (baseUnitValue * 1e3) / 1e-6d;
                case MassConcentrationUnit.MicrogramPerDeciliter: return (baseUnitValue * 1e-1) / 1e-6d;
                case MassConcentrationUnit.MicrogramPerLiter: return (baseUnitValue) / 1e-6d;
                case MassConcentrationUnit.MicrogramPerMicroliter: return (baseUnitValue * 1e-6) / 1e-6d;
                case MassConcentrationUnit.MicrogramPerMilliliter: return (baseUnitValue * 1e-3) / 1e-6d;
                case MassConcentrationUnit.MilligramPerCubicMeter: return (baseUnitValue * 1e3) / 1e-3d;
                case MassConcentrationUnit.MilligramPerDeciliter: return (baseUnitValue * 1e-1) / 1e-3d;
                case MassConcentrationUnit.MilligramPerLiter: return (baseUnitValue) / 1e-3d;
                case MassConcentrationUnit.MilligramPerMicroliter: return (baseUnitValue * 1e-6) / 1e-3d;
                case MassConcentrationUnit.MilligramPerMilliliter: return (baseUnitValue * 1e-3) / 1e-3d;
                case MassConcentrationUnit.NanogramPerDeciliter: return (baseUnitValue * 1e-1) / 1e-9d;
                case MassConcentrationUnit.NanogramPerLiter: return (baseUnitValue) / 1e-9d;
                case MassConcentrationUnit.NanogramPerMicroliter: return (baseUnitValue * 1e-6) / 1e-9d;
                case MassConcentrationUnit.NanogramPerMilliliter: return (baseUnitValue * 1e-3) / 1e-9d;
                case MassConcentrationUnit.OuncePerImperialGallon: return baseUnitValue * 0.1603586720609;
                case MassConcentrationUnit.OuncePerUSGallon: return baseUnitValue * 0.1335264711843;
                case MassConcentrationUnit.PicogramPerDeciliter: return (baseUnitValue * 1e-1) / 1e-12d;
                case MassConcentrationUnit.PicogramPerLiter: return (baseUnitValue) / 1e-12d;
                case MassConcentrationUnit.PicogramPerMicroliter: return (baseUnitValue * 1e-6) / 1e-12d;
                case MassConcentrationUnit.PicogramPerMilliliter: return (baseUnitValue * 1e-3) / 1e-12d;
                case MassConcentrationUnit.PoundPerCubicFoot: return baseUnitValue * 0.062427961;
                case MassConcentrationUnit.PoundPerCubicInch: return baseUnitValue * 3.6127298147753e-5;
                case MassConcentrationUnit.PoundPerImperialGallon: return baseUnitValue / 9.9776398e1;
                case MassConcentrationUnit.PoundPerUSGallon: return baseUnitValue / 1.19826427e2;
                case MassConcentrationUnit.SlugPerCubicFoot: return baseUnitValue * 0.00194032033;
                case MassConcentrationUnit.TonnePerCubicCentimeter: return baseUnitValue * 1e-9;
                case MassConcentrationUnit.TonnePerCubicMeter: return baseUnitValue * 0.001;
                case MassConcentrationUnit.TonnePerCubicMillimeter: return baseUnitValue * 1e-12;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
