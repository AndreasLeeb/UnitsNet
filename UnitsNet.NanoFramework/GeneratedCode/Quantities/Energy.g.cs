//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The joule, symbol J, is a derived unit of energy, work, or amount of heat in the International System of Units. It is equal to the energy transferred (or work done) when applying a force of one newton through a distance of one metre (1 newton metre or NÂ·m), or in passing an electric current of one ampere through a resistance of one ohm for one second. Many other units of energy are included. Please do not confuse this definition of the calorie with the one colloquially used by the food industry, the large calorie, which is equivalent to 1 kcal. Thermochemical definition of the calorie is used. For BTU, the IT definition is used.
    /// </summary>
    public struct  Energy
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly EnergyUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public EnergyUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Energy(double value, EnergyUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static EnergyUnit BaseUnit { get; } = EnergyUnit.Joule;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static Energy MaxValue { get; } = new Energy(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static Energy MinValue { get; } = new Energy(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Energy Zero { get; } = new Energy(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.BritishThermalUnit"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToBritishThermalUnits property.")]
        public double BritishThermalUnits => As(EnergyUnit.BritishThermalUnit);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Calorie"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCalories property.")]
        public double Calories => As(EnergyUnit.Calorie);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.DecathermEc"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecathermsEc property.")]
        public double DecathermsEc => As(EnergyUnit.DecathermEc);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.DecathermImperial"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecathermsImperial property.")]
        public double DecathermsImperial => As(EnergyUnit.DecathermImperial);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.DecathermUs"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecathermsUs property.")]
        public double DecathermsUs => As(EnergyUnit.DecathermUs);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.ElectronVolt"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToElectronVolts property.")]
        public double ElectronVolts => As(EnergyUnit.ElectronVolt);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Erg"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToErgs property.")]
        public double Ergs => As(EnergyUnit.Erg);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.FootPound"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToFootPounds property.")]
        public double FootPounds => As(EnergyUnit.FootPound);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.GigabritishThermalUnit"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGigabritishThermalUnits property.")]
        public double GigabritishThermalUnits => As(EnergyUnit.GigabritishThermalUnit);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.GigaelectronVolt"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGigaelectronVolts property.")]
        public double GigaelectronVolts => As(EnergyUnit.GigaelectronVolt);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Gigajoule"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGigajoules property.")]
        public double Gigajoules => As(EnergyUnit.Gigajoule);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.GigawattDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGigawattDays property.")]
        public double GigawattDays => As(EnergyUnit.GigawattDay);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.GigawattHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGigawattHours property.")]
        public double GigawattHours => As(EnergyUnit.GigawattHour);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.HorsepowerHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToHorsepowerHours property.")]
        public double HorsepowerHours => As(EnergyUnit.HorsepowerHour);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Joule"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToJoules property.")]
        public double Joules => As(EnergyUnit.Joule);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.KilobritishThermalUnit"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilobritishThermalUnits property.")]
        public double KilobritishThermalUnits => As(EnergyUnit.KilobritishThermalUnit);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Kilocalorie"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilocalories property.")]
        public double Kilocalories => As(EnergyUnit.Kilocalorie);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.KiloelectronVolt"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKiloelectronVolts property.")]
        public double KiloelectronVolts => As(EnergyUnit.KiloelectronVolt);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Kilojoule"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilojoules property.")]
        public double Kilojoules => As(EnergyUnit.Kilojoule);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.KilowattDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilowattDays property.")]
        public double KilowattDays => As(EnergyUnit.KilowattDay);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.KilowattHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilowattHours property.")]
        public double KilowattHours => As(EnergyUnit.KilowattHour);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.MegabritishThermalUnit"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegabritishThermalUnits property.")]
        public double MegabritishThermalUnits => As(EnergyUnit.MegabritishThermalUnit);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Megacalorie"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegacalories property.")]
        public double Megacalories => As(EnergyUnit.Megacalorie);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.MegaelectronVolt"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegaelectronVolts property.")]
        public double MegaelectronVolts => As(EnergyUnit.MegaelectronVolt);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Megajoule"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegajoules property.")]
        public double Megajoules => As(EnergyUnit.Megajoule);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.MegawattDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegawattDays property.")]
        public double MegawattDays => As(EnergyUnit.MegawattDay);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.MegawattHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegawattHours property.")]
        public double MegawattHours => As(EnergyUnit.MegawattHour);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Millijoule"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillijoules property.")]
        public double Millijoules => As(EnergyUnit.Millijoule);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.TeraelectronVolt"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTeraelectronVolts property.")]
        public double TeraelectronVolts => As(EnergyUnit.TeraelectronVolt);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.TerawattDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTerawattDays property.")]
        public double TerawattDays => As(EnergyUnit.TerawattDay);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.TerawattHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTerawattHours property.")]
        public double TerawattHours => As(EnergyUnit.TerawattHour);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.ThermEc"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToThermsEc property.")]
        public double ThermsEc => As(EnergyUnit.ThermEc);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.ThermImperial"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToThermsImperial property.")]
        public double ThermsImperial => As(EnergyUnit.ThermImperial);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.ThermUs"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToThermsUs property.")]
        public double ThermsUs => As(EnergyUnit.ThermUs);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.WattDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToWattDays property.")]
        public double WattDays => As(EnergyUnit.WattDay);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.WattHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToWattHours property.")]
        public double WattHours => As(EnergyUnit.WattHour);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.BritishThermalUnit"/>.
        /// </summary>
        public Energy ToBritishThermalUnits => ToUnit(EnergyUnit.BritishThermalUnit);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Calorie"/>.
        /// </summary>
        public Energy ToCalories => ToUnit(EnergyUnit.Calorie);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.DecathermEc"/>.
        /// </summary>
        public Energy ToDecathermsEc => ToUnit(EnergyUnit.DecathermEc);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.DecathermImperial"/>.
        /// </summary>
        public Energy ToDecathermsImperial => ToUnit(EnergyUnit.DecathermImperial);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.DecathermUs"/>.
        /// </summary>
        public Energy ToDecathermsUs => ToUnit(EnergyUnit.DecathermUs);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.ElectronVolt"/>.
        /// </summary>
        public Energy ToElectronVolts => ToUnit(EnergyUnit.ElectronVolt);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Erg"/>.
        /// </summary>
        public Energy ToErgs => ToUnit(EnergyUnit.Erg);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.FootPound"/>.
        /// </summary>
        public Energy ToFootPounds => ToUnit(EnergyUnit.FootPound);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.GigabritishThermalUnit"/>.
        /// </summary>
        public Energy ToGigabritishThermalUnits => ToUnit(EnergyUnit.GigabritishThermalUnit);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.GigaelectronVolt"/>.
        /// </summary>
        public Energy ToGigaelectronVolts => ToUnit(EnergyUnit.GigaelectronVolt);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Gigajoule"/>.
        /// </summary>
        public Energy ToGigajoules => ToUnit(EnergyUnit.Gigajoule);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.GigawattDay"/>.
        /// </summary>
        public Energy ToGigawattDays => ToUnit(EnergyUnit.GigawattDay);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.GigawattHour"/>.
        /// </summary>
        public Energy ToGigawattHours => ToUnit(EnergyUnit.GigawattHour);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.HorsepowerHour"/>.
        /// </summary>
        public Energy ToHorsepowerHours => ToUnit(EnergyUnit.HorsepowerHour);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Joule"/>.
        /// </summary>
        public Energy ToJoules => ToUnit(EnergyUnit.Joule);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.KilobritishThermalUnit"/>.
        /// </summary>
        public Energy ToKilobritishThermalUnits => ToUnit(EnergyUnit.KilobritishThermalUnit);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Kilocalorie"/>.
        /// </summary>
        public Energy ToKilocalories => ToUnit(EnergyUnit.Kilocalorie);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.KiloelectronVolt"/>.
        /// </summary>
        public Energy ToKiloelectronVolts => ToUnit(EnergyUnit.KiloelectronVolt);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Kilojoule"/>.
        /// </summary>
        public Energy ToKilojoules => ToUnit(EnergyUnit.Kilojoule);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.KilowattDay"/>.
        /// </summary>
        public Energy ToKilowattDays => ToUnit(EnergyUnit.KilowattDay);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.KilowattHour"/>.
        /// </summary>
        public Energy ToKilowattHours => ToUnit(EnergyUnit.KilowattHour);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.MegabritishThermalUnit"/>.
        /// </summary>
        public Energy ToMegabritishThermalUnits => ToUnit(EnergyUnit.MegabritishThermalUnit);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Megacalorie"/>.
        /// </summary>
        public Energy ToMegacalories => ToUnit(EnergyUnit.Megacalorie);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.MegaelectronVolt"/>.
        /// </summary>
        public Energy ToMegaelectronVolts => ToUnit(EnergyUnit.MegaelectronVolt);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Megajoule"/>.
        /// </summary>
        public Energy ToMegajoules => ToUnit(EnergyUnit.Megajoule);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.MegawattDay"/>.
        /// </summary>
        public Energy ToMegawattDays => ToUnit(EnergyUnit.MegawattDay);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.MegawattHour"/>.
        /// </summary>
        public Energy ToMegawattHours => ToUnit(EnergyUnit.MegawattHour);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.Millijoule"/>.
        /// </summary>
        public Energy ToMillijoules => ToUnit(EnergyUnit.Millijoule);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.TeraelectronVolt"/>.
        /// </summary>
        public Energy ToTeraelectronVolts => ToUnit(EnergyUnit.TeraelectronVolt);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.TerawattDay"/>.
        /// </summary>
        public Energy ToTerawattDays => ToUnit(EnergyUnit.TerawattDay);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.TerawattHour"/>.
        /// </summary>
        public Energy ToTerawattHours => ToUnit(EnergyUnit.TerawattHour);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.ThermEc"/>.
        /// </summary>
        public Energy ToThermsEc => ToUnit(EnergyUnit.ThermEc);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.ThermImperial"/>.
        /// </summary>
        public Energy ToThermsImperial => ToUnit(EnergyUnit.ThermImperial);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.ThermUs"/>.
        /// </summary>
        public Energy ToThermsUs => ToUnit(EnergyUnit.ThermUs);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.WattDay"/>.
        /// </summary>
        public Energy ToWattDays => ToUnit(EnergyUnit.WattDay);

        /// <summary>
        ///     Gets this <see cref="Energy"/> converted into <see cref="EnergyUnit.WattHour"/>.
        /// </summary>
        public Energy ToWattHours => ToUnit(EnergyUnit.WattHour);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.BritishThermalUnit"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromBritishThermalUnits(double britishthermalunits) => new Energy(britishthermalunits, EnergyUnit.BritishThermalUnit);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.Calorie"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromCalories(double calories) => new Energy(calories, EnergyUnit.Calorie);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.DecathermEc"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromDecathermsEc(double decathermsec) => new Energy(decathermsec, EnergyUnit.DecathermEc);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.DecathermImperial"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromDecathermsImperial(double decathermsimperial) => new Energy(decathermsimperial, EnergyUnit.DecathermImperial);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.DecathermUs"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromDecathermsUs(double decathermsus) => new Energy(decathermsus, EnergyUnit.DecathermUs);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.ElectronVolt"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromElectronVolts(double electronvolts) => new Energy(electronvolts, EnergyUnit.ElectronVolt);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.Erg"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromErgs(double ergs) => new Energy(ergs, EnergyUnit.Erg);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.FootPound"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromFootPounds(double footpounds) => new Energy(footpounds, EnergyUnit.FootPound);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.GigabritishThermalUnit"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigabritishThermalUnits(double gigabritishthermalunits) => new Energy(gigabritishthermalunits, EnergyUnit.GigabritishThermalUnit);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.GigaelectronVolt"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigaelectronVolts(double gigaelectronvolts) => new Energy(gigaelectronvolts, EnergyUnit.GigaelectronVolt);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.Gigajoule"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigajoules(double gigajoules) => new Energy(gigajoules, EnergyUnit.Gigajoule);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.GigawattDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigawattDays(double gigawattdays) => new Energy(gigawattdays, EnergyUnit.GigawattDay);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.GigawattHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromGigawattHours(double gigawatthours) => new Energy(gigawatthours, EnergyUnit.GigawattHour);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.HorsepowerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromHorsepowerHours(double horsepowerhours) => new Energy(horsepowerhours, EnergyUnit.HorsepowerHour);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.Joule"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromJoules(double joules) => new Energy(joules, EnergyUnit.Joule);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.KilobritishThermalUnit"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilobritishThermalUnits(double kilobritishthermalunits) => new Energy(kilobritishthermalunits, EnergyUnit.KilobritishThermalUnit);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.Kilocalorie"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilocalories(double kilocalories) => new Energy(kilocalories, EnergyUnit.Kilocalorie);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.KiloelectronVolt"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKiloelectronVolts(double kiloelectronvolts) => new Energy(kiloelectronvolts, EnergyUnit.KiloelectronVolt);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.Kilojoule"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilojoules(double kilojoules) => new Energy(kilojoules, EnergyUnit.Kilojoule);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.KilowattDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilowattDays(double kilowattdays) => new Energy(kilowattdays, EnergyUnit.KilowattDay);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.KilowattHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromKilowattHours(double kilowatthours) => new Energy(kilowatthours, EnergyUnit.KilowattHour);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.MegabritishThermalUnit"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegabritishThermalUnits(double megabritishthermalunits) => new Energy(megabritishthermalunits, EnergyUnit.MegabritishThermalUnit);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.Megacalorie"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegacalories(double megacalories) => new Energy(megacalories, EnergyUnit.Megacalorie);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.MegaelectronVolt"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegaelectronVolts(double megaelectronvolts) => new Energy(megaelectronvolts, EnergyUnit.MegaelectronVolt);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.Megajoule"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegajoules(double megajoules) => new Energy(megajoules, EnergyUnit.Megajoule);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.MegawattDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegawattDays(double megawattdays) => new Energy(megawattdays, EnergyUnit.MegawattDay);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.MegawattHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMegawattHours(double megawatthours) => new Energy(megawatthours, EnergyUnit.MegawattHour);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.Millijoule"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromMillijoules(double millijoules) => new Energy(millijoules, EnergyUnit.Millijoule);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.TeraelectronVolt"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromTeraelectronVolts(double teraelectronvolts) => new Energy(teraelectronvolts, EnergyUnit.TeraelectronVolt);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.TerawattDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromTerawattDays(double terawattdays) => new Energy(terawattdays, EnergyUnit.TerawattDay);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.TerawattHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromTerawattHours(double terawatthours) => new Energy(terawatthours, EnergyUnit.TerawattHour);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.ThermEc"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromThermsEc(double thermsec) => new Energy(thermsec, EnergyUnit.ThermEc);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.ThermImperial"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromThermsImperial(double thermsimperial) => new Energy(thermsimperial, EnergyUnit.ThermImperial);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.ThermUs"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromThermsUs(double thermsus) => new Energy(thermsus, EnergyUnit.ThermUs);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.WattDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromWattDays(double wattdays) => new Energy(wattdays, EnergyUnit.WattDay);

        /// <summary>
        ///     Creates a <see cref="Energy"/> from <see cref="EnergyUnit.WattHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Energy FromWattHours(double watthours) => new Energy(watthours, EnergyUnit.WattHour);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="EnergyUnit" /> to <see cref="Energy" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Energy unit value.</returns>
        public static Energy From(double value, EnergyUnit fromUnit)
        {
            return new Energy(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(EnergyUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public Energy ToUnit(EnergyUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Energy(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                EnergyUnit.BritishThermalUnit => _value * 1055.05585262,
                EnergyUnit.Calorie => _value * 4.184,
                EnergyUnit.DecathermEc => (_value * 1.05505585262e8) * 1e1d,
                EnergyUnit.DecathermImperial => (_value * 1.05505585257348e8) * 1e1d,
                EnergyUnit.DecathermUs => (_value * 1.054804e8) * 1e1d,
                EnergyUnit.ElectronVolt => _value * 1.602176565e-19,
                EnergyUnit.Erg => _value * 1e-7,
                EnergyUnit.FootPound => _value * 1.355817948,
                EnergyUnit.GigabritishThermalUnit => (_value * 1055.05585262) * 1e9d,
                EnergyUnit.GigaelectronVolt => (_value * 1.602176565e-19) * 1e9d,
                EnergyUnit.Gigajoule => (_value) * 1e9d,
                EnergyUnit.GigawattDay => (_value * 24 * 3600d) * 1e9d,
                EnergyUnit.GigawattHour => (_value * 3600d) * 1e9d,
                EnergyUnit.HorsepowerHour => _value * 2.6845195377e6,
                EnergyUnit.Joule => _value,
                EnergyUnit.KilobritishThermalUnit => (_value * 1055.05585262) * 1e3d,
                EnergyUnit.Kilocalorie => (_value * 4.184) * 1e3d,
                EnergyUnit.KiloelectronVolt => (_value * 1.602176565e-19) * 1e3d,
                EnergyUnit.Kilojoule => (_value) * 1e3d,
                EnergyUnit.KilowattDay => (_value * 24 * 3600d) * 1e3d,
                EnergyUnit.KilowattHour => (_value * 3600d) * 1e3d,
                EnergyUnit.MegabritishThermalUnit => (_value * 1055.05585262) * 1e6d,
                EnergyUnit.Megacalorie => (_value * 4.184) * 1e6d,
                EnergyUnit.MegaelectronVolt => (_value * 1.602176565e-19) * 1e6d,
                EnergyUnit.Megajoule => (_value) * 1e6d,
                EnergyUnit.MegawattDay => (_value * 24 * 3600d) * 1e6d,
                EnergyUnit.MegawattHour => (_value * 3600d) * 1e6d,
                EnergyUnit.Millijoule => (_value) * 1e-3d,
                EnergyUnit.TeraelectronVolt => (_value * 1.602176565e-19) * 1e12d,
                EnergyUnit.TerawattDay => (_value * 24 * 3600d) * 1e12d,
                EnergyUnit.TerawattHour => (_value * 3600d) * 1e12d,
                EnergyUnit.ThermEc => _value * 1.05505585262e8,
                EnergyUnit.ThermImperial => _value * 1.05505585257348e8,
                EnergyUnit.ThermUs => _value * 1.054804e8,
                EnergyUnit.WattDay => _value * 24 * 3600d,
                EnergyUnit.WattHour => _value * 3600d,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(EnergyUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                EnergyUnit.BritishThermalUnit => baseUnitValue / 1055.05585262,
                EnergyUnit.Calorie => baseUnitValue / 4.184,
                EnergyUnit.DecathermEc => (baseUnitValue / 1.05505585262e8) / 1e1d,
                EnergyUnit.DecathermImperial => (baseUnitValue / 1.05505585257348e8) / 1e1d,
                EnergyUnit.DecathermUs => (baseUnitValue / 1.054804e8) / 1e1d,
                EnergyUnit.ElectronVolt => baseUnitValue / 1.602176565e-19,
                EnergyUnit.Erg => baseUnitValue / 1e-7,
                EnergyUnit.FootPound => baseUnitValue / 1.355817948,
                EnergyUnit.GigabritishThermalUnit => (baseUnitValue / 1055.05585262) / 1e9d,
                EnergyUnit.GigaelectronVolt => (baseUnitValue / 1.602176565e-19) / 1e9d,
                EnergyUnit.Gigajoule => (baseUnitValue) / 1e9d,
                EnergyUnit.GigawattDay => (baseUnitValue / (24 * 3600d)) / 1e9d,
                EnergyUnit.GigawattHour => (baseUnitValue / 3600d) / 1e9d,
                EnergyUnit.HorsepowerHour => baseUnitValue / 2.6845195377e6,
                EnergyUnit.Joule => baseUnitValue,
                EnergyUnit.KilobritishThermalUnit => (baseUnitValue / 1055.05585262) / 1e3d,
                EnergyUnit.Kilocalorie => (baseUnitValue / 4.184) / 1e3d,
                EnergyUnit.KiloelectronVolt => (baseUnitValue / 1.602176565e-19) / 1e3d,
                EnergyUnit.Kilojoule => (baseUnitValue) / 1e3d,
                EnergyUnit.KilowattDay => (baseUnitValue / (24 * 3600d)) / 1e3d,
                EnergyUnit.KilowattHour => (baseUnitValue / 3600d) / 1e3d,
                EnergyUnit.MegabritishThermalUnit => (baseUnitValue / 1055.05585262) / 1e6d,
                EnergyUnit.Megacalorie => (baseUnitValue / 4.184) / 1e6d,
                EnergyUnit.MegaelectronVolt => (baseUnitValue / 1.602176565e-19) / 1e6d,
                EnergyUnit.Megajoule => (baseUnitValue) / 1e6d,
                EnergyUnit.MegawattDay => (baseUnitValue / (24 * 3600d)) / 1e6d,
                EnergyUnit.MegawattHour => (baseUnitValue / 3600d) / 1e6d,
                EnergyUnit.Millijoule => (baseUnitValue) / 1e-3d,
                EnergyUnit.TeraelectronVolt => (baseUnitValue / 1.602176565e-19) / 1e12d,
                EnergyUnit.TerawattDay => (baseUnitValue / (24 * 3600d)) / 1e12d,
                EnergyUnit.TerawattHour => (baseUnitValue / 3600d) / 1e12d,
                EnergyUnit.ThermEc => baseUnitValue / 1.05505585262e8,
                EnergyUnit.ThermImperial => baseUnitValue / 1.05505585257348e8,
                EnergyUnit.ThermUs => baseUnitValue / 1.054804e8,
                EnergyUnit.WattDay => baseUnitValue / (24 * 3600d),
                EnergyUnit.WattHour => baseUnitValue / 3600d,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion
    }
}

