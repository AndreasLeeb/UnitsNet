//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In physics and engineering, in particular fluid dynamics and hydrometry, the volumetric flow rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time. The SI unit is m³/s (cubic meters per second). In US Customary Units and British Imperial Units, volumetric flow rate is often expressed as ft³/s (cubic feet per second). It is usually represented by the symbol Q.
    /// </summary>
    public struct  VolumeFlow
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeFlowUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public VolumeFlowUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public VolumeFlow(double value, VolumeFlowUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static VolumeFlowUnit BaseUnit { get; } = VolumeFlowUnit.CubicMeterPerSecond;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static VolumeFlow MaxValue { get; } = new VolumeFlow(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static VolumeFlow MinValue { get; } = new VolumeFlow(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static VolumeFlow Zero { get; } = new VolumeFlow(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.AcreFootPerDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToAcreFeetPerDay property.")]
        public double AcreFeetPerDay => As(VolumeFlowUnit.AcreFootPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.AcreFootPerHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToAcreFeetPerHour property.")]
        public double AcreFeetPerHour => As(VolumeFlowUnit.AcreFootPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.AcreFootPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToAcreFeetPerMinute property.")]
        public double AcreFeetPerMinute => As(VolumeFlowUnit.AcreFootPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.AcreFootPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToAcreFeetPerSecond property.")]
        public double AcreFeetPerSecond => As(VolumeFlowUnit.AcreFootPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CentiliterPerDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCentilitersPerDay property.")]
        public double CentilitersPerDay => As(VolumeFlowUnit.CentiliterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CentiliterPerHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCentilitersPerHour property.")]
        public double CentilitersPerHour => As(VolumeFlowUnit.CentiliterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CentiliterPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCentilitersPerMinute property.")]
        public double CentilitersPerMinute => As(VolumeFlowUnit.CentiliterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CentiliterPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCentilitersPerSecond property.")]
        public double CentilitersPerSecond => As(VolumeFlowUnit.CentiliterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicCentimeterPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicCentimetersPerMinute property.")]
        public double CubicCentimetersPerMinute => As(VolumeFlowUnit.CubicCentimeterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicDecimeterPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicDecimetersPerMinute property.")]
        public double CubicDecimetersPerMinute => As(VolumeFlowUnit.CubicDecimeterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicFootPerHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicFeetPerHour property.")]
        public double CubicFeetPerHour => As(VolumeFlowUnit.CubicFootPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicFootPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicFeetPerMinute property.")]
        public double CubicFeetPerMinute => As(VolumeFlowUnit.CubicFootPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicFootPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicFeetPerSecond property.")]
        public double CubicFeetPerSecond => As(VolumeFlowUnit.CubicFootPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicMeterPerDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicMetersPerDay property.")]
        public double CubicMetersPerDay => As(VolumeFlowUnit.CubicMeterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicMeterPerHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicMetersPerHour property.")]
        public double CubicMetersPerHour => As(VolumeFlowUnit.CubicMeterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicMeterPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicMetersPerMinute property.")]
        public double CubicMetersPerMinute => As(VolumeFlowUnit.CubicMeterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicMeterPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicMetersPerSecond property.")]
        public double CubicMetersPerSecond => As(VolumeFlowUnit.CubicMeterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicMillimeterPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicMillimetersPerSecond property.")]
        public double CubicMillimetersPerSecond => As(VolumeFlowUnit.CubicMillimeterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicYardPerDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicYardsPerDay property.")]
        public double CubicYardsPerDay => As(VolumeFlowUnit.CubicYardPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicYardPerHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicYardsPerHour property.")]
        public double CubicYardsPerHour => As(VolumeFlowUnit.CubicYardPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicYardPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicYardsPerMinute property.")]
        public double CubicYardsPerMinute => As(VolumeFlowUnit.CubicYardPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicYardPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicYardsPerSecond property.")]
        public double CubicYardsPerSecond => As(VolumeFlowUnit.CubicYardPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.DeciliterPerDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecilitersPerDay property.")]
        public double DecilitersPerDay => As(VolumeFlowUnit.DeciliterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.DeciliterPerHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecilitersPerHour property.")]
        public double DecilitersPerHour => As(VolumeFlowUnit.DeciliterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.DeciliterPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecilitersPerMinute property.")]
        public double DecilitersPerMinute => As(VolumeFlowUnit.DeciliterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.DeciliterPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecilitersPerSecond property.")]
        public double DecilitersPerSecond => As(VolumeFlowUnit.DeciliterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.KiloliterPerDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilolitersPerDay property.")]
        public double KilolitersPerDay => As(VolumeFlowUnit.KiloliterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.KiloliterPerHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilolitersPerHour property.")]
        public double KilolitersPerHour => As(VolumeFlowUnit.KiloliterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.KiloliterPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilolitersPerMinute property.")]
        public double KilolitersPerMinute => As(VolumeFlowUnit.KiloliterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.KiloliterPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilolitersPerSecond property.")]
        public double KilolitersPerSecond => As(VolumeFlowUnit.KiloliterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.KilousGallonPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilousGallonsPerMinute property.")]
        public double KilousGallonsPerMinute => As(VolumeFlowUnit.KilousGallonPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.LiterPerDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToLitersPerDay property.")]
        public double LitersPerDay => As(VolumeFlowUnit.LiterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.LiterPerHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToLitersPerHour property.")]
        public double LitersPerHour => As(VolumeFlowUnit.LiterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.LiterPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToLitersPerMinute property.")]
        public double LitersPerMinute => As(VolumeFlowUnit.LiterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.LiterPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToLitersPerSecond property.")]
        public double LitersPerSecond => As(VolumeFlowUnit.LiterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MegaliterPerDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegalitersPerDay property.")]
        public double MegalitersPerDay => As(VolumeFlowUnit.MegaliterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MegaukGallonPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegaukGallonsPerSecond property.")]
        public double MegaukGallonsPerSecond => As(VolumeFlowUnit.MegaukGallonPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MicroliterPerDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicrolitersPerDay property.")]
        public double MicrolitersPerDay => As(VolumeFlowUnit.MicroliterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MicroliterPerHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicrolitersPerHour property.")]
        public double MicrolitersPerHour => As(VolumeFlowUnit.MicroliterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MicroliterPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicrolitersPerMinute property.")]
        public double MicrolitersPerMinute => As(VolumeFlowUnit.MicroliterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MicroliterPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicrolitersPerSecond property.")]
        public double MicrolitersPerSecond => As(VolumeFlowUnit.MicroliterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MilliliterPerDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillilitersPerDay property.")]
        public double MillilitersPerDay => As(VolumeFlowUnit.MilliliterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MilliliterPerHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillilitersPerHour property.")]
        public double MillilitersPerHour => As(VolumeFlowUnit.MilliliterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MilliliterPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillilitersPerMinute property.")]
        public double MillilitersPerMinute => As(VolumeFlowUnit.MilliliterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MilliliterPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillilitersPerSecond property.")]
        public double MillilitersPerSecond => As(VolumeFlowUnit.MilliliterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MillionUsGallonsPerDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillionUsGallonsPerDay property.")]
        public double MillionUsGallonsPerDay => As(VolumeFlowUnit.MillionUsGallonsPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.NanoliterPerDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNanolitersPerDay property.")]
        public double NanolitersPerDay => As(VolumeFlowUnit.NanoliterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.NanoliterPerHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNanolitersPerHour property.")]
        public double NanolitersPerHour => As(VolumeFlowUnit.NanoliterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.NanoliterPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNanolitersPerMinute property.")]
        public double NanolitersPerMinute => As(VolumeFlowUnit.NanoliterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.NanoliterPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNanolitersPerSecond property.")]
        public double NanolitersPerSecond => As(VolumeFlowUnit.NanoliterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.OilBarrelPerDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToOilBarrelsPerDay property.")]
        public double OilBarrelsPerDay => As(VolumeFlowUnit.OilBarrelPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.OilBarrelPerHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToOilBarrelsPerHour property.")]
        public double OilBarrelsPerHour => As(VolumeFlowUnit.OilBarrelPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.OilBarrelPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToOilBarrelsPerMinute property.")]
        public double OilBarrelsPerMinute => As(VolumeFlowUnit.OilBarrelPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.OilBarrelPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToOilBarrelsPerSecond property.")]
        public double OilBarrelsPerSecond => As(VolumeFlowUnit.OilBarrelPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UkGallonPerDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUkGallonsPerDay property.")]
        public double UkGallonsPerDay => As(VolumeFlowUnit.UkGallonPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UkGallonPerHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUkGallonsPerHour property.")]
        public double UkGallonsPerHour => As(VolumeFlowUnit.UkGallonPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UkGallonPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUkGallonsPerMinute property.")]
        public double UkGallonsPerMinute => As(VolumeFlowUnit.UkGallonPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UkGallonPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUkGallonsPerSecond property.")]
        public double UkGallonsPerSecond => As(VolumeFlowUnit.UkGallonPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UsGallonPerDay"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUsGallonsPerDay property.")]
        public double UsGallonsPerDay => As(VolumeFlowUnit.UsGallonPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UsGallonPerHour"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUsGallonsPerHour property.")]
        public double UsGallonsPerHour => As(VolumeFlowUnit.UsGallonPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UsGallonPerMinute"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUsGallonsPerMinute property.")]
        public double UsGallonsPerMinute => As(VolumeFlowUnit.UsGallonPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UsGallonPerSecond"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUsGallonsPerSecond property.")]
        public double UsGallonsPerSecond => As(VolumeFlowUnit.UsGallonPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.AcreFootPerDay"/>.
        /// </summary>
        public VolumeFlow ToAcreFeetPerDay => ToUnit(VolumeFlowUnit.AcreFootPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.AcreFootPerHour"/>.
        /// </summary>
        public VolumeFlow ToAcreFeetPerHour => ToUnit(VolumeFlowUnit.AcreFootPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.AcreFootPerMinute"/>.
        /// </summary>
        public VolumeFlow ToAcreFeetPerMinute => ToUnit(VolumeFlowUnit.AcreFootPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.AcreFootPerSecond"/>.
        /// </summary>
        public VolumeFlow ToAcreFeetPerSecond => ToUnit(VolumeFlowUnit.AcreFootPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CentiliterPerDay"/>.
        /// </summary>
        public VolumeFlow ToCentilitersPerDay => ToUnit(VolumeFlowUnit.CentiliterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CentiliterPerHour"/>.
        /// </summary>
        public VolumeFlow ToCentilitersPerHour => ToUnit(VolumeFlowUnit.CentiliterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CentiliterPerMinute"/>.
        /// </summary>
        public VolumeFlow ToCentilitersPerMinute => ToUnit(VolumeFlowUnit.CentiliterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CentiliterPerSecond"/>.
        /// </summary>
        public VolumeFlow ToCentilitersPerSecond => ToUnit(VolumeFlowUnit.CentiliterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicCentimeterPerMinute"/>.
        /// </summary>
        public VolumeFlow ToCubicCentimetersPerMinute => ToUnit(VolumeFlowUnit.CubicCentimeterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicDecimeterPerMinute"/>.
        /// </summary>
        public VolumeFlow ToCubicDecimetersPerMinute => ToUnit(VolumeFlowUnit.CubicDecimeterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicFootPerHour"/>.
        /// </summary>
        public VolumeFlow ToCubicFeetPerHour => ToUnit(VolumeFlowUnit.CubicFootPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicFootPerMinute"/>.
        /// </summary>
        public VolumeFlow ToCubicFeetPerMinute => ToUnit(VolumeFlowUnit.CubicFootPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicFootPerSecond"/>.
        /// </summary>
        public VolumeFlow ToCubicFeetPerSecond => ToUnit(VolumeFlowUnit.CubicFootPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicMeterPerDay"/>.
        /// </summary>
        public VolumeFlow ToCubicMetersPerDay => ToUnit(VolumeFlowUnit.CubicMeterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicMeterPerHour"/>.
        /// </summary>
        public VolumeFlow ToCubicMetersPerHour => ToUnit(VolumeFlowUnit.CubicMeterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicMeterPerMinute"/>.
        /// </summary>
        public VolumeFlow ToCubicMetersPerMinute => ToUnit(VolumeFlowUnit.CubicMeterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicMeterPerSecond"/>.
        /// </summary>
        public VolumeFlow ToCubicMetersPerSecond => ToUnit(VolumeFlowUnit.CubicMeterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicMillimeterPerSecond"/>.
        /// </summary>
        public VolumeFlow ToCubicMillimetersPerSecond => ToUnit(VolumeFlowUnit.CubicMillimeterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicYardPerDay"/>.
        /// </summary>
        public VolumeFlow ToCubicYardsPerDay => ToUnit(VolumeFlowUnit.CubicYardPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicYardPerHour"/>.
        /// </summary>
        public VolumeFlow ToCubicYardsPerHour => ToUnit(VolumeFlowUnit.CubicYardPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicYardPerMinute"/>.
        /// </summary>
        public VolumeFlow ToCubicYardsPerMinute => ToUnit(VolumeFlowUnit.CubicYardPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.CubicYardPerSecond"/>.
        /// </summary>
        public VolumeFlow ToCubicYardsPerSecond => ToUnit(VolumeFlowUnit.CubicYardPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.DeciliterPerDay"/>.
        /// </summary>
        public VolumeFlow ToDecilitersPerDay => ToUnit(VolumeFlowUnit.DeciliterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.DeciliterPerHour"/>.
        /// </summary>
        public VolumeFlow ToDecilitersPerHour => ToUnit(VolumeFlowUnit.DeciliterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.DeciliterPerMinute"/>.
        /// </summary>
        public VolumeFlow ToDecilitersPerMinute => ToUnit(VolumeFlowUnit.DeciliterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.DeciliterPerSecond"/>.
        /// </summary>
        public VolumeFlow ToDecilitersPerSecond => ToUnit(VolumeFlowUnit.DeciliterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.KiloliterPerDay"/>.
        /// </summary>
        public VolumeFlow ToKilolitersPerDay => ToUnit(VolumeFlowUnit.KiloliterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.KiloliterPerHour"/>.
        /// </summary>
        public VolumeFlow ToKilolitersPerHour => ToUnit(VolumeFlowUnit.KiloliterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.KiloliterPerMinute"/>.
        /// </summary>
        public VolumeFlow ToKilolitersPerMinute => ToUnit(VolumeFlowUnit.KiloliterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.KiloliterPerSecond"/>.
        /// </summary>
        public VolumeFlow ToKilolitersPerSecond => ToUnit(VolumeFlowUnit.KiloliterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.KilousGallonPerMinute"/>.
        /// </summary>
        public VolumeFlow ToKilousGallonsPerMinute => ToUnit(VolumeFlowUnit.KilousGallonPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.LiterPerDay"/>.
        /// </summary>
        public VolumeFlow ToLitersPerDay => ToUnit(VolumeFlowUnit.LiterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.LiterPerHour"/>.
        /// </summary>
        public VolumeFlow ToLitersPerHour => ToUnit(VolumeFlowUnit.LiterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.LiterPerMinute"/>.
        /// </summary>
        public VolumeFlow ToLitersPerMinute => ToUnit(VolumeFlowUnit.LiterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.LiterPerSecond"/>.
        /// </summary>
        public VolumeFlow ToLitersPerSecond => ToUnit(VolumeFlowUnit.LiterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MegaliterPerDay"/>.
        /// </summary>
        public VolumeFlow ToMegalitersPerDay => ToUnit(VolumeFlowUnit.MegaliterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MegaukGallonPerSecond"/>.
        /// </summary>
        public VolumeFlow ToMegaukGallonsPerSecond => ToUnit(VolumeFlowUnit.MegaukGallonPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MicroliterPerDay"/>.
        /// </summary>
        public VolumeFlow ToMicrolitersPerDay => ToUnit(VolumeFlowUnit.MicroliterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MicroliterPerHour"/>.
        /// </summary>
        public VolumeFlow ToMicrolitersPerHour => ToUnit(VolumeFlowUnit.MicroliterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MicroliterPerMinute"/>.
        /// </summary>
        public VolumeFlow ToMicrolitersPerMinute => ToUnit(VolumeFlowUnit.MicroliterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MicroliterPerSecond"/>.
        /// </summary>
        public VolumeFlow ToMicrolitersPerSecond => ToUnit(VolumeFlowUnit.MicroliterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MilliliterPerDay"/>.
        /// </summary>
        public VolumeFlow ToMillilitersPerDay => ToUnit(VolumeFlowUnit.MilliliterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MilliliterPerHour"/>.
        /// </summary>
        public VolumeFlow ToMillilitersPerHour => ToUnit(VolumeFlowUnit.MilliliterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MilliliterPerMinute"/>.
        /// </summary>
        public VolumeFlow ToMillilitersPerMinute => ToUnit(VolumeFlowUnit.MilliliterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MilliliterPerSecond"/>.
        /// </summary>
        public VolumeFlow ToMillilitersPerSecond => ToUnit(VolumeFlowUnit.MilliliterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.MillionUsGallonsPerDay"/>.
        /// </summary>
        public VolumeFlow ToMillionUsGallonsPerDay => ToUnit(VolumeFlowUnit.MillionUsGallonsPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.NanoliterPerDay"/>.
        /// </summary>
        public VolumeFlow ToNanolitersPerDay => ToUnit(VolumeFlowUnit.NanoliterPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.NanoliterPerHour"/>.
        /// </summary>
        public VolumeFlow ToNanolitersPerHour => ToUnit(VolumeFlowUnit.NanoliterPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.NanoliterPerMinute"/>.
        /// </summary>
        public VolumeFlow ToNanolitersPerMinute => ToUnit(VolumeFlowUnit.NanoliterPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.NanoliterPerSecond"/>.
        /// </summary>
        public VolumeFlow ToNanolitersPerSecond => ToUnit(VolumeFlowUnit.NanoliterPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.OilBarrelPerDay"/>.
        /// </summary>
        public VolumeFlow ToOilBarrelsPerDay => ToUnit(VolumeFlowUnit.OilBarrelPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.OilBarrelPerHour"/>.
        /// </summary>
        public VolumeFlow ToOilBarrelsPerHour => ToUnit(VolumeFlowUnit.OilBarrelPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.OilBarrelPerMinute"/>.
        /// </summary>
        public VolumeFlow ToOilBarrelsPerMinute => ToUnit(VolumeFlowUnit.OilBarrelPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.OilBarrelPerSecond"/>.
        /// </summary>
        public VolumeFlow ToOilBarrelsPerSecond => ToUnit(VolumeFlowUnit.OilBarrelPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UkGallonPerDay"/>.
        /// </summary>
        public VolumeFlow ToUkGallonsPerDay => ToUnit(VolumeFlowUnit.UkGallonPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UkGallonPerHour"/>.
        /// </summary>
        public VolumeFlow ToUkGallonsPerHour => ToUnit(VolumeFlowUnit.UkGallonPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UkGallonPerMinute"/>.
        /// </summary>
        public VolumeFlow ToUkGallonsPerMinute => ToUnit(VolumeFlowUnit.UkGallonPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UkGallonPerSecond"/>.
        /// </summary>
        public VolumeFlow ToUkGallonsPerSecond => ToUnit(VolumeFlowUnit.UkGallonPerSecond);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UsGallonPerDay"/>.
        /// </summary>
        public VolumeFlow ToUsGallonsPerDay => ToUnit(VolumeFlowUnit.UsGallonPerDay);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UsGallonPerHour"/>.
        /// </summary>
        public VolumeFlow ToUsGallonsPerHour => ToUnit(VolumeFlowUnit.UsGallonPerHour);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UsGallonPerMinute"/>.
        /// </summary>
        public VolumeFlow ToUsGallonsPerMinute => ToUnit(VolumeFlowUnit.UsGallonPerMinute);

        /// <summary>
        ///     Gets this <see cref="VolumeFlow"/> converted into <see cref="VolumeFlowUnit.UsGallonPerSecond"/>.
        /// </summary>
        public VolumeFlow ToUsGallonsPerSecond => ToUnit(VolumeFlowUnit.UsGallonPerSecond);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.AcreFootPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromAcreFeetPerDay(double acrefeetperday) => new VolumeFlow(acrefeetperday, VolumeFlowUnit.AcreFootPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.AcreFootPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromAcreFeetPerHour(double acrefeetperhour) => new VolumeFlow(acrefeetperhour, VolumeFlowUnit.AcreFootPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.AcreFootPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromAcreFeetPerMinute(double acrefeetperminute) => new VolumeFlow(acrefeetperminute, VolumeFlowUnit.AcreFootPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.AcreFootPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromAcreFeetPerSecond(double acrefeetpersecond) => new VolumeFlow(acrefeetpersecond, VolumeFlowUnit.AcreFootPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CentiliterPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCentilitersPerDay(double centilitersperday) => new VolumeFlow(centilitersperday, VolumeFlowUnit.CentiliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CentiliterPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCentilitersPerHour(double centilitersperhour) => new VolumeFlow(centilitersperhour, VolumeFlowUnit.CentiliterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CentiliterPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCentilitersPerMinute(double centilitersperminute) => new VolumeFlow(centilitersperminute, VolumeFlowUnit.CentiliterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CentiliterPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCentilitersPerSecond(double centiliterspersecond) => new VolumeFlow(centiliterspersecond, VolumeFlowUnit.CentiliterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicCentimeterPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicCentimetersPerMinute(double cubiccentimetersperminute) => new VolumeFlow(cubiccentimetersperminute, VolumeFlowUnit.CubicCentimeterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicDecimeterPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicDecimetersPerMinute(double cubicdecimetersperminute) => new VolumeFlow(cubicdecimetersperminute, VolumeFlowUnit.CubicDecimeterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicFootPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicFeetPerHour(double cubicfeetperhour) => new VolumeFlow(cubicfeetperhour, VolumeFlowUnit.CubicFootPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicFootPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicFeetPerMinute(double cubicfeetperminute) => new VolumeFlow(cubicfeetperminute, VolumeFlowUnit.CubicFootPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicFootPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicFeetPerSecond(double cubicfeetpersecond) => new VolumeFlow(cubicfeetpersecond, VolumeFlowUnit.CubicFootPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicMeterPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicMetersPerDay(double cubicmetersperday) => new VolumeFlow(cubicmetersperday, VolumeFlowUnit.CubicMeterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicMeterPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicMetersPerHour(double cubicmetersperhour) => new VolumeFlow(cubicmetersperhour, VolumeFlowUnit.CubicMeterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicMeterPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicMetersPerMinute(double cubicmetersperminute) => new VolumeFlow(cubicmetersperminute, VolumeFlowUnit.CubicMeterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicMeterPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicMetersPerSecond(double cubicmeterspersecond) => new VolumeFlow(cubicmeterspersecond, VolumeFlowUnit.CubicMeterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicMillimeterPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicMillimetersPerSecond(double cubicmillimeterspersecond) => new VolumeFlow(cubicmillimeterspersecond, VolumeFlowUnit.CubicMillimeterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicYardPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicYardsPerDay(double cubicyardsperday) => new VolumeFlow(cubicyardsperday, VolumeFlowUnit.CubicYardPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicYardPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicYardsPerHour(double cubicyardsperhour) => new VolumeFlow(cubicyardsperhour, VolumeFlowUnit.CubicYardPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicYardPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicYardsPerMinute(double cubicyardsperminute) => new VolumeFlow(cubicyardsperminute, VolumeFlowUnit.CubicYardPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicYardPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromCubicYardsPerSecond(double cubicyardspersecond) => new VolumeFlow(cubicyardspersecond, VolumeFlowUnit.CubicYardPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.DeciliterPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromDecilitersPerDay(double decilitersperday) => new VolumeFlow(decilitersperday, VolumeFlowUnit.DeciliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.DeciliterPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromDecilitersPerHour(double decilitersperhour) => new VolumeFlow(decilitersperhour, VolumeFlowUnit.DeciliterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.DeciliterPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromDecilitersPerMinute(double decilitersperminute) => new VolumeFlow(decilitersperminute, VolumeFlowUnit.DeciliterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.DeciliterPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromDecilitersPerSecond(double deciliterspersecond) => new VolumeFlow(deciliterspersecond, VolumeFlowUnit.DeciliterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.KiloliterPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromKilolitersPerDay(double kilolitersperday) => new VolumeFlow(kilolitersperday, VolumeFlowUnit.KiloliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.KiloliterPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromKilolitersPerHour(double kilolitersperhour) => new VolumeFlow(kilolitersperhour, VolumeFlowUnit.KiloliterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.KiloliterPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromKilolitersPerMinute(double kilolitersperminute) => new VolumeFlow(kilolitersperminute, VolumeFlowUnit.KiloliterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.KiloliterPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromKilolitersPerSecond(double kiloliterspersecond) => new VolumeFlow(kiloliterspersecond, VolumeFlowUnit.KiloliterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.KilousGallonPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromKilousGallonsPerMinute(double kilousgallonsperminute) => new VolumeFlow(kilousgallonsperminute, VolumeFlowUnit.KilousGallonPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.LiterPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromLitersPerDay(double litersperday) => new VolumeFlow(litersperday, VolumeFlowUnit.LiterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.LiterPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromLitersPerHour(double litersperhour) => new VolumeFlow(litersperhour, VolumeFlowUnit.LiterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.LiterPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromLitersPerMinute(double litersperminute) => new VolumeFlow(litersperminute, VolumeFlowUnit.LiterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.LiterPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromLitersPerSecond(double literspersecond) => new VolumeFlow(literspersecond, VolumeFlowUnit.LiterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MegaliterPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMegalitersPerDay(double megalitersperday) => new VolumeFlow(megalitersperday, VolumeFlowUnit.MegaliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MegaukGallonPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMegaukGallonsPerSecond(double megaukgallonspersecond) => new VolumeFlow(megaukgallonspersecond, VolumeFlowUnit.MegaukGallonPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MicroliterPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMicrolitersPerDay(double microlitersperday) => new VolumeFlow(microlitersperday, VolumeFlowUnit.MicroliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MicroliterPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMicrolitersPerHour(double microlitersperhour) => new VolumeFlow(microlitersperhour, VolumeFlowUnit.MicroliterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MicroliterPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMicrolitersPerMinute(double microlitersperminute) => new VolumeFlow(microlitersperminute, VolumeFlowUnit.MicroliterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MicroliterPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMicrolitersPerSecond(double microliterspersecond) => new VolumeFlow(microliterspersecond, VolumeFlowUnit.MicroliterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MilliliterPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMillilitersPerDay(double millilitersperday) => new VolumeFlow(millilitersperday, VolumeFlowUnit.MilliliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MilliliterPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMillilitersPerHour(double millilitersperhour) => new VolumeFlow(millilitersperhour, VolumeFlowUnit.MilliliterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MilliliterPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMillilitersPerMinute(double millilitersperminute) => new VolumeFlow(millilitersperminute, VolumeFlowUnit.MilliliterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MilliliterPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMillilitersPerSecond(double milliliterspersecond) => new VolumeFlow(milliliterspersecond, VolumeFlowUnit.MilliliterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MillionUsGallonsPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromMillionUsGallonsPerDay(double millionusgallonsperday) => new VolumeFlow(millionusgallonsperday, VolumeFlowUnit.MillionUsGallonsPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.NanoliterPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromNanolitersPerDay(double nanolitersperday) => new VolumeFlow(nanolitersperday, VolumeFlowUnit.NanoliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.NanoliterPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromNanolitersPerHour(double nanolitersperhour) => new VolumeFlow(nanolitersperhour, VolumeFlowUnit.NanoliterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.NanoliterPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromNanolitersPerMinute(double nanolitersperminute) => new VolumeFlow(nanolitersperminute, VolumeFlowUnit.NanoliterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.NanoliterPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromNanolitersPerSecond(double nanoliterspersecond) => new VolumeFlow(nanoliterspersecond, VolumeFlowUnit.NanoliterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.OilBarrelPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromOilBarrelsPerDay(double oilbarrelsperday) => new VolumeFlow(oilbarrelsperday, VolumeFlowUnit.OilBarrelPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.OilBarrelPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromOilBarrelsPerHour(double oilbarrelsperhour) => new VolumeFlow(oilbarrelsperhour, VolumeFlowUnit.OilBarrelPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.OilBarrelPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromOilBarrelsPerMinute(double oilbarrelsperminute) => new VolumeFlow(oilbarrelsperminute, VolumeFlowUnit.OilBarrelPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.OilBarrelPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromOilBarrelsPerSecond(double oilbarrelspersecond) => new VolumeFlow(oilbarrelspersecond, VolumeFlowUnit.OilBarrelPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UkGallonPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUkGallonsPerDay(double ukgallonsperday) => new VolumeFlow(ukgallonsperday, VolumeFlowUnit.UkGallonPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UkGallonPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUkGallonsPerHour(double ukgallonsperhour) => new VolumeFlow(ukgallonsperhour, VolumeFlowUnit.UkGallonPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UkGallonPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUkGallonsPerMinute(double ukgallonsperminute) => new VolumeFlow(ukgallonsperminute, VolumeFlowUnit.UkGallonPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UkGallonPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUkGallonsPerSecond(double ukgallonspersecond) => new VolumeFlow(ukgallonspersecond, VolumeFlowUnit.UkGallonPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UsGallonPerDay"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUsGallonsPerDay(double usgallonsperday) => new VolumeFlow(usgallonsperday, VolumeFlowUnit.UsGallonPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UsGallonPerHour"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUsGallonsPerHour(double usgallonsperhour) => new VolumeFlow(usgallonsperhour, VolumeFlowUnit.UsGallonPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UsGallonPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUsGallonsPerMinute(double usgallonsperminute) => new VolumeFlow(usgallonsperminute, VolumeFlowUnit.UsGallonPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UsGallonPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static VolumeFlow FromUsGallonsPerSecond(double usgallonspersecond) => new VolumeFlow(usgallonspersecond, VolumeFlowUnit.UsGallonPerSecond);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeFlowUnit" /> to <see cref="VolumeFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>VolumeFlow unit value.</returns>
        public static VolumeFlow From(double value, VolumeFlowUnit fromUnit)
        {
            return new VolumeFlow(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(VolumeFlowUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public VolumeFlow ToUnit(VolumeFlowUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new VolumeFlow(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                VolumeFlowUnit.AcreFootPerDay => _value / 70.0457,
                VolumeFlowUnit.AcreFootPerHour => _value / 2.91857,
                VolumeFlowUnit.AcreFootPerMinute => _value / 0.0486427916,
                VolumeFlowUnit.AcreFootPerSecond => _value / 0.000810713194,
                VolumeFlowUnit.CentiliterPerDay => (_value / 86400000) * 1e-2d,
                VolumeFlowUnit.CentiliterPerHour => (_value / 3600000.000) * 1e-2d,
                VolumeFlowUnit.CentiliterPerMinute => (_value / 60000.00000) * 1e-2d,
                VolumeFlowUnit.CentiliterPerSecond => (_value / 1000) * 1e-2d,
                VolumeFlowUnit.CubicCentimeterPerMinute => _value * 1.6666666666667e-8,
                VolumeFlowUnit.CubicDecimeterPerMinute => _value / 60000.00000,
                VolumeFlowUnit.CubicFootPerHour => _value * 7.8657907199999087346816086183876e-6,
                VolumeFlowUnit.CubicFootPerMinute => _value / 2118.88000326,
                VolumeFlowUnit.CubicFootPerSecond => _value / 35.314666721,
                VolumeFlowUnit.CubicMeterPerDay => _value / 86400,
                VolumeFlowUnit.CubicMeterPerHour => _value / 3600,
                VolumeFlowUnit.CubicMeterPerMinute => _value / 60,
                VolumeFlowUnit.CubicMeterPerSecond => _value,
                VolumeFlowUnit.CubicMillimeterPerSecond => _value * 1e-9,
                VolumeFlowUnit.CubicYardPerDay => _value / 113007,
                VolumeFlowUnit.CubicYardPerHour => _value * 2.1237634944E-4,
                VolumeFlowUnit.CubicYardPerMinute => _value * 0.0127425809664,
                VolumeFlowUnit.CubicYardPerSecond => _value * 0.764554857984,
                VolumeFlowUnit.DeciliterPerDay => (_value / 86400000) * 1e-1d,
                VolumeFlowUnit.DeciliterPerHour => (_value / 3600000.000) * 1e-1d,
                VolumeFlowUnit.DeciliterPerMinute => (_value / 60000.00000) * 1e-1d,
                VolumeFlowUnit.DeciliterPerSecond => (_value / 1000) * 1e-1d,
                VolumeFlowUnit.KiloliterPerDay => (_value / 86400000) * 1e3d,
                VolumeFlowUnit.KiloliterPerHour => (_value / 3600000.000) * 1e3d,
                VolumeFlowUnit.KiloliterPerMinute => (_value / 60000.00000) * 1e3d,
                VolumeFlowUnit.KiloliterPerSecond => (_value / 1000) * 1e3d,
                VolumeFlowUnit.KilousGallonPerMinute => _value / 15.850323141489,
                VolumeFlowUnit.LiterPerDay => _value / 86400000,
                VolumeFlowUnit.LiterPerHour => _value / 3600000.000,
                VolumeFlowUnit.LiterPerMinute => _value / 60000.00000,
                VolumeFlowUnit.LiterPerSecond => _value / 1000,
                VolumeFlowUnit.MegaliterPerDay => (_value / 86400000) * 1e6d,
                VolumeFlowUnit.MegaukGallonPerSecond => (_value / 219.969) * 1e6d,
                VolumeFlowUnit.MicroliterPerDay => (_value / 86400000) * 1e-6d,
                VolumeFlowUnit.MicroliterPerHour => (_value / 3600000.000) * 1e-6d,
                VolumeFlowUnit.MicroliterPerMinute => (_value / 60000.00000) * 1e-6d,
                VolumeFlowUnit.MicroliterPerSecond => (_value / 1000) * 1e-6d,
                VolumeFlowUnit.MilliliterPerDay => (_value / 86400000) * 1e-3d,
                VolumeFlowUnit.MilliliterPerHour => (_value / 3600000.000) * 1e-3d,
                VolumeFlowUnit.MilliliterPerMinute => (_value / 60000.00000) * 1e-3d,
                VolumeFlowUnit.MilliliterPerSecond => (_value / 1000) * 1e-3d,
                VolumeFlowUnit.MillionUsGallonsPerDay => _value / 22.824465227,
                VolumeFlowUnit.NanoliterPerDay => (_value / 86400000) * 1e-9d,
                VolumeFlowUnit.NanoliterPerHour => (_value / 3600000.000) * 1e-9d,
                VolumeFlowUnit.NanoliterPerMinute => (_value / 60000.00000) * 1e-9d,
                VolumeFlowUnit.NanoliterPerSecond => (_value / 1000) * 1e-9d,
                VolumeFlowUnit.OilBarrelPerDay => _value * 1.8401307283333333333333333333333e-6,
                VolumeFlowUnit.OilBarrelPerHour => _value * 4.41631375e-5,
                VolumeFlowUnit.OilBarrelPerMinute => _value * 2.64978825e-3,
                VolumeFlowUnit.OilBarrelPerSecond => _value / 6.28981,
                VolumeFlowUnit.UkGallonPerDay => _value / 19005304,
                VolumeFlowUnit.UkGallonPerHour => _value / 791887.667,
                VolumeFlowUnit.UkGallonPerMinute => _value / 13198.2,
                VolumeFlowUnit.UkGallonPerSecond => _value / 219.969,
                VolumeFlowUnit.UsGallonPerDay => _value / 22824465.227,
                VolumeFlowUnit.UsGallonPerHour => _value / 951019.38848933424,
                VolumeFlowUnit.UsGallonPerMinute => _value / 15850.323141489,
                VolumeFlowUnit.UsGallonPerSecond => _value / 264.1720523581484,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(VolumeFlowUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                VolumeFlowUnit.AcreFootPerDay => baseUnitValue * 70.0457,
                VolumeFlowUnit.AcreFootPerHour => baseUnitValue * 2.91857,
                VolumeFlowUnit.AcreFootPerMinute => baseUnitValue * 0.0486427916,
                VolumeFlowUnit.AcreFootPerSecond => baseUnitValue * 0.000810713194,
                VolumeFlowUnit.CentiliterPerDay => (baseUnitValue * 86400000) / 1e-2d,
                VolumeFlowUnit.CentiliterPerHour => (baseUnitValue * 3600000.000) / 1e-2d,
                VolumeFlowUnit.CentiliterPerMinute => (baseUnitValue * 60000.00000) / 1e-2d,
                VolumeFlowUnit.CentiliterPerSecond => (baseUnitValue * 1000) / 1e-2d,
                VolumeFlowUnit.CubicCentimeterPerMinute => baseUnitValue / 1.6666666666667e-8,
                VolumeFlowUnit.CubicDecimeterPerMinute => baseUnitValue * 60000.00000,
                VolumeFlowUnit.CubicFootPerHour => baseUnitValue / 7.8657907199999087346816086183876e-6,
                VolumeFlowUnit.CubicFootPerMinute => baseUnitValue * 2118.88000326,
                VolumeFlowUnit.CubicFootPerSecond => baseUnitValue * 35.314666721,
                VolumeFlowUnit.CubicMeterPerDay => baseUnitValue * 86400,
                VolumeFlowUnit.CubicMeterPerHour => baseUnitValue * 3600,
                VolumeFlowUnit.CubicMeterPerMinute => baseUnitValue * 60,
                VolumeFlowUnit.CubicMeterPerSecond => baseUnitValue,
                VolumeFlowUnit.CubicMillimeterPerSecond => baseUnitValue / 1e-9,
                VolumeFlowUnit.CubicYardPerDay => baseUnitValue * 113007,
                VolumeFlowUnit.CubicYardPerHour => baseUnitValue / 2.1237634944E-4,
                VolumeFlowUnit.CubicYardPerMinute => baseUnitValue / 0.0127425809664,
                VolumeFlowUnit.CubicYardPerSecond => baseUnitValue / 0.764554857984,
                VolumeFlowUnit.DeciliterPerDay => (baseUnitValue * 86400000) / 1e-1d,
                VolumeFlowUnit.DeciliterPerHour => (baseUnitValue * 3600000.000) / 1e-1d,
                VolumeFlowUnit.DeciliterPerMinute => (baseUnitValue * 60000.00000) / 1e-1d,
                VolumeFlowUnit.DeciliterPerSecond => (baseUnitValue * 1000) / 1e-1d,
                VolumeFlowUnit.KiloliterPerDay => (baseUnitValue * 86400000) / 1e3d,
                VolumeFlowUnit.KiloliterPerHour => (baseUnitValue * 3600000.000) / 1e3d,
                VolumeFlowUnit.KiloliterPerMinute => (baseUnitValue * 60000.00000) / 1e3d,
                VolumeFlowUnit.KiloliterPerSecond => (baseUnitValue * 1000) / 1e3d,
                VolumeFlowUnit.KilousGallonPerMinute => baseUnitValue * 15.850323141489,
                VolumeFlowUnit.LiterPerDay => baseUnitValue * 86400000,
                VolumeFlowUnit.LiterPerHour => baseUnitValue * 3600000.000,
                VolumeFlowUnit.LiterPerMinute => baseUnitValue * 60000.00000,
                VolumeFlowUnit.LiterPerSecond => baseUnitValue * 1000,
                VolumeFlowUnit.MegaliterPerDay => (baseUnitValue * 86400000) / 1e6d,
                VolumeFlowUnit.MegaukGallonPerSecond => (baseUnitValue * 219.969) / 1e6d,
                VolumeFlowUnit.MicroliterPerDay => (baseUnitValue * 86400000) / 1e-6d,
                VolumeFlowUnit.MicroliterPerHour => (baseUnitValue * 3600000.000) / 1e-6d,
                VolumeFlowUnit.MicroliterPerMinute => (baseUnitValue * 60000.00000) / 1e-6d,
                VolumeFlowUnit.MicroliterPerSecond => (baseUnitValue * 1000) / 1e-6d,
                VolumeFlowUnit.MilliliterPerDay => (baseUnitValue * 86400000) / 1e-3d,
                VolumeFlowUnit.MilliliterPerHour => (baseUnitValue * 3600000.000) / 1e-3d,
                VolumeFlowUnit.MilliliterPerMinute => (baseUnitValue * 60000.00000) / 1e-3d,
                VolumeFlowUnit.MilliliterPerSecond => (baseUnitValue * 1000) / 1e-3d,
                VolumeFlowUnit.MillionUsGallonsPerDay => baseUnitValue * 22.824465227,
                VolumeFlowUnit.NanoliterPerDay => (baseUnitValue * 86400000) / 1e-9d,
                VolumeFlowUnit.NanoliterPerHour => (baseUnitValue * 3600000.000) / 1e-9d,
                VolumeFlowUnit.NanoliterPerMinute => (baseUnitValue * 60000.00000) / 1e-9d,
                VolumeFlowUnit.NanoliterPerSecond => (baseUnitValue * 1000) / 1e-9d,
                VolumeFlowUnit.OilBarrelPerDay => baseUnitValue / 1.8401307283333333333333333333333e-6,
                VolumeFlowUnit.OilBarrelPerHour => baseUnitValue / 4.41631375e-5,
                VolumeFlowUnit.OilBarrelPerMinute => baseUnitValue / 2.64978825e-3,
                VolumeFlowUnit.OilBarrelPerSecond => baseUnitValue * 6.28981,
                VolumeFlowUnit.UkGallonPerDay => baseUnitValue * 19005304,
                VolumeFlowUnit.UkGallonPerHour => baseUnitValue * 791887.667,
                VolumeFlowUnit.UkGallonPerMinute => baseUnitValue * 13198.2,
                VolumeFlowUnit.UkGallonPerSecond => baseUnitValue * 219.969,
                VolumeFlowUnit.UsGallonPerDay => baseUnitValue * 22824465.227,
                VolumeFlowUnit.UsGallonPerHour => baseUnitValue * 951019.38848933424,
                VolumeFlowUnit.UsGallonPerMinute => baseUnitValue * 15850.323141489,
                VolumeFlowUnit.UsGallonPerSecond => baseUnitValue * 264.1720523581484,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion
    }
}

