//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     https://en.wikipedia.org/wiki/Stiffness#Rotational_stiffness
    /// </summary>
    public struct  RotationalStiffness
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly RotationalStiffnessUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public RotationalStiffnessUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public RotationalStiffness(double value, RotationalStiffnessUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static RotationalStiffnessUnit BaseUnit { get; } = RotationalStiffnessUnit.NewtonMeterPerRadian;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static RotationalStiffness MaxValue { get; } = new RotationalStiffness(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static RotationalStiffness MinValue { get; } = new RotationalStiffness(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static RotationalStiffness Zero { get; } = new RotationalStiffness(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.CentinewtonMeterPerDegree">CentinewtonMetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCentinewtonMetersPerDegree property.")]
        public double CentinewtonMetersPerDegree => As(RotationalStiffnessUnit.CentinewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.CentinewtonMillimeterPerDegree">CentinewtonMillimetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCentinewtonMillimetersPerDegree property.")]
        public double CentinewtonMillimetersPerDegree => As(RotationalStiffnessUnit.CentinewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.CentinewtonMillimeterPerRadian">CentinewtonMillimetersPerRadian</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCentinewtonMillimetersPerRadian property.")]
        public double CentinewtonMillimetersPerRadian => As(RotationalStiffnessUnit.CentinewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.DecanewtonMeterPerDegree">DecanewtonMetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecanewtonMetersPerDegree property.")]
        public double DecanewtonMetersPerDegree => As(RotationalStiffnessUnit.DecanewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.DecanewtonMillimeterPerDegree">DecanewtonMillimetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecanewtonMillimetersPerDegree property.")]
        public double DecanewtonMillimetersPerDegree => As(RotationalStiffnessUnit.DecanewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.DecanewtonMillimeterPerRadian">DecanewtonMillimetersPerRadian</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecanewtonMillimetersPerRadian property.")]
        public double DecanewtonMillimetersPerRadian => As(RotationalStiffnessUnit.DecanewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.DecinewtonMeterPerDegree">DecinewtonMetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecinewtonMetersPerDegree property.")]
        public double DecinewtonMetersPerDegree => As(RotationalStiffnessUnit.DecinewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.DecinewtonMillimeterPerDegree">DecinewtonMillimetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecinewtonMillimetersPerDegree property.")]
        public double DecinewtonMillimetersPerDegree => As(RotationalStiffnessUnit.DecinewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.DecinewtonMillimeterPerRadian">DecinewtonMillimetersPerRadian</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecinewtonMillimetersPerRadian property.")]
        public double DecinewtonMillimetersPerRadian => As(RotationalStiffnessUnit.DecinewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.KilonewtonMeterPerDegree">KilonewtonMetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilonewtonMetersPerDegree property.")]
        public double KilonewtonMetersPerDegree => As(RotationalStiffnessUnit.KilonewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.KilonewtonMeterPerRadian">KilonewtonMetersPerRadian</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilonewtonMetersPerRadian property.")]
        public double KilonewtonMetersPerRadian => As(RotationalStiffnessUnit.KilonewtonMeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.KilonewtonMillimeterPerDegree">KilonewtonMillimetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilonewtonMillimetersPerDegree property.")]
        public double KilonewtonMillimetersPerDegree => As(RotationalStiffnessUnit.KilonewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.KilonewtonMillimeterPerRadian">KilonewtonMillimetersPerRadian</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilonewtonMillimetersPerRadian property.")]
        public double KilonewtonMillimetersPerRadian => As(RotationalStiffnessUnit.KilonewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.KilopoundForceFootPerDegrees">KilopoundForceFeetPerDegrees</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilopoundForceFeetPerDegrees property.")]
        public double KilopoundForceFeetPerDegrees => As(RotationalStiffnessUnit.KilopoundForceFootPerDegrees);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MeganewtonMeterPerDegree">MeganewtonMetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMeganewtonMetersPerDegree property.")]
        public double MeganewtonMetersPerDegree => As(RotationalStiffnessUnit.MeganewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MeganewtonMeterPerRadian">MeganewtonMetersPerRadian</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMeganewtonMetersPerRadian property.")]
        public double MeganewtonMetersPerRadian => As(RotationalStiffnessUnit.MeganewtonMeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MeganewtonMillimeterPerDegree">MeganewtonMillimetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMeganewtonMillimetersPerDegree property.")]
        public double MeganewtonMillimetersPerDegree => As(RotationalStiffnessUnit.MeganewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MeganewtonMillimeterPerRadian">MeganewtonMillimetersPerRadian</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMeganewtonMillimetersPerRadian property.")]
        public double MeganewtonMillimetersPerRadian => As(RotationalStiffnessUnit.MeganewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MicronewtonMeterPerDegree">MicronewtonMetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicronewtonMetersPerDegree property.")]
        public double MicronewtonMetersPerDegree => As(RotationalStiffnessUnit.MicronewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MicronewtonMillimeterPerDegree">MicronewtonMillimetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicronewtonMillimetersPerDegree property.")]
        public double MicronewtonMillimetersPerDegree => As(RotationalStiffnessUnit.MicronewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MicronewtonMillimeterPerRadian">MicronewtonMillimetersPerRadian</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicronewtonMillimetersPerRadian property.")]
        public double MicronewtonMillimetersPerRadian => As(RotationalStiffnessUnit.MicronewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MillinewtonMeterPerDegree">MillinewtonMetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillinewtonMetersPerDegree property.")]
        public double MillinewtonMetersPerDegree => As(RotationalStiffnessUnit.MillinewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MillinewtonMillimeterPerDegree">MillinewtonMillimetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillinewtonMillimetersPerDegree property.")]
        public double MillinewtonMillimetersPerDegree => As(RotationalStiffnessUnit.MillinewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MillinewtonMillimeterPerRadian">MillinewtonMillimetersPerRadian</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillinewtonMillimetersPerRadian property.")]
        public double MillinewtonMillimetersPerRadian => As(RotationalStiffnessUnit.MillinewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.NanonewtonMeterPerDegree">NanonewtonMetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNanonewtonMetersPerDegree property.")]
        public double NanonewtonMetersPerDegree => As(RotationalStiffnessUnit.NanonewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.NanonewtonMillimeterPerDegree">NanonewtonMillimetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNanonewtonMillimetersPerDegree property.")]
        public double NanonewtonMillimetersPerDegree => As(RotationalStiffnessUnit.NanonewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.NanonewtonMillimeterPerRadian">NanonewtonMillimetersPerRadian</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNanonewtonMillimetersPerRadian property.")]
        public double NanonewtonMillimetersPerRadian => As(RotationalStiffnessUnit.NanonewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.NewtonMeterPerDegree">NewtonMetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNewtonMetersPerDegree property.")]
        public double NewtonMetersPerDegree => As(RotationalStiffnessUnit.NewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.NewtonMeterPerRadian">NewtonMetersPerRadian</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNewtonMetersPerRadian property.")]
        public double NewtonMetersPerRadian => As(RotationalStiffnessUnit.NewtonMeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.NewtonMillimeterPerDegree">NewtonMillimetersPerDegree</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNewtonMillimetersPerDegree property.")]
        public double NewtonMillimetersPerDegree => As(RotationalStiffnessUnit.NewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.NewtonMillimeterPerRadian">NewtonMillimetersPerRadian</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNewtonMillimetersPerRadian property.")]
        public double NewtonMillimetersPerRadian => As(RotationalStiffnessUnit.NewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.PoundForceFeetPerRadian">PoundForceFeetPerRadian</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPoundForceFeetPerRadian property.")]
        public double PoundForceFeetPerRadian => As(RotationalStiffnessUnit.PoundForceFeetPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.PoundForceFootPerDegrees">PoundForceFeetPerDegrees</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPoundForceFeetPerDegrees property.")]
        public double PoundForceFeetPerDegrees => As(RotationalStiffnessUnit.PoundForceFootPerDegrees);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.CentinewtonMeterPerDegree">CentinewtonMetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToCentinewtonMetersPerDegree => ToUnit(RotationalStiffnessUnit.CentinewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.CentinewtonMillimeterPerDegree">CentinewtonMillimetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToCentinewtonMillimetersPerDegree => ToUnit(RotationalStiffnessUnit.CentinewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.CentinewtonMillimeterPerRadian">CentinewtonMillimetersPerRadian</see>.
        /// </summary>
        public RotationalStiffness ToCentinewtonMillimetersPerRadian => ToUnit(RotationalStiffnessUnit.CentinewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.DecanewtonMeterPerDegree">DecanewtonMetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToDecanewtonMetersPerDegree => ToUnit(RotationalStiffnessUnit.DecanewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.DecanewtonMillimeterPerDegree">DecanewtonMillimetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToDecanewtonMillimetersPerDegree => ToUnit(RotationalStiffnessUnit.DecanewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.DecanewtonMillimeterPerRadian">DecanewtonMillimetersPerRadian</see>.
        /// </summary>
        public RotationalStiffness ToDecanewtonMillimetersPerRadian => ToUnit(RotationalStiffnessUnit.DecanewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.DecinewtonMeterPerDegree">DecinewtonMetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToDecinewtonMetersPerDegree => ToUnit(RotationalStiffnessUnit.DecinewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.DecinewtonMillimeterPerDegree">DecinewtonMillimetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToDecinewtonMillimetersPerDegree => ToUnit(RotationalStiffnessUnit.DecinewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.DecinewtonMillimeterPerRadian">DecinewtonMillimetersPerRadian</see>.
        /// </summary>
        public RotationalStiffness ToDecinewtonMillimetersPerRadian => ToUnit(RotationalStiffnessUnit.DecinewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.KilonewtonMeterPerDegree">KilonewtonMetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToKilonewtonMetersPerDegree => ToUnit(RotationalStiffnessUnit.KilonewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.KilonewtonMeterPerRadian">KilonewtonMetersPerRadian</see>.
        /// </summary>
        public RotationalStiffness ToKilonewtonMetersPerRadian => ToUnit(RotationalStiffnessUnit.KilonewtonMeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.KilonewtonMillimeterPerDegree">KilonewtonMillimetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToKilonewtonMillimetersPerDegree => ToUnit(RotationalStiffnessUnit.KilonewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.KilonewtonMillimeterPerRadian">KilonewtonMillimetersPerRadian</see>.
        /// </summary>
        public RotationalStiffness ToKilonewtonMillimetersPerRadian => ToUnit(RotationalStiffnessUnit.KilonewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.KilopoundForceFootPerDegrees">KilopoundForceFeetPerDegrees</see>.
        /// </summary>
        public RotationalStiffness ToKilopoundForceFeetPerDegrees => ToUnit(RotationalStiffnessUnit.KilopoundForceFootPerDegrees);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MeganewtonMeterPerDegree">MeganewtonMetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToMeganewtonMetersPerDegree => ToUnit(RotationalStiffnessUnit.MeganewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MeganewtonMeterPerRadian">MeganewtonMetersPerRadian</see>.
        /// </summary>
        public RotationalStiffness ToMeganewtonMetersPerRadian => ToUnit(RotationalStiffnessUnit.MeganewtonMeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MeganewtonMillimeterPerDegree">MeganewtonMillimetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToMeganewtonMillimetersPerDegree => ToUnit(RotationalStiffnessUnit.MeganewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MeganewtonMillimeterPerRadian">MeganewtonMillimetersPerRadian</see>.
        /// </summary>
        public RotationalStiffness ToMeganewtonMillimetersPerRadian => ToUnit(RotationalStiffnessUnit.MeganewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MicronewtonMeterPerDegree">MicronewtonMetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToMicronewtonMetersPerDegree => ToUnit(RotationalStiffnessUnit.MicronewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MicronewtonMillimeterPerDegree">MicronewtonMillimetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToMicronewtonMillimetersPerDegree => ToUnit(RotationalStiffnessUnit.MicronewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MicronewtonMillimeterPerRadian">MicronewtonMillimetersPerRadian</see>.
        /// </summary>
        public RotationalStiffness ToMicronewtonMillimetersPerRadian => ToUnit(RotationalStiffnessUnit.MicronewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MillinewtonMeterPerDegree">MillinewtonMetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToMillinewtonMetersPerDegree => ToUnit(RotationalStiffnessUnit.MillinewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MillinewtonMillimeterPerDegree">MillinewtonMillimetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToMillinewtonMillimetersPerDegree => ToUnit(RotationalStiffnessUnit.MillinewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.MillinewtonMillimeterPerRadian">MillinewtonMillimetersPerRadian</see>.
        /// </summary>
        public RotationalStiffness ToMillinewtonMillimetersPerRadian => ToUnit(RotationalStiffnessUnit.MillinewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.NanonewtonMeterPerDegree">NanonewtonMetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToNanonewtonMetersPerDegree => ToUnit(RotationalStiffnessUnit.NanonewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.NanonewtonMillimeterPerDegree">NanonewtonMillimetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToNanonewtonMillimetersPerDegree => ToUnit(RotationalStiffnessUnit.NanonewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.NanonewtonMillimeterPerRadian">NanonewtonMillimetersPerRadian</see>.
        /// </summary>
        public RotationalStiffness ToNanonewtonMillimetersPerRadian => ToUnit(RotationalStiffnessUnit.NanonewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.NewtonMeterPerDegree">NewtonMetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToNewtonMetersPerDegree => ToUnit(RotationalStiffnessUnit.NewtonMeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.NewtonMeterPerRadian">NewtonMetersPerRadian</see>.
        /// </summary>
        public RotationalStiffness ToNewtonMetersPerRadian => ToUnit(RotationalStiffnessUnit.NewtonMeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.NewtonMillimeterPerDegree">NewtonMillimetersPerDegree</see>.
        /// </summary>
        public RotationalStiffness ToNewtonMillimetersPerDegree => ToUnit(RotationalStiffnessUnit.NewtonMillimeterPerDegree);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.NewtonMillimeterPerRadian">NewtonMillimetersPerRadian</see>.
        /// </summary>
        public RotationalStiffness ToNewtonMillimetersPerRadian => ToUnit(RotationalStiffnessUnit.NewtonMillimeterPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.PoundForceFeetPerRadian">PoundForceFeetPerRadian</see>.
        /// </summary>
        public RotationalStiffness ToPoundForceFeetPerRadian => ToUnit(RotationalStiffnessUnit.PoundForceFeetPerRadian);

        /// <summary>
        ///     Gets this <see cref="RotationalStiffness"/> converted into <see cref="RotationalStiffnessUnit.PoundForceFootPerDegrees">PoundForceFeetPerDegrees</see>.
        /// </summary>
        public RotationalStiffness ToPoundForceFeetPerDegrees => ToUnit(RotationalStiffnessUnit.PoundForceFootPerDegrees);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.CentinewtonMeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromCentinewtonMetersPerDegree(double centinewtonmetersperdegree) => new RotationalStiffness(centinewtonmetersperdegree, RotationalStiffnessUnit.CentinewtonMeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.CentinewtonMillimeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromCentinewtonMillimetersPerDegree(double centinewtonmillimetersperdegree) => new RotationalStiffness(centinewtonmillimetersperdegree, RotationalStiffnessUnit.CentinewtonMillimeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.CentinewtonMillimeterPerRadian"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromCentinewtonMillimetersPerRadian(double centinewtonmillimetersperradian) => new RotationalStiffness(centinewtonmillimetersperradian, RotationalStiffnessUnit.CentinewtonMillimeterPerRadian);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.DecanewtonMeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromDecanewtonMetersPerDegree(double decanewtonmetersperdegree) => new RotationalStiffness(decanewtonmetersperdegree, RotationalStiffnessUnit.DecanewtonMeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.DecanewtonMillimeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromDecanewtonMillimetersPerDegree(double decanewtonmillimetersperdegree) => new RotationalStiffness(decanewtonmillimetersperdegree, RotationalStiffnessUnit.DecanewtonMillimeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.DecanewtonMillimeterPerRadian"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromDecanewtonMillimetersPerRadian(double decanewtonmillimetersperradian) => new RotationalStiffness(decanewtonmillimetersperradian, RotationalStiffnessUnit.DecanewtonMillimeterPerRadian);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.DecinewtonMeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromDecinewtonMetersPerDegree(double decinewtonmetersperdegree) => new RotationalStiffness(decinewtonmetersperdegree, RotationalStiffnessUnit.DecinewtonMeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.DecinewtonMillimeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromDecinewtonMillimetersPerDegree(double decinewtonmillimetersperdegree) => new RotationalStiffness(decinewtonmillimetersperdegree, RotationalStiffnessUnit.DecinewtonMillimeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.DecinewtonMillimeterPerRadian"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromDecinewtonMillimetersPerRadian(double decinewtonmillimetersperradian) => new RotationalStiffness(decinewtonmillimetersperradian, RotationalStiffnessUnit.DecinewtonMillimeterPerRadian);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.KilonewtonMeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromKilonewtonMetersPerDegree(double kilonewtonmetersperdegree) => new RotationalStiffness(kilonewtonmetersperdegree, RotationalStiffnessUnit.KilonewtonMeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.KilonewtonMeterPerRadian"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromKilonewtonMetersPerRadian(double kilonewtonmetersperradian) => new RotationalStiffness(kilonewtonmetersperradian, RotationalStiffnessUnit.KilonewtonMeterPerRadian);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.KilonewtonMillimeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromKilonewtonMillimetersPerDegree(double kilonewtonmillimetersperdegree) => new RotationalStiffness(kilonewtonmillimetersperdegree, RotationalStiffnessUnit.KilonewtonMillimeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.KilonewtonMillimeterPerRadian"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromKilonewtonMillimetersPerRadian(double kilonewtonmillimetersperradian) => new RotationalStiffness(kilonewtonmillimetersperradian, RotationalStiffnessUnit.KilonewtonMillimeterPerRadian);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.KilopoundForceFootPerDegrees"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromKilopoundForceFeetPerDegrees(double kilopoundforcefeetperdegrees) => new RotationalStiffness(kilopoundforcefeetperdegrees, RotationalStiffnessUnit.KilopoundForceFootPerDegrees);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.MeganewtonMeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMeganewtonMetersPerDegree(double meganewtonmetersperdegree) => new RotationalStiffness(meganewtonmetersperdegree, RotationalStiffnessUnit.MeganewtonMeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.MeganewtonMeterPerRadian"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMeganewtonMetersPerRadian(double meganewtonmetersperradian) => new RotationalStiffness(meganewtonmetersperradian, RotationalStiffnessUnit.MeganewtonMeterPerRadian);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.MeganewtonMillimeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMeganewtonMillimetersPerDegree(double meganewtonmillimetersperdegree) => new RotationalStiffness(meganewtonmillimetersperdegree, RotationalStiffnessUnit.MeganewtonMillimeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.MeganewtonMillimeterPerRadian"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMeganewtonMillimetersPerRadian(double meganewtonmillimetersperradian) => new RotationalStiffness(meganewtonmillimetersperradian, RotationalStiffnessUnit.MeganewtonMillimeterPerRadian);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.MicronewtonMeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMicronewtonMetersPerDegree(double micronewtonmetersperdegree) => new RotationalStiffness(micronewtonmetersperdegree, RotationalStiffnessUnit.MicronewtonMeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.MicronewtonMillimeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMicronewtonMillimetersPerDegree(double micronewtonmillimetersperdegree) => new RotationalStiffness(micronewtonmillimetersperdegree, RotationalStiffnessUnit.MicronewtonMillimeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.MicronewtonMillimeterPerRadian"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMicronewtonMillimetersPerRadian(double micronewtonmillimetersperradian) => new RotationalStiffness(micronewtonmillimetersperradian, RotationalStiffnessUnit.MicronewtonMillimeterPerRadian);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.MillinewtonMeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMillinewtonMetersPerDegree(double millinewtonmetersperdegree) => new RotationalStiffness(millinewtonmetersperdegree, RotationalStiffnessUnit.MillinewtonMeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.MillinewtonMillimeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMillinewtonMillimetersPerDegree(double millinewtonmillimetersperdegree) => new RotationalStiffness(millinewtonmillimetersperdegree, RotationalStiffnessUnit.MillinewtonMillimeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.MillinewtonMillimeterPerRadian"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromMillinewtonMillimetersPerRadian(double millinewtonmillimetersperradian) => new RotationalStiffness(millinewtonmillimetersperradian, RotationalStiffnessUnit.MillinewtonMillimeterPerRadian);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.NanonewtonMeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromNanonewtonMetersPerDegree(double nanonewtonmetersperdegree) => new RotationalStiffness(nanonewtonmetersperdegree, RotationalStiffnessUnit.NanonewtonMeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.NanonewtonMillimeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromNanonewtonMillimetersPerDegree(double nanonewtonmillimetersperdegree) => new RotationalStiffness(nanonewtonmillimetersperdegree, RotationalStiffnessUnit.NanonewtonMillimeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.NanonewtonMillimeterPerRadian"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromNanonewtonMillimetersPerRadian(double nanonewtonmillimetersperradian) => new RotationalStiffness(nanonewtonmillimetersperradian, RotationalStiffnessUnit.NanonewtonMillimeterPerRadian);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.NewtonMeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromNewtonMetersPerDegree(double newtonmetersperdegree) => new RotationalStiffness(newtonmetersperdegree, RotationalStiffnessUnit.NewtonMeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.NewtonMeterPerRadian"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromNewtonMetersPerRadian(double newtonmetersperradian) => new RotationalStiffness(newtonmetersperradian, RotationalStiffnessUnit.NewtonMeterPerRadian);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.NewtonMillimeterPerDegree"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromNewtonMillimetersPerDegree(double newtonmillimetersperdegree) => new RotationalStiffness(newtonmillimetersperdegree, RotationalStiffnessUnit.NewtonMillimeterPerDegree);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.NewtonMillimeterPerRadian"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromNewtonMillimetersPerRadian(double newtonmillimetersperradian) => new RotationalStiffness(newtonmillimetersperradian, RotationalStiffnessUnit.NewtonMillimeterPerRadian);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.PoundForceFeetPerRadian"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromPoundForceFeetPerRadian(double poundforcefeetperradian) => new RotationalStiffness(poundforcefeetperradian, RotationalStiffnessUnit.PoundForceFeetPerRadian);

        /// <summary>
        ///     Creates a <see cref="RotationalStiffness"/> from <see cref="RotationalStiffnessUnit.PoundForceFootPerDegrees"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static RotationalStiffness FromPoundForceFeetPerDegrees(double poundforcefeetperdegrees) => new RotationalStiffness(poundforcefeetperdegrees, RotationalStiffnessUnit.PoundForceFootPerDegrees);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="RotationalStiffnessUnit" /> to <see cref="RotationalStiffness" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>RotationalStiffness unit value.</returns>
        public static RotationalStiffness From(double value, RotationalStiffnessUnit fromUnit)
        {
            return new RotationalStiffness(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(RotationalStiffnessUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public RotationalStiffness ToUnit(RotationalStiffnessUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new RotationalStiffness(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                RotationalStiffnessUnit.CentinewtonMeterPerDegree => (_value * (180 / 3.1415926535897931)) * 1e-2d,
                RotationalStiffnessUnit.CentinewtonMillimeterPerDegree => (_value * 180 / 3.1415926535897931 * 0.001) * 1e-2d,
                RotationalStiffnessUnit.CentinewtonMillimeterPerRadian => (_value * 0.001) * 1e-2d,
                RotationalStiffnessUnit.DecanewtonMeterPerDegree => (_value * (180 / 3.1415926535897931)) * 1e1d,
                RotationalStiffnessUnit.DecanewtonMillimeterPerDegree => (_value * 180 / 3.1415926535897931 * 0.001) * 1e1d,
                RotationalStiffnessUnit.DecanewtonMillimeterPerRadian => (_value * 0.001) * 1e1d,
                RotationalStiffnessUnit.DecinewtonMeterPerDegree => (_value * (180 / 3.1415926535897931)) * 1e-1d,
                RotationalStiffnessUnit.DecinewtonMillimeterPerDegree => (_value * 180 / 3.1415926535897931 * 0.001) * 1e-1d,
                RotationalStiffnessUnit.DecinewtonMillimeterPerRadian => (_value * 0.001) * 1e-1d,
                RotationalStiffnessUnit.KilonewtonMeterPerDegree => (_value * (180 / 3.1415926535897931)) * 1e3d,
                RotationalStiffnessUnit.KilonewtonMeterPerRadian => (_value) * 1e3d,
                RotationalStiffnessUnit.KilonewtonMillimeterPerDegree => (_value * 180 / 3.1415926535897931 * 0.001) * 1e3d,
                RotationalStiffnessUnit.KilonewtonMillimeterPerRadian => (_value * 0.001) * 1e3d,
                RotationalStiffnessUnit.KilopoundForceFootPerDegrees => _value * 77682.6,
                RotationalStiffnessUnit.MeganewtonMeterPerDegree => (_value * (180 / 3.1415926535897931)) * 1e6d,
                RotationalStiffnessUnit.MeganewtonMeterPerRadian => (_value) * 1e6d,
                RotationalStiffnessUnit.MeganewtonMillimeterPerDegree => (_value * 180 / 3.1415926535897931 * 0.001) * 1e6d,
                RotationalStiffnessUnit.MeganewtonMillimeterPerRadian => (_value * 0.001) * 1e6d,
                RotationalStiffnessUnit.MicronewtonMeterPerDegree => (_value * (180 / 3.1415926535897931)) * 1e-6d,
                RotationalStiffnessUnit.MicronewtonMillimeterPerDegree => (_value * 180 / 3.1415926535897931 * 0.001) * 1e-6d,
                RotationalStiffnessUnit.MicronewtonMillimeterPerRadian => (_value * 0.001) * 1e-6d,
                RotationalStiffnessUnit.MillinewtonMeterPerDegree => (_value * (180 / 3.1415926535897931)) * 1e-3d,
                RotationalStiffnessUnit.MillinewtonMillimeterPerDegree => (_value * 180 / 3.1415926535897931 * 0.001) * 1e-3d,
                RotationalStiffnessUnit.MillinewtonMillimeterPerRadian => (_value * 0.001) * 1e-3d,
                RotationalStiffnessUnit.NanonewtonMeterPerDegree => (_value * (180 / 3.1415926535897931)) * 1e-9d,
                RotationalStiffnessUnit.NanonewtonMillimeterPerDegree => (_value * 180 / 3.1415926535897931 * 0.001) * 1e-9d,
                RotationalStiffnessUnit.NanonewtonMillimeterPerRadian => (_value * 0.001) * 1e-9d,
                RotationalStiffnessUnit.NewtonMeterPerDegree => _value * (180 / 3.1415926535897931),
                RotationalStiffnessUnit.NewtonMeterPerRadian => _value,
                RotationalStiffnessUnit.NewtonMillimeterPerDegree => _value * 180 / 3.1415926535897931 * 0.001,
                RotationalStiffnessUnit.NewtonMillimeterPerRadian => _value * 0.001,
                RotationalStiffnessUnit.PoundForceFeetPerRadian => _value * 1.3558179483314,
                RotationalStiffnessUnit.PoundForceFootPerDegrees => _value * 77.6826,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(RotationalStiffnessUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                RotationalStiffnessUnit.CentinewtonMeterPerDegree => (baseUnitValue / (180 / 3.1415926535897931)) / 1e-2d,
                RotationalStiffnessUnit.CentinewtonMillimeterPerDegree => (baseUnitValue / 180 * 3.1415926535897931 * 1000) / 1e-2d,
                RotationalStiffnessUnit.CentinewtonMillimeterPerRadian => (baseUnitValue * 1000) / 1e-2d,
                RotationalStiffnessUnit.DecanewtonMeterPerDegree => (baseUnitValue / (180 / 3.1415926535897931)) / 1e1d,
                RotationalStiffnessUnit.DecanewtonMillimeterPerDegree => (baseUnitValue / 180 * 3.1415926535897931 * 1000) / 1e1d,
                RotationalStiffnessUnit.DecanewtonMillimeterPerRadian => (baseUnitValue * 1000) / 1e1d,
                RotationalStiffnessUnit.DecinewtonMeterPerDegree => (baseUnitValue / (180 / 3.1415926535897931)) / 1e-1d,
                RotationalStiffnessUnit.DecinewtonMillimeterPerDegree => (baseUnitValue / 180 * 3.1415926535897931 * 1000) / 1e-1d,
                RotationalStiffnessUnit.DecinewtonMillimeterPerRadian => (baseUnitValue * 1000) / 1e-1d,
                RotationalStiffnessUnit.KilonewtonMeterPerDegree => (baseUnitValue / (180 / 3.1415926535897931)) / 1e3d,
                RotationalStiffnessUnit.KilonewtonMeterPerRadian => (baseUnitValue) / 1e3d,
                RotationalStiffnessUnit.KilonewtonMillimeterPerDegree => (baseUnitValue / 180 * 3.1415926535897931 * 1000) / 1e3d,
                RotationalStiffnessUnit.KilonewtonMillimeterPerRadian => (baseUnitValue * 1000) / 1e3d,
                RotationalStiffnessUnit.KilopoundForceFootPerDegrees => baseUnitValue / 77682.6,
                RotationalStiffnessUnit.MeganewtonMeterPerDegree => (baseUnitValue / (180 / 3.1415926535897931)) / 1e6d,
                RotationalStiffnessUnit.MeganewtonMeterPerRadian => (baseUnitValue) / 1e6d,
                RotationalStiffnessUnit.MeganewtonMillimeterPerDegree => (baseUnitValue / 180 * 3.1415926535897931 * 1000) / 1e6d,
                RotationalStiffnessUnit.MeganewtonMillimeterPerRadian => (baseUnitValue * 1000) / 1e6d,
                RotationalStiffnessUnit.MicronewtonMeterPerDegree => (baseUnitValue / (180 / 3.1415926535897931)) / 1e-6d,
                RotationalStiffnessUnit.MicronewtonMillimeterPerDegree => (baseUnitValue / 180 * 3.1415926535897931 * 1000) / 1e-6d,
                RotationalStiffnessUnit.MicronewtonMillimeterPerRadian => (baseUnitValue * 1000) / 1e-6d,
                RotationalStiffnessUnit.MillinewtonMeterPerDegree => (baseUnitValue / (180 / 3.1415926535897931)) / 1e-3d,
                RotationalStiffnessUnit.MillinewtonMillimeterPerDegree => (baseUnitValue / 180 * 3.1415926535897931 * 1000) / 1e-3d,
                RotationalStiffnessUnit.MillinewtonMillimeterPerRadian => (baseUnitValue * 1000) / 1e-3d,
                RotationalStiffnessUnit.NanonewtonMeterPerDegree => (baseUnitValue / (180 / 3.1415926535897931)) / 1e-9d,
                RotationalStiffnessUnit.NanonewtonMillimeterPerDegree => (baseUnitValue / 180 * 3.1415926535897931 * 1000) / 1e-9d,
                RotationalStiffnessUnit.NanonewtonMillimeterPerRadian => (baseUnitValue * 1000) / 1e-9d,
                RotationalStiffnessUnit.NewtonMeterPerDegree => baseUnitValue / (180 / 3.1415926535897931),
                RotationalStiffnessUnit.NewtonMeterPerRadian => baseUnitValue,
                RotationalStiffnessUnit.NewtonMillimeterPerDegree => baseUnitValue / 180 * 3.1415926535897931 * 1000,
                RotationalStiffnessUnit.NewtonMillimeterPerRadian => baseUnitValue * 1000,
                RotationalStiffnessUnit.PoundForceFeetPerRadian => baseUnitValue / 1.3558179483314,
                RotationalStiffnessUnit.PoundForceFootPerDegrees => baseUnitValue / 77.6826,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion
    }
}

