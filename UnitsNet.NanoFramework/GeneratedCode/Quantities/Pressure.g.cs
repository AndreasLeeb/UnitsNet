//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Pressure (symbol: P or p) is the ratio of force to the area over which that force is distributed. Pressure is force per unit area applied in a direction perpendicular to the surface of an object. Gauge pressure (also spelled gage pressure)[a] is the pressure relative to the local atmospheric or ambient pressure. Pressure is measured in any unit of force divided by any unit of area. The SI unit of pressure is the newton per square metre, which is called the pascal (Pa) after the seventeenth-century philosopher and scientist Blaise Pascal. A pressure of 1 Pa is small; it approximately equals the pressure exerted by a dollar bill resting flat on a table. Everyday pressures are often stated in kilopascals (1 kPa = 1000 Pa).
    /// </summary>
    public struct  Pressure
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PressureUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public PressureUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Pressure(double value, PressureUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static PressureUnit BaseUnit { get; } = PressureUnit.Pascal;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static Pressure MaxValue { get; } = new Pressure(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static Pressure MinValue { get; } = new Pressure(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Pressure Zero { get; } = new Pressure(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Atmosphere"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToAtmospheres property.")]
        public double Atmospheres => As(PressureUnit.Atmosphere);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Bar"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToBars property.")]
        public double Bars => As(PressureUnit.Bar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Centibar"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCentibars property.")]
        public double Centibars => As(PressureUnit.Centibar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Decapascal"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecapascals property.")]
        public double Decapascals => As(PressureUnit.Decapascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Decibar"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecibars property.")]
        public double Decibars => As(PressureUnit.Decibar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.DynePerSquareCentimeter"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDynesPerSquareCentimeter property.")]
        public double DynesPerSquareCentimeter => As(PressureUnit.DynePerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.FootOfElevation"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToFeetOfElevation property.")]
        public double FeetOfElevation => As(PressureUnit.FootOfElevation);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.FootOfHead"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToFeetOfHead property.")]
        public double FeetOfHead => As(PressureUnit.FootOfHead);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Gigapascal"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGigapascals property.")]
        public double Gigapascals => As(PressureUnit.Gigapascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Hectopascal"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToHectopascals property.")]
        public double Hectopascals => As(PressureUnit.Hectopascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.InchOfMercury"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToInchesOfMercury property.")]
        public double InchesOfMercury => As(PressureUnit.InchOfMercury);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.InchOfWaterColumn"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToInchesOfWaterColumn property.")]
        public double InchesOfWaterColumn => As(PressureUnit.InchOfWaterColumn);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Kilobar"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilobars property.")]
        public double Kilobars => As(PressureUnit.Kilobar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilogramForcePerSquareCentimeter"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilogramsForcePerSquareCentimeter property.")]
        public double KilogramsForcePerSquareCentimeter => As(PressureUnit.KilogramForcePerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilogramForcePerSquareMeter"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilogramsForcePerSquareMeter property.")]
        public double KilogramsForcePerSquareMeter => As(PressureUnit.KilogramForcePerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilogramForcePerSquareMillimeter"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilogramsForcePerSquareMillimeter property.")]
        public double KilogramsForcePerSquareMillimeter => As(PressureUnit.KilogramForcePerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilonewtonPerSquareCentimeter"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilonewtonsPerSquareCentimeter property.")]
        public double KilonewtonsPerSquareCentimeter => As(PressureUnit.KilonewtonPerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilonewtonPerSquareMeter"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilonewtonsPerSquareMeter property.")]
        public double KilonewtonsPerSquareMeter => As(PressureUnit.KilonewtonPerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilonewtonPerSquareMillimeter"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilonewtonsPerSquareMillimeter property.")]
        public double KilonewtonsPerSquareMillimeter => As(PressureUnit.KilonewtonPerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Kilopascal"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilopascals property.")]
        public double Kilopascals => As(PressureUnit.Kilopascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilopoundForcePerSquareFoot"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilopoundsForcePerSquareFoot property.")]
        public double KilopoundsForcePerSquareFoot => As(PressureUnit.KilopoundForcePerSquareFoot);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilopoundForcePerSquareInch"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilopoundsForcePerSquareInch property.")]
        public double KilopoundsForcePerSquareInch => As(PressureUnit.KilopoundForcePerSquareInch);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Megabar"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegabars property.")]
        public double Megabars => As(PressureUnit.Megabar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MeganewtonPerSquareMeter"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMeganewtonsPerSquareMeter property.")]
        public double MeganewtonsPerSquareMeter => As(PressureUnit.MeganewtonPerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Megapascal"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegapascals property.")]
        public double Megapascals => As(PressureUnit.Megapascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MeterOfElevation"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMetersOfElevation property.")]
        public double MetersOfElevation => As(PressureUnit.MeterOfElevation);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MeterOfHead"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMetersOfHead property.")]
        public double MetersOfHead => As(PressureUnit.MeterOfHead);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Microbar"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicrobars property.")]
        public double Microbars => As(PressureUnit.Microbar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Micropascal"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicropascals property.")]
        public double Micropascals => As(PressureUnit.Micropascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Millibar"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillibars property.")]
        public double Millibars => As(PressureUnit.Millibar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MillimeterOfMercury"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillimetersOfMercury property.")]
        public double MillimetersOfMercury => As(PressureUnit.MillimeterOfMercury);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MillimeterOfWaterColumn"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillimeterOfWaterColumn property.")]
        public double MillimeterOfWaterColumn => As(PressureUnit.MillimeterOfWaterColumn);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Millipascal"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillipascals property.")]
        public double Millipascals => As(PressureUnit.Millipascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.NewtonPerSquareCentimeter"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNewtonsPerSquareCentimeter property.")]
        public double NewtonsPerSquareCentimeter => As(PressureUnit.NewtonPerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.NewtonPerSquareMeter"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNewtonsPerSquareMeter property.")]
        public double NewtonsPerSquareMeter => As(PressureUnit.NewtonPerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.NewtonPerSquareMillimeter"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNewtonsPerSquareMillimeter property.")]
        public double NewtonsPerSquareMillimeter => As(PressureUnit.NewtonPerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Pascal"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPascals property.")]
        public double Pascals => As(PressureUnit.Pascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.PoundForcePerSquareFoot"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPoundsForcePerSquareFoot property.")]
        public double PoundsForcePerSquareFoot => As(PressureUnit.PoundForcePerSquareFoot);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.PoundForcePerSquareInch"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPoundsForcePerSquareInch property.")]
        public double PoundsForcePerSquareInch => As(PressureUnit.PoundForcePerSquareInch);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.PoundPerInchSecondSquared"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPoundsPerInchSecondSquared property.")]
        public double PoundsPerInchSecondSquared => As(PressureUnit.PoundPerInchSecondSquared);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TechnicalAtmosphere"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTechnicalAtmospheres property.")]
        public double TechnicalAtmospheres => As(PressureUnit.TechnicalAtmosphere);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TonneForcePerSquareCentimeter"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTonnesForcePerSquareCentimeter property.")]
        public double TonnesForcePerSquareCentimeter => As(PressureUnit.TonneForcePerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TonneForcePerSquareMeter"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTonnesForcePerSquareMeter property.")]
        public double TonnesForcePerSquareMeter => As(PressureUnit.TonneForcePerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TonneForcePerSquareMillimeter"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTonnesForcePerSquareMillimeter property.")]
        public double TonnesForcePerSquareMillimeter => As(PressureUnit.TonneForcePerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Torr"/> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTorrs property.")]
        public double Torrs => As(PressureUnit.Torr);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Atmosphere"/>.
        /// </summary>
        public Pressure ToAtmospheres => ToUnit(PressureUnit.Atmosphere);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Bar"/>.
        /// </summary>
        public Pressure ToBars => ToUnit(PressureUnit.Bar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Centibar"/>.
        /// </summary>
        public Pressure ToCentibars => ToUnit(PressureUnit.Centibar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Decapascal"/>.
        /// </summary>
        public Pressure ToDecapascals => ToUnit(PressureUnit.Decapascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Decibar"/>.
        /// </summary>
        public Pressure ToDecibars => ToUnit(PressureUnit.Decibar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.DynePerSquareCentimeter"/>.
        /// </summary>
        public Pressure ToDynesPerSquareCentimeter => ToUnit(PressureUnit.DynePerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.FootOfElevation"/>.
        /// </summary>
        public Pressure ToFeetOfElevation => ToUnit(PressureUnit.FootOfElevation);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.FootOfHead"/>.
        /// </summary>
        public Pressure ToFeetOfHead => ToUnit(PressureUnit.FootOfHead);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Gigapascal"/>.
        /// </summary>
        public Pressure ToGigapascals => ToUnit(PressureUnit.Gigapascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Hectopascal"/>.
        /// </summary>
        public Pressure ToHectopascals => ToUnit(PressureUnit.Hectopascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.InchOfMercury"/>.
        /// </summary>
        public Pressure ToInchesOfMercury => ToUnit(PressureUnit.InchOfMercury);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.InchOfWaterColumn"/>.
        /// </summary>
        public Pressure ToInchesOfWaterColumn => ToUnit(PressureUnit.InchOfWaterColumn);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Kilobar"/>.
        /// </summary>
        public Pressure ToKilobars => ToUnit(PressureUnit.Kilobar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilogramForcePerSquareCentimeter"/>.
        /// </summary>
        public Pressure ToKilogramsForcePerSquareCentimeter => ToUnit(PressureUnit.KilogramForcePerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilogramForcePerSquareMeter"/>.
        /// </summary>
        public Pressure ToKilogramsForcePerSquareMeter => ToUnit(PressureUnit.KilogramForcePerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilogramForcePerSquareMillimeter"/>.
        /// </summary>
        public Pressure ToKilogramsForcePerSquareMillimeter => ToUnit(PressureUnit.KilogramForcePerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilonewtonPerSquareCentimeter"/>.
        /// </summary>
        public Pressure ToKilonewtonsPerSquareCentimeter => ToUnit(PressureUnit.KilonewtonPerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilonewtonPerSquareMeter"/>.
        /// </summary>
        public Pressure ToKilonewtonsPerSquareMeter => ToUnit(PressureUnit.KilonewtonPerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilonewtonPerSquareMillimeter"/>.
        /// </summary>
        public Pressure ToKilonewtonsPerSquareMillimeter => ToUnit(PressureUnit.KilonewtonPerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Kilopascal"/>.
        /// </summary>
        public Pressure ToKilopascals => ToUnit(PressureUnit.Kilopascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilopoundForcePerSquareFoot"/>.
        /// </summary>
        public Pressure ToKilopoundsForcePerSquareFoot => ToUnit(PressureUnit.KilopoundForcePerSquareFoot);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilopoundForcePerSquareInch"/>.
        /// </summary>
        public Pressure ToKilopoundsForcePerSquareInch => ToUnit(PressureUnit.KilopoundForcePerSquareInch);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Megabar"/>.
        /// </summary>
        public Pressure ToMegabars => ToUnit(PressureUnit.Megabar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MeganewtonPerSquareMeter"/>.
        /// </summary>
        public Pressure ToMeganewtonsPerSquareMeter => ToUnit(PressureUnit.MeganewtonPerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Megapascal"/>.
        /// </summary>
        public Pressure ToMegapascals => ToUnit(PressureUnit.Megapascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MeterOfElevation"/>.
        /// </summary>
        public Pressure ToMetersOfElevation => ToUnit(PressureUnit.MeterOfElevation);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MeterOfHead"/>.
        /// </summary>
        public Pressure ToMetersOfHead => ToUnit(PressureUnit.MeterOfHead);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Microbar"/>.
        /// </summary>
        public Pressure ToMicrobars => ToUnit(PressureUnit.Microbar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Micropascal"/>.
        /// </summary>
        public Pressure ToMicropascals => ToUnit(PressureUnit.Micropascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Millibar"/>.
        /// </summary>
        public Pressure ToMillibars => ToUnit(PressureUnit.Millibar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MillimeterOfMercury"/>.
        /// </summary>
        public Pressure ToMillimetersOfMercury => ToUnit(PressureUnit.MillimeterOfMercury);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MillimeterOfWaterColumn"/>.
        /// </summary>
        public Pressure ToMillimeterOfWaterColumn => ToUnit(PressureUnit.MillimeterOfWaterColumn);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Millipascal"/>.
        /// </summary>
        public Pressure ToMillipascals => ToUnit(PressureUnit.Millipascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.NewtonPerSquareCentimeter"/>.
        /// </summary>
        public Pressure ToNewtonsPerSquareCentimeter => ToUnit(PressureUnit.NewtonPerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.NewtonPerSquareMeter"/>.
        /// </summary>
        public Pressure ToNewtonsPerSquareMeter => ToUnit(PressureUnit.NewtonPerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.NewtonPerSquareMillimeter"/>.
        /// </summary>
        public Pressure ToNewtonsPerSquareMillimeter => ToUnit(PressureUnit.NewtonPerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Pascal"/>.
        /// </summary>
        public Pressure ToPascals => ToUnit(PressureUnit.Pascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.PoundForcePerSquareFoot"/>.
        /// </summary>
        public Pressure ToPoundsForcePerSquareFoot => ToUnit(PressureUnit.PoundForcePerSquareFoot);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.PoundForcePerSquareInch"/>.
        /// </summary>
        public Pressure ToPoundsForcePerSquareInch => ToUnit(PressureUnit.PoundForcePerSquareInch);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.PoundPerInchSecondSquared"/>.
        /// </summary>
        public Pressure ToPoundsPerInchSecondSquared => ToUnit(PressureUnit.PoundPerInchSecondSquared);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TechnicalAtmosphere"/>.
        /// </summary>
        public Pressure ToTechnicalAtmospheres => ToUnit(PressureUnit.TechnicalAtmosphere);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TonneForcePerSquareCentimeter"/>.
        /// </summary>
        public Pressure ToTonnesForcePerSquareCentimeter => ToUnit(PressureUnit.TonneForcePerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TonneForcePerSquareMeter"/>.
        /// </summary>
        public Pressure ToTonnesForcePerSquareMeter => ToUnit(PressureUnit.TonneForcePerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TonneForcePerSquareMillimeter"/>.
        /// </summary>
        public Pressure ToTonnesForcePerSquareMillimeter => ToUnit(PressureUnit.TonneForcePerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Torr"/>.
        /// </summary>
        public Pressure ToTorrs => ToUnit(PressureUnit.Torr);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Atmosphere"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromAtmospheres(double atmospheres) => new Pressure(atmospheres, PressureUnit.Atmosphere);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Bar"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromBars(double bars) => new Pressure(bars, PressureUnit.Bar);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Centibar"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromCentibars(double centibars) => new Pressure(centibars, PressureUnit.Centibar);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Decapascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromDecapascals(double decapascals) => new Pressure(decapascals, PressureUnit.Decapascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Decibar"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromDecibars(double decibars) => new Pressure(decibars, PressureUnit.Decibar);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.DynePerSquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromDynesPerSquareCentimeter(double dynespersquarecentimeter) => new Pressure(dynespersquarecentimeter, PressureUnit.DynePerSquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.FootOfElevation"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromFeetOfElevation(double feetofelevation) => new Pressure(feetofelevation, PressureUnit.FootOfElevation);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.FootOfHead"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromFeetOfHead(double feetofhead) => new Pressure(feetofhead, PressureUnit.FootOfHead);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Gigapascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromGigapascals(double gigapascals) => new Pressure(gigapascals, PressureUnit.Gigapascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Hectopascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromHectopascals(double hectopascals) => new Pressure(hectopascals, PressureUnit.Hectopascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.InchOfMercury"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromInchesOfMercury(double inchesofmercury) => new Pressure(inchesofmercury, PressureUnit.InchOfMercury);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.InchOfWaterColumn"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromInchesOfWaterColumn(double inchesofwatercolumn) => new Pressure(inchesofwatercolumn, PressureUnit.InchOfWaterColumn);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Kilobar"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilobars(double kilobars) => new Pressure(kilobars, PressureUnit.Kilobar);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilogramForcePerSquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilogramsForcePerSquareCentimeter(double kilogramsforcepersquarecentimeter) => new Pressure(kilogramsforcepersquarecentimeter, PressureUnit.KilogramForcePerSquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilogramForcePerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilogramsForcePerSquareMeter(double kilogramsforcepersquaremeter) => new Pressure(kilogramsforcepersquaremeter, PressureUnit.KilogramForcePerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilogramForcePerSquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilogramsForcePerSquareMillimeter(double kilogramsforcepersquaremillimeter) => new Pressure(kilogramsforcepersquaremillimeter, PressureUnit.KilogramForcePerSquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilonewtonPerSquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilonewtonsPerSquareCentimeter(double kilonewtonspersquarecentimeter) => new Pressure(kilonewtonspersquarecentimeter, PressureUnit.KilonewtonPerSquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilonewtonPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilonewtonsPerSquareMeter(double kilonewtonspersquaremeter) => new Pressure(kilonewtonspersquaremeter, PressureUnit.KilonewtonPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilonewtonPerSquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilonewtonsPerSquareMillimeter(double kilonewtonspersquaremillimeter) => new Pressure(kilonewtonspersquaremillimeter, PressureUnit.KilonewtonPerSquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Kilopascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilopascals(double kilopascals) => new Pressure(kilopascals, PressureUnit.Kilopascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilopoundForcePerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilopoundsForcePerSquareFoot(double kilopoundsforcepersquarefoot) => new Pressure(kilopoundsforcepersquarefoot, PressureUnit.KilopoundForcePerSquareFoot);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilopoundForcePerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilopoundsForcePerSquareInch(double kilopoundsforcepersquareinch) => new Pressure(kilopoundsforcepersquareinch, PressureUnit.KilopoundForcePerSquareInch);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Megabar"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMegabars(double megabars) => new Pressure(megabars, PressureUnit.Megabar);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MeganewtonPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMeganewtonsPerSquareMeter(double meganewtonspersquaremeter) => new Pressure(meganewtonspersquaremeter, PressureUnit.MeganewtonPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Megapascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMegapascals(double megapascals) => new Pressure(megapascals, PressureUnit.Megapascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MeterOfElevation"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMetersOfElevation(double metersofelevation) => new Pressure(metersofelevation, PressureUnit.MeterOfElevation);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MeterOfHead"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMetersOfHead(double metersofhead) => new Pressure(metersofhead, PressureUnit.MeterOfHead);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Microbar"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMicrobars(double microbars) => new Pressure(microbars, PressureUnit.Microbar);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Micropascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMicropascals(double micropascals) => new Pressure(micropascals, PressureUnit.Micropascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Millibar"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMillibars(double millibars) => new Pressure(millibars, PressureUnit.Millibar);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MillimeterOfMercury"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMillimetersOfMercury(double millimetersofmercury) => new Pressure(millimetersofmercury, PressureUnit.MillimeterOfMercury);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MillimeterOfWaterColumn"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMillimeterOfWaterColumn(double millimeterofwatercolumn) => new Pressure(millimeterofwatercolumn, PressureUnit.MillimeterOfWaterColumn);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Millipascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMillipascals(double millipascals) => new Pressure(millipascals, PressureUnit.Millipascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.NewtonPerSquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromNewtonsPerSquareCentimeter(double newtonspersquarecentimeter) => new Pressure(newtonspersquarecentimeter, PressureUnit.NewtonPerSquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.NewtonPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromNewtonsPerSquareMeter(double newtonspersquaremeter) => new Pressure(newtonspersquaremeter, PressureUnit.NewtonPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.NewtonPerSquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromNewtonsPerSquareMillimeter(double newtonspersquaremillimeter) => new Pressure(newtonspersquaremillimeter, PressureUnit.NewtonPerSquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Pascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromPascals(double pascals) => new Pressure(pascals, PressureUnit.Pascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.PoundForcePerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromPoundsForcePerSquareFoot(double poundsforcepersquarefoot) => new Pressure(poundsforcepersquarefoot, PressureUnit.PoundForcePerSquareFoot);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.PoundForcePerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromPoundsForcePerSquareInch(double poundsforcepersquareinch) => new Pressure(poundsforcepersquareinch, PressureUnit.PoundForcePerSquareInch);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.PoundPerInchSecondSquared"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromPoundsPerInchSecondSquared(double poundsperinchsecondsquared) => new Pressure(poundsperinchsecondsquared, PressureUnit.PoundPerInchSecondSquared);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.TechnicalAtmosphere"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromTechnicalAtmospheres(double technicalatmospheres) => new Pressure(technicalatmospheres, PressureUnit.TechnicalAtmosphere);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.TonneForcePerSquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromTonnesForcePerSquareCentimeter(double tonnesforcepersquarecentimeter) => new Pressure(tonnesforcepersquarecentimeter, PressureUnit.TonneForcePerSquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.TonneForcePerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromTonnesForcePerSquareMeter(double tonnesforcepersquaremeter) => new Pressure(tonnesforcepersquaremeter, PressureUnit.TonneForcePerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.TonneForcePerSquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromTonnesForcePerSquareMillimeter(double tonnesforcepersquaremillimeter) => new Pressure(tonnesforcepersquaremillimeter, PressureUnit.TonneForcePerSquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Torr"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromTorrs(double torrs) => new Pressure(torrs, PressureUnit.Torr);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PressureUnit" /> to <see cref="Pressure" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Pressure unit value.</returns>
        public static Pressure From(double value, PressureUnit fromUnit)
        {
            return new Pressure(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PressureUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public Pressure ToUnit(PressureUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Pressure(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                PressureUnit.Atmosphere => _value * 1.01325 * 1e5,
                PressureUnit.Bar => _value * 1e5,
                PressureUnit.Centibar => (_value * 1e5) * 1e-2d,
                PressureUnit.Decapascal => (_value) * 1e1d,
                PressureUnit.Decibar => (_value * 1e5) * 1e-1d,
                PressureUnit.DynePerSquareCentimeter => _value * 1.0e-1,
                PressureUnit.FootOfElevation => Math.Pow(1.0 - (_value / 145366.45), 5.2553026003237266401799415610351) * 101325.0,
                PressureUnit.FootOfHead => _value * 2989.0669,
                PressureUnit.Gigapascal => (_value) * 1e9d,
                PressureUnit.Hectopascal => (_value) * 1e2d,
                PressureUnit.InchOfMercury => _value / 2.95299830714159e-4,
                PressureUnit.InchOfWaterColumn => _value * 249.08890833333,
                PressureUnit.Kilobar => (_value * 1e5) * 1e3d,
                PressureUnit.KilogramForcePerSquareCentimeter => _value * 9.80665e4,
                PressureUnit.KilogramForcePerSquareMeter => _value * 9.80665019960652,
                PressureUnit.KilogramForcePerSquareMillimeter => _value * 9.80665e6,
                PressureUnit.KilonewtonPerSquareCentimeter => (_value * 1e4) * 1e3d,
                PressureUnit.KilonewtonPerSquareMeter => (_value) * 1e3d,
                PressureUnit.KilonewtonPerSquareMillimeter => (_value * 1e6) * 1e3d,
                PressureUnit.Kilopascal => (_value) * 1e3d,
                PressureUnit.KilopoundForcePerSquareFoot => (_value * 4.788025898033584e1) * 1e3d,
                PressureUnit.KilopoundForcePerSquareInch => (_value * 6.894757293168361e3) * 1e3d,
                PressureUnit.Megabar => (_value * 1e5) * 1e6d,
                PressureUnit.MeganewtonPerSquareMeter => (_value) * 1e6d,
                PressureUnit.Megapascal => (_value) * 1e6d,
                PressureUnit.MeterOfElevation => Math.Pow(1.0 - (_value / 44307.69396), 5.2553026003237266401799415610351) * 101325.0,
                PressureUnit.MeterOfHead => _value * 9804.139432,
                PressureUnit.Microbar => (_value * 1e5) * 1e-6d,
                PressureUnit.Micropascal => (_value) * 1e-6d,
                PressureUnit.Millibar => (_value * 1e5) * 1e-3d,
                PressureUnit.MillimeterOfMercury => _value / 7.50061561302643e-3,
                PressureUnit.MillimeterOfWaterColumn => _value * 9.806650000000272e0,
                PressureUnit.Millipascal => (_value) * 1e-3d,
                PressureUnit.NewtonPerSquareCentimeter => _value * 1e4,
                PressureUnit.NewtonPerSquareMeter => _value,
                PressureUnit.NewtonPerSquareMillimeter => _value * 1e6,
                PressureUnit.Pascal => _value,
                PressureUnit.PoundForcePerSquareFoot => _value * 4.788025898033584e1,
                PressureUnit.PoundForcePerSquareInch => _value * 6.894757293168361e3,
                PressureUnit.PoundPerInchSecondSquared => _value * 1.785796732283465e1,
                PressureUnit.TechnicalAtmosphere => _value * 9.80680592331 * 1e4,
                PressureUnit.TonneForcePerSquareCentimeter => _value * 9.80665e7,
                PressureUnit.TonneForcePerSquareMeter => _value * 9.80665e3,
                PressureUnit.TonneForcePerSquareMillimeter => _value * 9.80665e9,
                PressureUnit.Torr => _value * 1.3332266752 * 1e2,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(PressureUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                PressureUnit.Atmosphere => baseUnitValue / (1.01325 * 1e5),
                PressureUnit.Bar => baseUnitValue / 1e5,
                PressureUnit.Centibar => (baseUnitValue / 1e5) / 1e-2d,
                PressureUnit.Decapascal => (baseUnitValue) / 1e1d,
                PressureUnit.Decibar => (baseUnitValue / 1e5) / 1e-1d,
                PressureUnit.DynePerSquareCentimeter => baseUnitValue / 1.0e-1,
                PressureUnit.FootOfElevation => (1.0 - Math.Pow(baseUnitValue / 101325.0, 0.190284)) * 145366.45,
                PressureUnit.FootOfHead => baseUnitValue * 0.000334552565551,
                PressureUnit.Gigapascal => (baseUnitValue) / 1e9d,
                PressureUnit.Hectopascal => (baseUnitValue) / 1e2d,
                PressureUnit.InchOfMercury => baseUnitValue * 2.95299830714159e-4,
                PressureUnit.InchOfWaterColumn => baseUnitValue / 249.08890833333,
                PressureUnit.Kilobar => (baseUnitValue / 1e5) / 1e3d,
                PressureUnit.KilogramForcePerSquareCentimeter => baseUnitValue / 9.80665e4,
                PressureUnit.KilogramForcePerSquareMeter => baseUnitValue * 0.101971619222242,
                PressureUnit.KilogramForcePerSquareMillimeter => baseUnitValue / 9.80665e6,
                PressureUnit.KilonewtonPerSquareCentimeter => (baseUnitValue / 1e4) / 1e3d,
                PressureUnit.KilonewtonPerSquareMeter => (baseUnitValue) / 1e3d,
                PressureUnit.KilonewtonPerSquareMillimeter => (baseUnitValue / 1e6) / 1e3d,
                PressureUnit.Kilopascal => (baseUnitValue) / 1e3d,
                PressureUnit.KilopoundForcePerSquareFoot => (baseUnitValue / 4.788025898033584e1) / 1e3d,
                PressureUnit.KilopoundForcePerSquareInch => (baseUnitValue / 6.894757293168361e3) / 1e3d,
                PressureUnit.Megabar => (baseUnitValue / 1e5) / 1e6d,
                PressureUnit.MeganewtonPerSquareMeter => (baseUnitValue) / 1e6d,
                PressureUnit.Megapascal => (baseUnitValue) / 1e6d,
                PressureUnit.MeterOfElevation => (1.0 - Math.Pow(baseUnitValue / 101325.0, 0.190284)) * 44307.69396,
                PressureUnit.MeterOfHead => baseUnitValue * 0.0001019977334,
                PressureUnit.Microbar => (baseUnitValue / 1e5) / 1e-6d,
                PressureUnit.Micropascal => (baseUnitValue) / 1e-6d,
                PressureUnit.Millibar => (baseUnitValue / 1e5) / 1e-3d,
                PressureUnit.MillimeterOfMercury => baseUnitValue * 7.50061561302643e-3,
                PressureUnit.MillimeterOfWaterColumn => baseUnitValue / 9.806650000000272e0,
                PressureUnit.Millipascal => (baseUnitValue) / 1e-3d,
                PressureUnit.NewtonPerSquareCentimeter => baseUnitValue / 1e4,
                PressureUnit.NewtonPerSquareMeter => baseUnitValue,
                PressureUnit.NewtonPerSquareMillimeter => baseUnitValue / 1e6,
                PressureUnit.Pascal => baseUnitValue,
                PressureUnit.PoundForcePerSquareFoot => baseUnitValue / 4.788025898033584e1,
                PressureUnit.PoundForcePerSquareInch => baseUnitValue / 6.894757293168361e3,
                PressureUnit.PoundPerInchSecondSquared => baseUnitValue / 1.785796732283465e1,
                PressureUnit.TechnicalAtmosphere => baseUnitValue / (9.80680592331 * 1e4),
                PressureUnit.TonneForcePerSquareCentimeter => baseUnitValue / 9.80665e7,
                PressureUnit.TonneForcePerSquareMeter => baseUnitValue / 9.80665e3,
                PressureUnit.TonneForcePerSquareMillimeter => baseUnitValue / 9.80665e9,
                PressureUnit.Torr => baseUnitValue / (1.3332266752 * 1e2),
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion
    }
}

