//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Pressure change rate is the ratio of the pressure change to the time during which the change occurred (value of pressure changes per unit time).
    /// </summary>
    public struct  PressureChangeRate
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PressureChangeRateUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public PressureChangeRateUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public PressureChangeRate(double value, PressureChangeRateUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static PressureChangeRateUnit BaseUnit { get; } = PressureChangeRateUnit.PascalPerSecond;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static PressureChangeRate MaxValue { get; } = new PressureChangeRate(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static PressureChangeRate MinValue { get; } = new PressureChangeRate(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static PressureChangeRate Zero { get; } = new PressureChangeRate(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.AtmospherePerSecond">AtmospheresPerSecond</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToAtmospheresPerSecond property.")]
        public double AtmospheresPerSecond => As(PressureChangeRateUnit.AtmospherePerSecond);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.KilopascalPerMinute">KilopascalsPerMinute</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilopascalsPerMinute property.")]
        public double KilopascalsPerMinute => As(PressureChangeRateUnit.KilopascalPerMinute);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.KilopascalPerSecond">KilopascalsPerSecond</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilopascalsPerSecond property.")]
        public double KilopascalsPerSecond => As(PressureChangeRateUnit.KilopascalPerSecond);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute">KilopoundsForcePerSquareInchPerMinute</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilopoundsForcePerSquareInchPerMinute property.")]
        public double KilopoundsForcePerSquareInchPerMinute => As(PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond">KilopoundsForcePerSquareInchPerSecond</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilopoundsForcePerSquareInchPerSecond property.")]
        public double KilopoundsForcePerSquareInchPerSecond => As(PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.MegapascalPerMinute">MegapascalsPerMinute</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegapascalsPerMinute property.")]
        public double MegapascalsPerMinute => As(PressureChangeRateUnit.MegapascalPerMinute);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.MegapascalPerSecond">MegapascalsPerSecond</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegapascalsPerSecond property.")]
        public double MegapascalsPerSecond => As(PressureChangeRateUnit.MegapascalPerSecond);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute">MegapoundsForcePerSquareInchPerMinute</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegapoundsForcePerSquareInchPerMinute property.")]
        public double MegapoundsForcePerSquareInchPerMinute => As(PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond">MegapoundsForcePerSquareInchPerSecond</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegapoundsForcePerSquareInchPerSecond property.")]
        public double MegapoundsForcePerSquareInchPerSecond => As(PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.MillimeterOfMercuryPerSecond">MillimetersOfMercuryPerSecond</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillimetersOfMercuryPerSecond property.")]
        public double MillimetersOfMercuryPerSecond => As(PressureChangeRateUnit.MillimeterOfMercuryPerSecond);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.PascalPerMinute">PascalsPerMinute</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPascalsPerMinute property.")]
        public double PascalsPerMinute => As(PressureChangeRateUnit.PascalPerMinute);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.PascalPerSecond">PascalsPerSecond</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPascalsPerSecond property.")]
        public double PascalsPerSecond => As(PressureChangeRateUnit.PascalPerSecond);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.PoundForcePerSquareInchPerMinute">PoundsForcePerSquareInchPerMinute</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPoundsForcePerSquareInchPerMinute property.")]
        public double PoundsForcePerSquareInchPerMinute => As(PressureChangeRateUnit.PoundForcePerSquareInchPerMinute);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.PoundForcePerSquareInchPerSecond">PoundsForcePerSquareInchPerSecond</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPoundsForcePerSquareInchPerSecond property.")]
        public double PoundsForcePerSquareInchPerSecond => As(PressureChangeRateUnit.PoundForcePerSquareInchPerSecond);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.AtmospherePerSecond">AtmospheresPerSecond</see>.
        /// </summary>
        public PressureChangeRate ToAtmospheresPerSecond => ToUnit(PressureChangeRateUnit.AtmospherePerSecond);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.KilopascalPerMinute">KilopascalsPerMinute</see>.
        /// </summary>
        public PressureChangeRate ToKilopascalsPerMinute => ToUnit(PressureChangeRateUnit.KilopascalPerMinute);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.KilopascalPerSecond">KilopascalsPerSecond</see>.
        /// </summary>
        public PressureChangeRate ToKilopascalsPerSecond => ToUnit(PressureChangeRateUnit.KilopascalPerSecond);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute">KilopoundsForcePerSquareInchPerMinute</see>.
        /// </summary>
        public PressureChangeRate ToKilopoundsForcePerSquareInchPerMinute => ToUnit(PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond">KilopoundsForcePerSquareInchPerSecond</see>.
        /// </summary>
        public PressureChangeRate ToKilopoundsForcePerSquareInchPerSecond => ToUnit(PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.MegapascalPerMinute">MegapascalsPerMinute</see>.
        /// </summary>
        public PressureChangeRate ToMegapascalsPerMinute => ToUnit(PressureChangeRateUnit.MegapascalPerMinute);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.MegapascalPerSecond">MegapascalsPerSecond</see>.
        /// </summary>
        public PressureChangeRate ToMegapascalsPerSecond => ToUnit(PressureChangeRateUnit.MegapascalPerSecond);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute">MegapoundsForcePerSquareInchPerMinute</see>.
        /// </summary>
        public PressureChangeRate ToMegapoundsForcePerSquareInchPerMinute => ToUnit(PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond">MegapoundsForcePerSquareInchPerSecond</see>.
        /// </summary>
        public PressureChangeRate ToMegapoundsForcePerSquareInchPerSecond => ToUnit(PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.MillimeterOfMercuryPerSecond">MillimetersOfMercuryPerSecond</see>.
        /// </summary>
        public PressureChangeRate ToMillimetersOfMercuryPerSecond => ToUnit(PressureChangeRateUnit.MillimeterOfMercuryPerSecond);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.PascalPerMinute">PascalsPerMinute</see>.
        /// </summary>
        public PressureChangeRate ToPascalsPerMinute => ToUnit(PressureChangeRateUnit.PascalPerMinute);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.PascalPerSecond">PascalsPerSecond</see>.
        /// </summary>
        public PressureChangeRate ToPascalsPerSecond => ToUnit(PressureChangeRateUnit.PascalPerSecond);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.PoundForcePerSquareInchPerMinute">PoundsForcePerSquareInchPerMinute</see>.
        /// </summary>
        public PressureChangeRate ToPoundsForcePerSquareInchPerMinute => ToUnit(PressureChangeRateUnit.PoundForcePerSquareInchPerMinute);

        /// <summary>
        ///     Gets this <see cref="PressureChangeRate"/> converted into <see cref="PressureChangeRateUnit.PoundForcePerSquareInchPerSecond">PoundsForcePerSquareInchPerSecond</see>.
        /// </summary>
        public PressureChangeRate ToPoundsForcePerSquareInchPerSecond => ToUnit(PressureChangeRateUnit.PoundForcePerSquareInchPerSecond);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="PressureChangeRate"/> from <see cref="PressureChangeRateUnit.AtmospherePerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureChangeRate FromAtmospheresPerSecond(double atmospherespersecond) => new PressureChangeRate(atmospherespersecond, PressureChangeRateUnit.AtmospherePerSecond);

        /// <summary>
        ///     Creates a <see cref="PressureChangeRate"/> from <see cref="PressureChangeRateUnit.KilopascalPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureChangeRate FromKilopascalsPerMinute(double kilopascalsperminute) => new PressureChangeRate(kilopascalsperminute, PressureChangeRateUnit.KilopascalPerMinute);

        /// <summary>
        ///     Creates a <see cref="PressureChangeRate"/> from <see cref="PressureChangeRateUnit.KilopascalPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureChangeRate FromKilopascalsPerSecond(double kilopascalspersecond) => new PressureChangeRate(kilopascalspersecond, PressureChangeRateUnit.KilopascalPerSecond);

        /// <summary>
        ///     Creates a <see cref="PressureChangeRate"/> from <see cref="PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureChangeRate FromKilopoundsForcePerSquareInchPerMinute(double kilopoundsforcepersquareinchperminute) => new PressureChangeRate(kilopoundsforcepersquareinchperminute, PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute);

        /// <summary>
        ///     Creates a <see cref="PressureChangeRate"/> from <see cref="PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureChangeRate FromKilopoundsForcePerSquareInchPerSecond(double kilopoundsforcepersquareinchpersecond) => new PressureChangeRate(kilopoundsforcepersquareinchpersecond, PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond);

        /// <summary>
        ///     Creates a <see cref="PressureChangeRate"/> from <see cref="PressureChangeRateUnit.MegapascalPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureChangeRate FromMegapascalsPerMinute(double megapascalsperminute) => new PressureChangeRate(megapascalsperminute, PressureChangeRateUnit.MegapascalPerMinute);

        /// <summary>
        ///     Creates a <see cref="PressureChangeRate"/> from <see cref="PressureChangeRateUnit.MegapascalPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureChangeRate FromMegapascalsPerSecond(double megapascalspersecond) => new PressureChangeRate(megapascalspersecond, PressureChangeRateUnit.MegapascalPerSecond);

        /// <summary>
        ///     Creates a <see cref="PressureChangeRate"/> from <see cref="PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureChangeRate FromMegapoundsForcePerSquareInchPerMinute(double megapoundsforcepersquareinchperminute) => new PressureChangeRate(megapoundsforcepersquareinchperminute, PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute);

        /// <summary>
        ///     Creates a <see cref="PressureChangeRate"/> from <see cref="PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureChangeRate FromMegapoundsForcePerSquareInchPerSecond(double megapoundsforcepersquareinchpersecond) => new PressureChangeRate(megapoundsforcepersquareinchpersecond, PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond);

        /// <summary>
        ///     Creates a <see cref="PressureChangeRate"/> from <see cref="PressureChangeRateUnit.MillimeterOfMercuryPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureChangeRate FromMillimetersOfMercuryPerSecond(double millimetersofmercurypersecond) => new PressureChangeRate(millimetersofmercurypersecond, PressureChangeRateUnit.MillimeterOfMercuryPerSecond);

        /// <summary>
        ///     Creates a <see cref="PressureChangeRate"/> from <see cref="PressureChangeRateUnit.PascalPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureChangeRate FromPascalsPerMinute(double pascalsperminute) => new PressureChangeRate(pascalsperminute, PressureChangeRateUnit.PascalPerMinute);

        /// <summary>
        ///     Creates a <see cref="PressureChangeRate"/> from <see cref="PressureChangeRateUnit.PascalPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureChangeRate FromPascalsPerSecond(double pascalspersecond) => new PressureChangeRate(pascalspersecond, PressureChangeRateUnit.PascalPerSecond);

        /// <summary>
        ///     Creates a <see cref="PressureChangeRate"/> from <see cref="PressureChangeRateUnit.PoundForcePerSquareInchPerMinute"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureChangeRate FromPoundsForcePerSquareInchPerMinute(double poundsforcepersquareinchperminute) => new PressureChangeRate(poundsforcepersquareinchperminute, PressureChangeRateUnit.PoundForcePerSquareInchPerMinute);

        /// <summary>
        ///     Creates a <see cref="PressureChangeRate"/> from <see cref="PressureChangeRateUnit.PoundForcePerSquareInchPerSecond"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureChangeRate FromPoundsForcePerSquareInchPerSecond(double poundsforcepersquareinchpersecond) => new PressureChangeRate(poundsforcepersquareinchpersecond, PressureChangeRateUnit.PoundForcePerSquareInchPerSecond);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PressureChangeRateUnit" /> to <see cref="PressureChangeRate" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>PressureChangeRate unit value.</returns>
        public static PressureChangeRate From(double value, PressureChangeRateUnit fromUnit)
        {
            return new PressureChangeRate(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PressureChangeRateUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public PressureChangeRate ToUnit(PressureChangeRateUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new PressureChangeRate(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                PressureChangeRateUnit.AtmospherePerSecond => _value * 1.01325 * 1e5,
                PressureChangeRateUnit.KilopascalPerMinute => (_value / 60) * 1e3d,
                PressureChangeRateUnit.KilopascalPerSecond => (_value) * 1e3d,
                PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute => (_value * 6.894757293168361e3 / 60) * 1e3d,
                PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond => (_value * 6.894757293168361e3) * 1e3d,
                PressureChangeRateUnit.MegapascalPerMinute => (_value / 60) * 1e6d,
                PressureChangeRateUnit.MegapascalPerSecond => (_value) * 1e6d,
                PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute => (_value * 6.894757293168361e3 / 60) * 1e6d,
                PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond => (_value * 6.894757293168361e3) * 1e6d,
                PressureChangeRateUnit.MillimeterOfMercuryPerSecond => _value * 133.322,
                PressureChangeRateUnit.PascalPerMinute => _value / 60,
                PressureChangeRateUnit.PascalPerSecond => _value,
                PressureChangeRateUnit.PoundForcePerSquareInchPerMinute => _value * 6.894757293168361e3 / 60,
                PressureChangeRateUnit.PoundForcePerSquareInchPerSecond => _value * 6.894757293168361e3,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(PressureChangeRateUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                PressureChangeRateUnit.AtmospherePerSecond => baseUnitValue / (1.01325 * 1e5),
                PressureChangeRateUnit.KilopascalPerMinute => (baseUnitValue * 60) / 1e3d,
                PressureChangeRateUnit.KilopascalPerSecond => (baseUnitValue) / 1e3d,
                PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute => (baseUnitValue / 6.894757293168361e3 * 60) / 1e3d,
                PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond => (baseUnitValue / 6.894757293168361e3) / 1e3d,
                PressureChangeRateUnit.MegapascalPerMinute => (baseUnitValue * 60) / 1e6d,
                PressureChangeRateUnit.MegapascalPerSecond => (baseUnitValue) / 1e6d,
                PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute => (baseUnitValue / 6.894757293168361e3 * 60) / 1e6d,
                PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond => (baseUnitValue / 6.894757293168361e3) / 1e6d,
                PressureChangeRateUnit.MillimeterOfMercuryPerSecond => baseUnitValue / 133.322,
                PressureChangeRateUnit.PascalPerMinute => baseUnitValue * 60,
                PressureChangeRateUnit.PascalPerSecond => baseUnitValue,
                PressureChangeRateUnit.PoundForcePerSquareInchPerMinute => baseUnitValue / 6.894757293168361e3 * 60,
                PressureChangeRateUnit.PoundForcePerSquareInchPerSecond => baseUnitValue / 6.894757293168361e3,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion
    }
}

