//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The amount of power in a volume.
    /// </summary>
    public struct  PowerDensity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PowerDensityUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public PowerDensityUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public PowerDensity(double value, PowerDensityUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static PowerDensityUnit BaseUnit { get; } = PowerDensityUnit.WattPerCubicMeter;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static PowerDensity MaxValue { get; } = new PowerDensity(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static PowerDensity MinValue { get; } = new PowerDensity(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static PowerDensity Zero { get; } = new PowerDensity(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DecawattPerCubicFoot">DecawattsPerCubicFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecawattsPerCubicFoot property.")]
        public double DecawattsPerCubicFoot => As(PowerDensityUnit.DecawattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DecawattPerCubicInch">DecawattsPerCubicInch</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecawattsPerCubicInch property.")]
        public double DecawattsPerCubicInch => As(PowerDensityUnit.DecawattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DecawattPerCubicMeter">DecawattsPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecawattsPerCubicMeter property.")]
        public double DecawattsPerCubicMeter => As(PowerDensityUnit.DecawattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DecawattPerLiter">DecawattsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecawattsPerLiter property.")]
        public double DecawattsPerLiter => As(PowerDensityUnit.DecawattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DeciwattPerCubicFoot">DeciwattsPerCubicFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDeciwattsPerCubicFoot property.")]
        public double DeciwattsPerCubicFoot => As(PowerDensityUnit.DeciwattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DeciwattPerCubicInch">DeciwattsPerCubicInch</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDeciwattsPerCubicInch property.")]
        public double DeciwattsPerCubicInch => As(PowerDensityUnit.DeciwattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DeciwattPerCubicMeter">DeciwattsPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDeciwattsPerCubicMeter property.")]
        public double DeciwattsPerCubicMeter => As(PowerDensityUnit.DeciwattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DeciwattPerLiter">DeciwattsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDeciwattsPerLiter property.")]
        public double DeciwattsPerLiter => As(PowerDensityUnit.DeciwattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.GigawattPerCubicFoot">GigawattsPerCubicFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGigawattsPerCubicFoot property.")]
        public double GigawattsPerCubicFoot => As(PowerDensityUnit.GigawattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.GigawattPerCubicInch">GigawattsPerCubicInch</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGigawattsPerCubicInch property.")]
        public double GigawattsPerCubicInch => As(PowerDensityUnit.GigawattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.GigawattPerCubicMeter">GigawattsPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGigawattsPerCubicMeter property.")]
        public double GigawattsPerCubicMeter => As(PowerDensityUnit.GigawattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.GigawattPerLiter">GigawattsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGigawattsPerLiter property.")]
        public double GigawattsPerLiter => As(PowerDensityUnit.GigawattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.KilowattPerCubicFoot">KilowattsPerCubicFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilowattsPerCubicFoot property.")]
        public double KilowattsPerCubicFoot => As(PowerDensityUnit.KilowattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.KilowattPerCubicInch">KilowattsPerCubicInch</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilowattsPerCubicInch property.")]
        public double KilowattsPerCubicInch => As(PowerDensityUnit.KilowattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.KilowattPerCubicMeter">KilowattsPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilowattsPerCubicMeter property.")]
        public double KilowattsPerCubicMeter => As(PowerDensityUnit.KilowattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.KilowattPerLiter">KilowattsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilowattsPerLiter property.")]
        public double KilowattsPerLiter => As(PowerDensityUnit.KilowattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MegawattPerCubicFoot">MegawattsPerCubicFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegawattsPerCubicFoot property.")]
        public double MegawattsPerCubicFoot => As(PowerDensityUnit.MegawattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MegawattPerCubicInch">MegawattsPerCubicInch</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegawattsPerCubicInch property.")]
        public double MegawattsPerCubicInch => As(PowerDensityUnit.MegawattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MegawattPerCubicMeter">MegawattsPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegawattsPerCubicMeter property.")]
        public double MegawattsPerCubicMeter => As(PowerDensityUnit.MegawattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MegawattPerLiter">MegawattsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegawattsPerLiter property.")]
        public double MegawattsPerLiter => As(PowerDensityUnit.MegawattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MicrowattPerCubicFoot">MicrowattsPerCubicFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicrowattsPerCubicFoot property.")]
        public double MicrowattsPerCubicFoot => As(PowerDensityUnit.MicrowattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MicrowattPerCubicInch">MicrowattsPerCubicInch</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicrowattsPerCubicInch property.")]
        public double MicrowattsPerCubicInch => As(PowerDensityUnit.MicrowattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MicrowattPerCubicMeter">MicrowattsPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicrowattsPerCubicMeter property.")]
        public double MicrowattsPerCubicMeter => As(PowerDensityUnit.MicrowattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MicrowattPerLiter">MicrowattsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicrowattsPerLiter property.")]
        public double MicrowattsPerLiter => As(PowerDensityUnit.MicrowattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MilliwattPerCubicFoot">MilliwattsPerCubicFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMilliwattsPerCubicFoot property.")]
        public double MilliwattsPerCubicFoot => As(PowerDensityUnit.MilliwattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MilliwattPerCubicInch">MilliwattsPerCubicInch</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMilliwattsPerCubicInch property.")]
        public double MilliwattsPerCubicInch => As(PowerDensityUnit.MilliwattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MilliwattPerCubicMeter">MilliwattsPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMilliwattsPerCubicMeter property.")]
        public double MilliwattsPerCubicMeter => As(PowerDensityUnit.MilliwattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MilliwattPerLiter">MilliwattsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMilliwattsPerLiter property.")]
        public double MilliwattsPerLiter => As(PowerDensityUnit.MilliwattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.NanowattPerCubicFoot">NanowattsPerCubicFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNanowattsPerCubicFoot property.")]
        public double NanowattsPerCubicFoot => As(PowerDensityUnit.NanowattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.NanowattPerCubicInch">NanowattsPerCubicInch</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNanowattsPerCubicInch property.")]
        public double NanowattsPerCubicInch => As(PowerDensityUnit.NanowattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.NanowattPerCubicMeter">NanowattsPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNanowattsPerCubicMeter property.")]
        public double NanowattsPerCubicMeter => As(PowerDensityUnit.NanowattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.NanowattPerLiter">NanowattsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNanowattsPerLiter property.")]
        public double NanowattsPerLiter => As(PowerDensityUnit.NanowattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.PicowattPerCubicFoot">PicowattsPerCubicFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPicowattsPerCubicFoot property.")]
        public double PicowattsPerCubicFoot => As(PowerDensityUnit.PicowattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.PicowattPerCubicInch">PicowattsPerCubicInch</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPicowattsPerCubicInch property.")]
        public double PicowattsPerCubicInch => As(PowerDensityUnit.PicowattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.PicowattPerCubicMeter">PicowattsPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPicowattsPerCubicMeter property.")]
        public double PicowattsPerCubicMeter => As(PowerDensityUnit.PicowattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.PicowattPerLiter">PicowattsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPicowattsPerLiter property.")]
        public double PicowattsPerLiter => As(PowerDensityUnit.PicowattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.TerawattPerCubicFoot">TerawattsPerCubicFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTerawattsPerCubicFoot property.")]
        public double TerawattsPerCubicFoot => As(PowerDensityUnit.TerawattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.TerawattPerCubicInch">TerawattsPerCubicInch</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTerawattsPerCubicInch property.")]
        public double TerawattsPerCubicInch => As(PowerDensityUnit.TerawattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.TerawattPerCubicMeter">TerawattsPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTerawattsPerCubicMeter property.")]
        public double TerawattsPerCubicMeter => As(PowerDensityUnit.TerawattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.TerawattPerLiter">TerawattsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTerawattsPerLiter property.")]
        public double TerawattsPerLiter => As(PowerDensityUnit.TerawattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.WattPerCubicFoot">WattsPerCubicFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToWattsPerCubicFoot property.")]
        public double WattsPerCubicFoot => As(PowerDensityUnit.WattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.WattPerCubicInch">WattsPerCubicInch</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToWattsPerCubicInch property.")]
        public double WattsPerCubicInch => As(PowerDensityUnit.WattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.WattPerCubicMeter">WattsPerCubicMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToWattsPerCubicMeter property.")]
        public double WattsPerCubicMeter => As(PowerDensityUnit.WattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.WattPerLiter">WattsPerLiter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToWattsPerLiter property.")]
        public double WattsPerLiter => As(PowerDensityUnit.WattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DecawattPerCubicFoot">DecawattsPerCubicFoot</see>.
        /// </summary>
        public PowerDensity ToDecawattsPerCubicFoot => ToUnit(PowerDensityUnit.DecawattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DecawattPerCubicInch">DecawattsPerCubicInch</see>.
        /// </summary>
        public PowerDensity ToDecawattsPerCubicInch => ToUnit(PowerDensityUnit.DecawattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DecawattPerCubicMeter">DecawattsPerCubicMeter</see>.
        /// </summary>
        public PowerDensity ToDecawattsPerCubicMeter => ToUnit(PowerDensityUnit.DecawattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DecawattPerLiter">DecawattsPerLiter</see>.
        /// </summary>
        public PowerDensity ToDecawattsPerLiter => ToUnit(PowerDensityUnit.DecawattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DeciwattPerCubicFoot">DeciwattsPerCubicFoot</see>.
        /// </summary>
        public PowerDensity ToDeciwattsPerCubicFoot => ToUnit(PowerDensityUnit.DeciwattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DeciwattPerCubicInch">DeciwattsPerCubicInch</see>.
        /// </summary>
        public PowerDensity ToDeciwattsPerCubicInch => ToUnit(PowerDensityUnit.DeciwattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DeciwattPerCubicMeter">DeciwattsPerCubicMeter</see>.
        /// </summary>
        public PowerDensity ToDeciwattsPerCubicMeter => ToUnit(PowerDensityUnit.DeciwattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.DeciwattPerLiter">DeciwattsPerLiter</see>.
        /// </summary>
        public PowerDensity ToDeciwattsPerLiter => ToUnit(PowerDensityUnit.DeciwattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.GigawattPerCubicFoot">GigawattsPerCubicFoot</see>.
        /// </summary>
        public PowerDensity ToGigawattsPerCubicFoot => ToUnit(PowerDensityUnit.GigawattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.GigawattPerCubicInch">GigawattsPerCubicInch</see>.
        /// </summary>
        public PowerDensity ToGigawattsPerCubicInch => ToUnit(PowerDensityUnit.GigawattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.GigawattPerCubicMeter">GigawattsPerCubicMeter</see>.
        /// </summary>
        public PowerDensity ToGigawattsPerCubicMeter => ToUnit(PowerDensityUnit.GigawattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.GigawattPerLiter">GigawattsPerLiter</see>.
        /// </summary>
        public PowerDensity ToGigawattsPerLiter => ToUnit(PowerDensityUnit.GigawattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.KilowattPerCubicFoot">KilowattsPerCubicFoot</see>.
        /// </summary>
        public PowerDensity ToKilowattsPerCubicFoot => ToUnit(PowerDensityUnit.KilowattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.KilowattPerCubicInch">KilowattsPerCubicInch</see>.
        /// </summary>
        public PowerDensity ToKilowattsPerCubicInch => ToUnit(PowerDensityUnit.KilowattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.KilowattPerCubicMeter">KilowattsPerCubicMeter</see>.
        /// </summary>
        public PowerDensity ToKilowattsPerCubicMeter => ToUnit(PowerDensityUnit.KilowattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.KilowattPerLiter">KilowattsPerLiter</see>.
        /// </summary>
        public PowerDensity ToKilowattsPerLiter => ToUnit(PowerDensityUnit.KilowattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MegawattPerCubicFoot">MegawattsPerCubicFoot</see>.
        /// </summary>
        public PowerDensity ToMegawattsPerCubicFoot => ToUnit(PowerDensityUnit.MegawattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MegawattPerCubicInch">MegawattsPerCubicInch</see>.
        /// </summary>
        public PowerDensity ToMegawattsPerCubicInch => ToUnit(PowerDensityUnit.MegawattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MegawattPerCubicMeter">MegawattsPerCubicMeter</see>.
        /// </summary>
        public PowerDensity ToMegawattsPerCubicMeter => ToUnit(PowerDensityUnit.MegawattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MegawattPerLiter">MegawattsPerLiter</see>.
        /// </summary>
        public PowerDensity ToMegawattsPerLiter => ToUnit(PowerDensityUnit.MegawattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MicrowattPerCubicFoot">MicrowattsPerCubicFoot</see>.
        /// </summary>
        public PowerDensity ToMicrowattsPerCubicFoot => ToUnit(PowerDensityUnit.MicrowattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MicrowattPerCubicInch">MicrowattsPerCubicInch</see>.
        /// </summary>
        public PowerDensity ToMicrowattsPerCubicInch => ToUnit(PowerDensityUnit.MicrowattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MicrowattPerCubicMeter">MicrowattsPerCubicMeter</see>.
        /// </summary>
        public PowerDensity ToMicrowattsPerCubicMeter => ToUnit(PowerDensityUnit.MicrowattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MicrowattPerLiter">MicrowattsPerLiter</see>.
        /// </summary>
        public PowerDensity ToMicrowattsPerLiter => ToUnit(PowerDensityUnit.MicrowattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MilliwattPerCubicFoot">MilliwattsPerCubicFoot</see>.
        /// </summary>
        public PowerDensity ToMilliwattsPerCubicFoot => ToUnit(PowerDensityUnit.MilliwattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MilliwattPerCubicInch">MilliwattsPerCubicInch</see>.
        /// </summary>
        public PowerDensity ToMilliwattsPerCubicInch => ToUnit(PowerDensityUnit.MilliwattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MilliwattPerCubicMeter">MilliwattsPerCubicMeter</see>.
        /// </summary>
        public PowerDensity ToMilliwattsPerCubicMeter => ToUnit(PowerDensityUnit.MilliwattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.MilliwattPerLiter">MilliwattsPerLiter</see>.
        /// </summary>
        public PowerDensity ToMilliwattsPerLiter => ToUnit(PowerDensityUnit.MilliwattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.NanowattPerCubicFoot">NanowattsPerCubicFoot</see>.
        /// </summary>
        public PowerDensity ToNanowattsPerCubicFoot => ToUnit(PowerDensityUnit.NanowattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.NanowattPerCubicInch">NanowattsPerCubicInch</see>.
        /// </summary>
        public PowerDensity ToNanowattsPerCubicInch => ToUnit(PowerDensityUnit.NanowattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.NanowattPerCubicMeter">NanowattsPerCubicMeter</see>.
        /// </summary>
        public PowerDensity ToNanowattsPerCubicMeter => ToUnit(PowerDensityUnit.NanowattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.NanowattPerLiter">NanowattsPerLiter</see>.
        /// </summary>
        public PowerDensity ToNanowattsPerLiter => ToUnit(PowerDensityUnit.NanowattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.PicowattPerCubicFoot">PicowattsPerCubicFoot</see>.
        /// </summary>
        public PowerDensity ToPicowattsPerCubicFoot => ToUnit(PowerDensityUnit.PicowattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.PicowattPerCubicInch">PicowattsPerCubicInch</see>.
        /// </summary>
        public PowerDensity ToPicowattsPerCubicInch => ToUnit(PowerDensityUnit.PicowattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.PicowattPerCubicMeter">PicowattsPerCubicMeter</see>.
        /// </summary>
        public PowerDensity ToPicowattsPerCubicMeter => ToUnit(PowerDensityUnit.PicowattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.PicowattPerLiter">PicowattsPerLiter</see>.
        /// </summary>
        public PowerDensity ToPicowattsPerLiter => ToUnit(PowerDensityUnit.PicowattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.TerawattPerCubicFoot">TerawattsPerCubicFoot</see>.
        /// </summary>
        public PowerDensity ToTerawattsPerCubicFoot => ToUnit(PowerDensityUnit.TerawattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.TerawattPerCubicInch">TerawattsPerCubicInch</see>.
        /// </summary>
        public PowerDensity ToTerawattsPerCubicInch => ToUnit(PowerDensityUnit.TerawattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.TerawattPerCubicMeter">TerawattsPerCubicMeter</see>.
        /// </summary>
        public PowerDensity ToTerawattsPerCubicMeter => ToUnit(PowerDensityUnit.TerawattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.TerawattPerLiter">TerawattsPerLiter</see>.
        /// </summary>
        public PowerDensity ToTerawattsPerLiter => ToUnit(PowerDensityUnit.TerawattPerLiter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.WattPerCubicFoot">WattsPerCubicFoot</see>.
        /// </summary>
        public PowerDensity ToWattsPerCubicFoot => ToUnit(PowerDensityUnit.WattPerCubicFoot);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.WattPerCubicInch">WattsPerCubicInch</see>.
        /// </summary>
        public PowerDensity ToWattsPerCubicInch => ToUnit(PowerDensityUnit.WattPerCubicInch);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.WattPerCubicMeter">WattsPerCubicMeter</see>.
        /// </summary>
        public PowerDensity ToWattsPerCubicMeter => ToUnit(PowerDensityUnit.WattPerCubicMeter);

        /// <summary>
        ///     Gets this <see cref="PowerDensity"/> converted into <see cref="PowerDensityUnit.WattPerLiter">WattsPerLiter</see>.
        /// </summary>
        public PowerDensity ToWattsPerLiter => ToUnit(PowerDensityUnit.WattPerLiter);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.DecawattPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDecawattsPerCubicFoot(double decawattspercubicfoot) => new PowerDensity(decawattspercubicfoot, PowerDensityUnit.DecawattPerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.DecawattPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDecawattsPerCubicInch(double decawattspercubicinch) => new PowerDensity(decawattspercubicinch, PowerDensityUnit.DecawattPerCubicInch);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.DecawattPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDecawattsPerCubicMeter(double decawattspercubicmeter) => new PowerDensity(decawattspercubicmeter, PowerDensityUnit.DecawattPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.DecawattPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDecawattsPerLiter(double decawattsperliter) => new PowerDensity(decawattsperliter, PowerDensityUnit.DecawattPerLiter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.DeciwattPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDeciwattsPerCubicFoot(double deciwattspercubicfoot) => new PowerDensity(deciwattspercubicfoot, PowerDensityUnit.DeciwattPerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.DeciwattPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDeciwattsPerCubicInch(double deciwattspercubicinch) => new PowerDensity(deciwattspercubicinch, PowerDensityUnit.DeciwattPerCubicInch);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.DeciwattPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDeciwattsPerCubicMeter(double deciwattspercubicmeter) => new PowerDensity(deciwattspercubicmeter, PowerDensityUnit.DeciwattPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.DeciwattPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromDeciwattsPerLiter(double deciwattsperliter) => new PowerDensity(deciwattsperliter, PowerDensityUnit.DeciwattPerLiter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.GigawattPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromGigawattsPerCubicFoot(double gigawattspercubicfoot) => new PowerDensity(gigawattspercubicfoot, PowerDensityUnit.GigawattPerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.GigawattPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromGigawattsPerCubicInch(double gigawattspercubicinch) => new PowerDensity(gigawattspercubicinch, PowerDensityUnit.GigawattPerCubicInch);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.GigawattPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromGigawattsPerCubicMeter(double gigawattspercubicmeter) => new PowerDensity(gigawattspercubicmeter, PowerDensityUnit.GigawattPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.GigawattPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromGigawattsPerLiter(double gigawattsperliter) => new PowerDensity(gigawattsperliter, PowerDensityUnit.GigawattPerLiter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.KilowattPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromKilowattsPerCubicFoot(double kilowattspercubicfoot) => new PowerDensity(kilowattspercubicfoot, PowerDensityUnit.KilowattPerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.KilowattPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromKilowattsPerCubicInch(double kilowattspercubicinch) => new PowerDensity(kilowattspercubicinch, PowerDensityUnit.KilowattPerCubicInch);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.KilowattPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromKilowattsPerCubicMeter(double kilowattspercubicmeter) => new PowerDensity(kilowattspercubicmeter, PowerDensityUnit.KilowattPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.KilowattPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromKilowattsPerLiter(double kilowattsperliter) => new PowerDensity(kilowattsperliter, PowerDensityUnit.KilowattPerLiter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.MegawattPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMegawattsPerCubicFoot(double megawattspercubicfoot) => new PowerDensity(megawattspercubicfoot, PowerDensityUnit.MegawattPerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.MegawattPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMegawattsPerCubicInch(double megawattspercubicinch) => new PowerDensity(megawattspercubicinch, PowerDensityUnit.MegawattPerCubicInch);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.MegawattPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMegawattsPerCubicMeter(double megawattspercubicmeter) => new PowerDensity(megawattspercubicmeter, PowerDensityUnit.MegawattPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.MegawattPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMegawattsPerLiter(double megawattsperliter) => new PowerDensity(megawattsperliter, PowerDensityUnit.MegawattPerLiter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.MicrowattPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMicrowattsPerCubicFoot(double microwattspercubicfoot) => new PowerDensity(microwattspercubicfoot, PowerDensityUnit.MicrowattPerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.MicrowattPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMicrowattsPerCubicInch(double microwattspercubicinch) => new PowerDensity(microwattspercubicinch, PowerDensityUnit.MicrowattPerCubicInch);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.MicrowattPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMicrowattsPerCubicMeter(double microwattspercubicmeter) => new PowerDensity(microwattspercubicmeter, PowerDensityUnit.MicrowattPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.MicrowattPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMicrowattsPerLiter(double microwattsperliter) => new PowerDensity(microwattsperliter, PowerDensityUnit.MicrowattPerLiter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.MilliwattPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMilliwattsPerCubicFoot(double milliwattspercubicfoot) => new PowerDensity(milliwattspercubicfoot, PowerDensityUnit.MilliwattPerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.MilliwattPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMilliwattsPerCubicInch(double milliwattspercubicinch) => new PowerDensity(milliwattspercubicinch, PowerDensityUnit.MilliwattPerCubicInch);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.MilliwattPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMilliwattsPerCubicMeter(double milliwattspercubicmeter) => new PowerDensity(milliwattspercubicmeter, PowerDensityUnit.MilliwattPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.MilliwattPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromMilliwattsPerLiter(double milliwattsperliter) => new PowerDensity(milliwattsperliter, PowerDensityUnit.MilliwattPerLiter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.NanowattPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromNanowattsPerCubicFoot(double nanowattspercubicfoot) => new PowerDensity(nanowattspercubicfoot, PowerDensityUnit.NanowattPerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.NanowattPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromNanowattsPerCubicInch(double nanowattspercubicinch) => new PowerDensity(nanowattspercubicinch, PowerDensityUnit.NanowattPerCubicInch);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.NanowattPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromNanowattsPerCubicMeter(double nanowattspercubicmeter) => new PowerDensity(nanowattspercubicmeter, PowerDensityUnit.NanowattPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.NanowattPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromNanowattsPerLiter(double nanowattsperliter) => new PowerDensity(nanowattsperliter, PowerDensityUnit.NanowattPerLiter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.PicowattPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromPicowattsPerCubicFoot(double picowattspercubicfoot) => new PowerDensity(picowattspercubicfoot, PowerDensityUnit.PicowattPerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.PicowattPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromPicowattsPerCubicInch(double picowattspercubicinch) => new PowerDensity(picowattspercubicinch, PowerDensityUnit.PicowattPerCubicInch);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.PicowattPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromPicowattsPerCubicMeter(double picowattspercubicmeter) => new PowerDensity(picowattspercubicmeter, PowerDensityUnit.PicowattPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.PicowattPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromPicowattsPerLiter(double picowattsperliter) => new PowerDensity(picowattsperliter, PowerDensityUnit.PicowattPerLiter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.TerawattPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromTerawattsPerCubicFoot(double terawattspercubicfoot) => new PowerDensity(terawattspercubicfoot, PowerDensityUnit.TerawattPerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.TerawattPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromTerawattsPerCubicInch(double terawattspercubicinch) => new PowerDensity(terawattspercubicinch, PowerDensityUnit.TerawattPerCubicInch);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.TerawattPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromTerawattsPerCubicMeter(double terawattspercubicmeter) => new PowerDensity(terawattspercubicmeter, PowerDensityUnit.TerawattPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.TerawattPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromTerawattsPerLiter(double terawattsperliter) => new PowerDensity(terawattsperliter, PowerDensityUnit.TerawattPerLiter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.WattPerCubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromWattsPerCubicFoot(double wattspercubicfoot) => new PowerDensity(wattspercubicfoot, PowerDensityUnit.WattPerCubicFoot);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.WattPerCubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromWattsPerCubicInch(double wattspercubicinch) => new PowerDensity(wattspercubicinch, PowerDensityUnit.WattPerCubicInch);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.WattPerCubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromWattsPerCubicMeter(double wattspercubicmeter) => new PowerDensity(wattspercubicmeter, PowerDensityUnit.WattPerCubicMeter);

        /// <summary>
        ///     Creates a <see cref="PowerDensity"/> from <see cref="PowerDensityUnit.WattPerLiter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PowerDensity FromWattsPerLiter(double wattsperliter) => new PowerDensity(wattsperliter, PowerDensityUnit.WattPerLiter);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PowerDensityUnit" /> to <see cref="PowerDensity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>PowerDensity unit value.</returns>
        public static PowerDensity From(double value, PowerDensityUnit fromUnit)
        {
            return new PowerDensity(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PowerDensityUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public PowerDensity ToUnit(PowerDensityUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new PowerDensity(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                PowerDensityUnit.DecawattPerCubicFoot => (_value * 3.531466672148859e1) * 1e1d,
                PowerDensityUnit.DecawattPerCubicInch => (_value * 6.102374409473228e4) * 1e1d,
                PowerDensityUnit.DecawattPerCubicMeter => (_value) * 1e1d,
                PowerDensityUnit.DecawattPerLiter => (_value * 1.0e3) * 1e1d,
                PowerDensityUnit.DeciwattPerCubicFoot => (_value * 3.531466672148859e1) * 1e-1d,
                PowerDensityUnit.DeciwattPerCubicInch => (_value * 6.102374409473228e4) * 1e-1d,
                PowerDensityUnit.DeciwattPerCubicMeter => (_value) * 1e-1d,
                PowerDensityUnit.DeciwattPerLiter => (_value * 1.0e3) * 1e-1d,
                PowerDensityUnit.GigawattPerCubicFoot => (_value * 3.531466672148859e1) * 1e9d,
                PowerDensityUnit.GigawattPerCubicInch => (_value * 6.102374409473228e4) * 1e9d,
                PowerDensityUnit.GigawattPerCubicMeter => (_value) * 1e9d,
                PowerDensityUnit.GigawattPerLiter => (_value * 1.0e3) * 1e9d,
                PowerDensityUnit.KilowattPerCubicFoot => (_value * 3.531466672148859e1) * 1e3d,
                PowerDensityUnit.KilowattPerCubicInch => (_value * 6.102374409473228e4) * 1e3d,
                PowerDensityUnit.KilowattPerCubicMeter => (_value) * 1e3d,
                PowerDensityUnit.KilowattPerLiter => (_value * 1.0e3) * 1e3d,
                PowerDensityUnit.MegawattPerCubicFoot => (_value * 3.531466672148859e1) * 1e6d,
                PowerDensityUnit.MegawattPerCubicInch => (_value * 6.102374409473228e4) * 1e6d,
                PowerDensityUnit.MegawattPerCubicMeter => (_value) * 1e6d,
                PowerDensityUnit.MegawattPerLiter => (_value * 1.0e3) * 1e6d,
                PowerDensityUnit.MicrowattPerCubicFoot => (_value * 3.531466672148859e1) * 1e-6d,
                PowerDensityUnit.MicrowattPerCubicInch => (_value * 6.102374409473228e4) * 1e-6d,
                PowerDensityUnit.MicrowattPerCubicMeter => (_value) * 1e-6d,
                PowerDensityUnit.MicrowattPerLiter => (_value * 1.0e3) * 1e-6d,
                PowerDensityUnit.MilliwattPerCubicFoot => (_value * 3.531466672148859e1) * 1e-3d,
                PowerDensityUnit.MilliwattPerCubicInch => (_value * 6.102374409473228e4) * 1e-3d,
                PowerDensityUnit.MilliwattPerCubicMeter => (_value) * 1e-3d,
                PowerDensityUnit.MilliwattPerLiter => (_value * 1.0e3) * 1e-3d,
                PowerDensityUnit.NanowattPerCubicFoot => (_value * 3.531466672148859e1) * 1e-9d,
                PowerDensityUnit.NanowattPerCubicInch => (_value * 6.102374409473228e4) * 1e-9d,
                PowerDensityUnit.NanowattPerCubicMeter => (_value) * 1e-9d,
                PowerDensityUnit.NanowattPerLiter => (_value * 1.0e3) * 1e-9d,
                PowerDensityUnit.PicowattPerCubicFoot => (_value * 3.531466672148859e1) * 1e-12d,
                PowerDensityUnit.PicowattPerCubicInch => (_value * 6.102374409473228e4) * 1e-12d,
                PowerDensityUnit.PicowattPerCubicMeter => (_value) * 1e-12d,
                PowerDensityUnit.PicowattPerLiter => (_value * 1.0e3) * 1e-12d,
                PowerDensityUnit.TerawattPerCubicFoot => (_value * 3.531466672148859e1) * 1e12d,
                PowerDensityUnit.TerawattPerCubicInch => (_value * 6.102374409473228e4) * 1e12d,
                PowerDensityUnit.TerawattPerCubicMeter => (_value) * 1e12d,
                PowerDensityUnit.TerawattPerLiter => (_value * 1.0e3) * 1e12d,
                PowerDensityUnit.WattPerCubicFoot => _value * 3.531466672148859e1,
                PowerDensityUnit.WattPerCubicInch => _value * 6.102374409473228e4,
                PowerDensityUnit.WattPerCubicMeter => _value,
                PowerDensityUnit.WattPerLiter => _value * 1.0e3,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(PowerDensityUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                PowerDensityUnit.DecawattPerCubicFoot => (baseUnitValue / 3.531466672148859e1) / 1e1d,
                PowerDensityUnit.DecawattPerCubicInch => (baseUnitValue / 6.102374409473228e4) / 1e1d,
                PowerDensityUnit.DecawattPerCubicMeter => (baseUnitValue) / 1e1d,
                PowerDensityUnit.DecawattPerLiter => (baseUnitValue / 1.0e3) / 1e1d,
                PowerDensityUnit.DeciwattPerCubicFoot => (baseUnitValue / 3.531466672148859e1) / 1e-1d,
                PowerDensityUnit.DeciwattPerCubicInch => (baseUnitValue / 6.102374409473228e4) / 1e-1d,
                PowerDensityUnit.DeciwattPerCubicMeter => (baseUnitValue) / 1e-1d,
                PowerDensityUnit.DeciwattPerLiter => (baseUnitValue / 1.0e3) / 1e-1d,
                PowerDensityUnit.GigawattPerCubicFoot => (baseUnitValue / 3.531466672148859e1) / 1e9d,
                PowerDensityUnit.GigawattPerCubicInch => (baseUnitValue / 6.102374409473228e4) / 1e9d,
                PowerDensityUnit.GigawattPerCubicMeter => (baseUnitValue) / 1e9d,
                PowerDensityUnit.GigawattPerLiter => (baseUnitValue / 1.0e3) / 1e9d,
                PowerDensityUnit.KilowattPerCubicFoot => (baseUnitValue / 3.531466672148859e1) / 1e3d,
                PowerDensityUnit.KilowattPerCubicInch => (baseUnitValue / 6.102374409473228e4) / 1e3d,
                PowerDensityUnit.KilowattPerCubicMeter => (baseUnitValue) / 1e3d,
                PowerDensityUnit.KilowattPerLiter => (baseUnitValue / 1.0e3) / 1e3d,
                PowerDensityUnit.MegawattPerCubicFoot => (baseUnitValue / 3.531466672148859e1) / 1e6d,
                PowerDensityUnit.MegawattPerCubicInch => (baseUnitValue / 6.102374409473228e4) / 1e6d,
                PowerDensityUnit.MegawattPerCubicMeter => (baseUnitValue) / 1e6d,
                PowerDensityUnit.MegawattPerLiter => (baseUnitValue / 1.0e3) / 1e6d,
                PowerDensityUnit.MicrowattPerCubicFoot => (baseUnitValue / 3.531466672148859e1) / 1e-6d,
                PowerDensityUnit.MicrowattPerCubicInch => (baseUnitValue / 6.102374409473228e4) / 1e-6d,
                PowerDensityUnit.MicrowattPerCubicMeter => (baseUnitValue) / 1e-6d,
                PowerDensityUnit.MicrowattPerLiter => (baseUnitValue / 1.0e3) / 1e-6d,
                PowerDensityUnit.MilliwattPerCubicFoot => (baseUnitValue / 3.531466672148859e1) / 1e-3d,
                PowerDensityUnit.MilliwattPerCubicInch => (baseUnitValue / 6.102374409473228e4) / 1e-3d,
                PowerDensityUnit.MilliwattPerCubicMeter => (baseUnitValue) / 1e-3d,
                PowerDensityUnit.MilliwattPerLiter => (baseUnitValue / 1.0e3) / 1e-3d,
                PowerDensityUnit.NanowattPerCubicFoot => (baseUnitValue / 3.531466672148859e1) / 1e-9d,
                PowerDensityUnit.NanowattPerCubicInch => (baseUnitValue / 6.102374409473228e4) / 1e-9d,
                PowerDensityUnit.NanowattPerCubicMeter => (baseUnitValue) / 1e-9d,
                PowerDensityUnit.NanowattPerLiter => (baseUnitValue / 1.0e3) / 1e-9d,
                PowerDensityUnit.PicowattPerCubicFoot => (baseUnitValue / 3.531466672148859e1) / 1e-12d,
                PowerDensityUnit.PicowattPerCubicInch => (baseUnitValue / 6.102374409473228e4) / 1e-12d,
                PowerDensityUnit.PicowattPerCubicMeter => (baseUnitValue) / 1e-12d,
                PowerDensityUnit.PicowattPerLiter => (baseUnitValue / 1.0e3) / 1e-12d,
                PowerDensityUnit.TerawattPerCubicFoot => (baseUnitValue / 3.531466672148859e1) / 1e12d,
                PowerDensityUnit.TerawattPerCubicInch => (baseUnitValue / 6.102374409473228e4) / 1e12d,
                PowerDensityUnit.TerawattPerCubicMeter => (baseUnitValue) / 1e12d,
                PowerDensityUnit.TerawattPerLiter => (baseUnitValue / 1.0e3) / 1e12d,
                PowerDensityUnit.WattPerCubicFoot => baseUnitValue / 3.531466672148859e1,
                PowerDensityUnit.WattPerCubicInch => baseUnitValue / 6.102374409473228e4,
                PowerDensityUnit.WattPerCubicMeter => baseUnitValue,
                PowerDensityUnit.WattPerLiter => baseUnitValue / 1.0e3,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion
    }
}

