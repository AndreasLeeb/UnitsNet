//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.[1] Volume is often quantified numerically using the SI derived unit, the cubic metre. The volume of a container is generally understood to be the capacity of the container, i. e. the amount of fluid (gas or liquid) that the container could hold, rather than the amount of space the container itself displaces.
    /// </summary>
    public struct  Volume
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public VolumeUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Volume(double value, VolumeUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static VolumeUnit BaseUnit { get; } = VolumeUnit.CubicMeter;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static Volume MaxValue { get; } = new Volume(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static Volume MinValue { get; } = new Volume(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Volume Zero { get; } = new Volume(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.AcreFoot">AcreFeet</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToAcreFeet property.")]
        public double AcreFeet => As(VolumeUnit.AcreFoot);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.AuTablespoon">AuTablespoons</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToAuTablespoons property.")]
        public double AuTablespoons => As(VolumeUnit.AuTablespoon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.BoardFoot">BoardFeet</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToBoardFeet property.")]
        public double BoardFeet => As(VolumeUnit.BoardFoot);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Centiliter">Centiliters</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCentiliters property.")]
        public double Centiliters => As(VolumeUnit.Centiliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicCentimeter">CubicCentimeters</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicCentimeters property.")]
        public double CubicCentimeters => As(VolumeUnit.CubicCentimeter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicDecimeter">CubicDecimeters</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicDecimeters property.")]
        public double CubicDecimeters => As(VolumeUnit.CubicDecimeter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicFoot">CubicFeet</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicFeet property.")]
        public double CubicFeet => As(VolumeUnit.CubicFoot);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicHectometer">CubicHectometers</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicHectometers property.")]
        public double CubicHectometers => As(VolumeUnit.CubicHectometer);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicInch">CubicInches</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicInches property.")]
        public double CubicInches => As(VolumeUnit.CubicInch);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicKilometer">CubicKilometers</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicKilometers property.")]
        public double CubicKilometers => As(VolumeUnit.CubicKilometer);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicMeter">CubicMeters</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicMeters property.")]
        public double CubicMeters => As(VolumeUnit.CubicMeter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicMicrometer">CubicMicrometers</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicMicrometers property.")]
        public double CubicMicrometers => As(VolumeUnit.CubicMicrometer);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicMile">CubicMiles</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicMiles property.")]
        public double CubicMiles => As(VolumeUnit.CubicMile);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicMillimeter">CubicMillimeters</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicMillimeters property.")]
        public double CubicMillimeters => As(VolumeUnit.CubicMillimeter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicYard">CubicYards</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCubicYards property.")]
        public double CubicYards => As(VolumeUnit.CubicYard);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Decaliter">Decaliters</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecaliters property.")]
        public double Decaliters => As(VolumeUnit.Decaliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.DecausGallon">DecausGallons</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecausGallons property.")]
        public double DecausGallons => As(VolumeUnit.DecausGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Deciliter">Deciliters</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDeciliters property.")]
        public double Deciliters => As(VolumeUnit.Deciliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.DeciusGallon">DeciusGallons</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDeciusGallons property.")]
        public double DeciusGallons => As(VolumeUnit.DeciusGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.HectocubicFoot">HectocubicFeet</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToHectocubicFeet property.")]
        public double HectocubicFeet => As(VolumeUnit.HectocubicFoot);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.HectocubicMeter">HectocubicMeters</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToHectocubicMeters property.")]
        public double HectocubicMeters => As(VolumeUnit.HectocubicMeter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Hectoliter">Hectoliters</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToHectoliters property.")]
        public double Hectoliters => As(VolumeUnit.Hectoliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.HectousGallon">HectousGallons</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToHectousGallons property.")]
        public double HectousGallons => As(VolumeUnit.HectousGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.ImperialBeerBarrel">ImperialBeerBarrels</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToImperialBeerBarrels property.")]
        public double ImperialBeerBarrels => As(VolumeUnit.ImperialBeerBarrel);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.ImperialGallon">ImperialGallons</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToImperialGallons property.")]
        public double ImperialGallons => As(VolumeUnit.ImperialGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.ImperialOunce">ImperialOunces</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToImperialOunces property.")]
        public double ImperialOunces => As(VolumeUnit.ImperialOunce);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.ImperialPint">ImperialPints</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToImperialPints property.")]
        public double ImperialPints => As(VolumeUnit.ImperialPint);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.KilocubicFoot">KilocubicFeet</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilocubicFeet property.")]
        public double KilocubicFeet => As(VolumeUnit.KilocubicFoot);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.KilocubicMeter">KilocubicMeters</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilocubicMeters property.")]
        public double KilocubicMeters => As(VolumeUnit.KilocubicMeter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.KiloimperialGallon">KiloimperialGallons</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKiloimperialGallons property.")]
        public double KiloimperialGallons => As(VolumeUnit.KiloimperialGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Kiloliter">Kiloliters</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKiloliters property.")]
        public double Kiloliters => As(VolumeUnit.Kiloliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.KilousGallon">KilousGallons</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilousGallons property.")]
        public double KilousGallons => As(VolumeUnit.KilousGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Liter">Liters</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToLiters property.")]
        public double Liters => As(VolumeUnit.Liter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.MegacubicFoot">MegacubicFeet</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegacubicFeet property.")]
        public double MegacubicFeet => As(VolumeUnit.MegacubicFoot);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.MegaimperialGallon">MegaimperialGallons</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegaimperialGallons property.")]
        public double MegaimperialGallons => As(VolumeUnit.MegaimperialGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Megaliter">Megaliters</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegaliters property.")]
        public double Megaliters => As(VolumeUnit.Megaliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.MegausGallon">MegausGallons</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegausGallons property.")]
        public double MegausGallons => As(VolumeUnit.MegausGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.MetricCup">MetricCups</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMetricCups property.")]
        public double MetricCups => As(VolumeUnit.MetricCup);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.MetricTeaspoon">MetricTeaspoons</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMetricTeaspoons property.")]
        public double MetricTeaspoons => As(VolumeUnit.MetricTeaspoon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Microliter">Microliters</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicroliters property.")]
        public double Microliters => As(VolumeUnit.Microliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Milliliter">Milliliters</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMilliliters property.")]
        public double Milliliters => As(VolumeUnit.Milliliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.OilBarrel">OilBarrels</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToOilBarrels property.")]
        public double OilBarrels => As(VolumeUnit.OilBarrel);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UkTablespoon">UkTablespoons</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUkTablespoons property.")]
        public double UkTablespoons => As(VolumeUnit.UkTablespoon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsBeerBarrel">UsBeerBarrels</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUsBeerBarrels property.")]
        public double UsBeerBarrels => As(VolumeUnit.UsBeerBarrel);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsCustomaryCup">UsCustomaryCups</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUsCustomaryCups property.")]
        public double UsCustomaryCups => As(VolumeUnit.UsCustomaryCup);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsGallon">UsGallons</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUsGallons property.")]
        public double UsGallons => As(VolumeUnit.UsGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsLegalCup">UsLegalCups</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUsLegalCups property.")]
        public double UsLegalCups => As(VolumeUnit.UsLegalCup);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsOunce">UsOunces</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUsOunces property.")]
        public double UsOunces => As(VolumeUnit.UsOunce);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsPint">UsPints</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUsPints property.")]
        public double UsPints => As(VolumeUnit.UsPint);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsQuart">UsQuarts</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUsQuarts property.")]
        public double UsQuarts => As(VolumeUnit.UsQuart);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsTablespoon">UsTablespoons</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUsTablespoons property.")]
        public double UsTablespoons => As(VolumeUnit.UsTablespoon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsTeaspoon">UsTeaspoons</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToUsTeaspoons property.")]
        public double UsTeaspoons => As(VolumeUnit.UsTeaspoon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.AcreFoot">AcreFeet</see>.
        /// </summary>
        public Volume ToAcreFeet => ToUnit(VolumeUnit.AcreFoot);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.AuTablespoon">AuTablespoons</see>.
        /// </summary>
        public Volume ToAuTablespoons => ToUnit(VolumeUnit.AuTablespoon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.BoardFoot">BoardFeet</see>.
        /// </summary>
        public Volume ToBoardFeet => ToUnit(VolumeUnit.BoardFoot);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Centiliter">Centiliters</see>.
        /// </summary>
        public Volume ToCentiliters => ToUnit(VolumeUnit.Centiliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicCentimeter">CubicCentimeters</see>.
        /// </summary>
        public Volume ToCubicCentimeters => ToUnit(VolumeUnit.CubicCentimeter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicDecimeter">CubicDecimeters</see>.
        /// </summary>
        public Volume ToCubicDecimeters => ToUnit(VolumeUnit.CubicDecimeter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicFoot">CubicFeet</see>.
        /// </summary>
        public Volume ToCubicFeet => ToUnit(VolumeUnit.CubicFoot);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicHectometer">CubicHectometers</see>.
        /// </summary>
        public Volume ToCubicHectometers => ToUnit(VolumeUnit.CubicHectometer);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicInch">CubicInches</see>.
        /// </summary>
        public Volume ToCubicInches => ToUnit(VolumeUnit.CubicInch);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicKilometer">CubicKilometers</see>.
        /// </summary>
        public Volume ToCubicKilometers => ToUnit(VolumeUnit.CubicKilometer);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicMeter">CubicMeters</see>.
        /// </summary>
        public Volume ToCubicMeters => ToUnit(VolumeUnit.CubicMeter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicMicrometer">CubicMicrometers</see>.
        /// </summary>
        public Volume ToCubicMicrometers => ToUnit(VolumeUnit.CubicMicrometer);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicMile">CubicMiles</see>.
        /// </summary>
        public Volume ToCubicMiles => ToUnit(VolumeUnit.CubicMile);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicMillimeter">CubicMillimeters</see>.
        /// </summary>
        public Volume ToCubicMillimeters => ToUnit(VolumeUnit.CubicMillimeter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.CubicYard">CubicYards</see>.
        /// </summary>
        public Volume ToCubicYards => ToUnit(VolumeUnit.CubicYard);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Decaliter">Decaliters</see>.
        /// </summary>
        public Volume ToDecaliters => ToUnit(VolumeUnit.Decaliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.DecausGallon">DecausGallons</see>.
        /// </summary>
        public Volume ToDecausGallons => ToUnit(VolumeUnit.DecausGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Deciliter">Deciliters</see>.
        /// </summary>
        public Volume ToDeciliters => ToUnit(VolumeUnit.Deciliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.DeciusGallon">DeciusGallons</see>.
        /// </summary>
        public Volume ToDeciusGallons => ToUnit(VolumeUnit.DeciusGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.HectocubicFoot">HectocubicFeet</see>.
        /// </summary>
        public Volume ToHectocubicFeet => ToUnit(VolumeUnit.HectocubicFoot);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.HectocubicMeter">HectocubicMeters</see>.
        /// </summary>
        public Volume ToHectocubicMeters => ToUnit(VolumeUnit.HectocubicMeter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Hectoliter">Hectoliters</see>.
        /// </summary>
        public Volume ToHectoliters => ToUnit(VolumeUnit.Hectoliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.HectousGallon">HectousGallons</see>.
        /// </summary>
        public Volume ToHectousGallons => ToUnit(VolumeUnit.HectousGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.ImperialBeerBarrel">ImperialBeerBarrels</see>.
        /// </summary>
        public Volume ToImperialBeerBarrels => ToUnit(VolumeUnit.ImperialBeerBarrel);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.ImperialGallon">ImperialGallons</see>.
        /// </summary>
        public Volume ToImperialGallons => ToUnit(VolumeUnit.ImperialGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.ImperialOunce">ImperialOunces</see>.
        /// </summary>
        public Volume ToImperialOunces => ToUnit(VolumeUnit.ImperialOunce);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.ImperialPint">ImperialPints</see>.
        /// </summary>
        public Volume ToImperialPints => ToUnit(VolumeUnit.ImperialPint);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.KilocubicFoot">KilocubicFeet</see>.
        /// </summary>
        public Volume ToKilocubicFeet => ToUnit(VolumeUnit.KilocubicFoot);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.KilocubicMeter">KilocubicMeters</see>.
        /// </summary>
        public Volume ToKilocubicMeters => ToUnit(VolumeUnit.KilocubicMeter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.KiloimperialGallon">KiloimperialGallons</see>.
        /// </summary>
        public Volume ToKiloimperialGallons => ToUnit(VolumeUnit.KiloimperialGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Kiloliter">Kiloliters</see>.
        /// </summary>
        public Volume ToKiloliters => ToUnit(VolumeUnit.Kiloliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.KilousGallon">KilousGallons</see>.
        /// </summary>
        public Volume ToKilousGallons => ToUnit(VolumeUnit.KilousGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Liter">Liters</see>.
        /// </summary>
        public Volume ToLiters => ToUnit(VolumeUnit.Liter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.MegacubicFoot">MegacubicFeet</see>.
        /// </summary>
        public Volume ToMegacubicFeet => ToUnit(VolumeUnit.MegacubicFoot);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.MegaimperialGallon">MegaimperialGallons</see>.
        /// </summary>
        public Volume ToMegaimperialGallons => ToUnit(VolumeUnit.MegaimperialGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Megaliter">Megaliters</see>.
        /// </summary>
        public Volume ToMegaliters => ToUnit(VolumeUnit.Megaliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.MegausGallon">MegausGallons</see>.
        /// </summary>
        public Volume ToMegausGallons => ToUnit(VolumeUnit.MegausGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.MetricCup">MetricCups</see>.
        /// </summary>
        public Volume ToMetricCups => ToUnit(VolumeUnit.MetricCup);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.MetricTeaspoon">MetricTeaspoons</see>.
        /// </summary>
        public Volume ToMetricTeaspoons => ToUnit(VolumeUnit.MetricTeaspoon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Microliter">Microliters</see>.
        /// </summary>
        public Volume ToMicroliters => ToUnit(VolumeUnit.Microliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.Milliliter">Milliliters</see>.
        /// </summary>
        public Volume ToMilliliters => ToUnit(VolumeUnit.Milliliter);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.OilBarrel">OilBarrels</see>.
        /// </summary>
        public Volume ToOilBarrels => ToUnit(VolumeUnit.OilBarrel);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UkTablespoon">UkTablespoons</see>.
        /// </summary>
        public Volume ToUkTablespoons => ToUnit(VolumeUnit.UkTablespoon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsBeerBarrel">UsBeerBarrels</see>.
        /// </summary>
        public Volume ToUsBeerBarrels => ToUnit(VolumeUnit.UsBeerBarrel);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsCustomaryCup">UsCustomaryCups</see>.
        /// </summary>
        public Volume ToUsCustomaryCups => ToUnit(VolumeUnit.UsCustomaryCup);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsGallon">UsGallons</see>.
        /// </summary>
        public Volume ToUsGallons => ToUnit(VolumeUnit.UsGallon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsLegalCup">UsLegalCups</see>.
        /// </summary>
        public Volume ToUsLegalCups => ToUnit(VolumeUnit.UsLegalCup);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsOunce">UsOunces</see>.
        /// </summary>
        public Volume ToUsOunces => ToUnit(VolumeUnit.UsOunce);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsPint">UsPints</see>.
        /// </summary>
        public Volume ToUsPints => ToUnit(VolumeUnit.UsPint);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsQuart">UsQuarts</see>.
        /// </summary>
        public Volume ToUsQuarts => ToUnit(VolumeUnit.UsQuart);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsTablespoon">UsTablespoons</see>.
        /// </summary>
        public Volume ToUsTablespoons => ToUnit(VolumeUnit.UsTablespoon);

        /// <summary>
        ///     Gets this <see cref="Volume"/> converted into <see cref="VolumeUnit.UsTeaspoon">UsTeaspoons</see>.
        /// </summary>
        public Volume ToUsTeaspoons => ToUnit(VolumeUnit.UsTeaspoon);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.AcreFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromAcreFeet(double acrefeet) => new Volume(acrefeet, VolumeUnit.AcreFoot);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.AuTablespoon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromAuTablespoons(double autablespoons) => new Volume(autablespoons, VolumeUnit.AuTablespoon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.BoardFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromBoardFeet(double boardfeet) => new Volume(boardfeet, VolumeUnit.BoardFoot);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Centiliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCentiliters(double centiliters) => new Volume(centiliters, VolumeUnit.Centiliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicCentimeters(double cubiccentimeters) => new Volume(cubiccentimeters, VolumeUnit.CubicCentimeter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicDecimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicDecimeters(double cubicdecimeters) => new Volume(cubicdecimeters, VolumeUnit.CubicDecimeter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicFeet(double cubicfeet) => new Volume(cubicfeet, VolumeUnit.CubicFoot);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicHectometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicHectometers(double cubichectometers) => new Volume(cubichectometers, VolumeUnit.CubicHectometer);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicInches(double cubicinches) => new Volume(cubicinches, VolumeUnit.CubicInch);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicKilometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicKilometers(double cubickilometers) => new Volume(cubickilometers, VolumeUnit.CubicKilometer);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicMeters(double cubicmeters) => new Volume(cubicmeters, VolumeUnit.CubicMeter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMicrometer"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicMicrometers(double cubicmicrometers) => new Volume(cubicmicrometers, VolumeUnit.CubicMicrometer);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMile"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicMiles(double cubicmiles) => new Volume(cubicmiles, VolumeUnit.CubicMile);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicMillimeters(double cubicmillimeters) => new Volume(cubicmillimeters, VolumeUnit.CubicMillimeter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicYard"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromCubicYards(double cubicyards) => new Volume(cubicyards, VolumeUnit.CubicYard);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Decaliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromDecaliters(double decaliters) => new Volume(decaliters, VolumeUnit.Decaliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.DecausGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromDecausGallons(double decausgallons) => new Volume(decausgallons, VolumeUnit.DecausGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Deciliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromDeciliters(double deciliters) => new Volume(deciliters, VolumeUnit.Deciliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.DeciusGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromDeciusGallons(double deciusgallons) => new Volume(deciusgallons, VolumeUnit.DeciusGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.HectocubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromHectocubicFeet(double hectocubicfeet) => new Volume(hectocubicfeet, VolumeUnit.HectocubicFoot);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.HectocubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromHectocubicMeters(double hectocubicmeters) => new Volume(hectocubicmeters, VolumeUnit.HectocubicMeter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Hectoliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromHectoliters(double hectoliters) => new Volume(hectoliters, VolumeUnit.Hectoliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.HectousGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromHectousGallons(double hectousgallons) => new Volume(hectousgallons, VolumeUnit.HectousGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialBeerBarrel"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromImperialBeerBarrels(double imperialbeerbarrels) => new Volume(imperialbeerbarrels, VolumeUnit.ImperialBeerBarrel);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromImperialGallons(double imperialgallons) => new Volume(imperialgallons, VolumeUnit.ImperialGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialOunce"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromImperialOunces(double imperialounces) => new Volume(imperialounces, VolumeUnit.ImperialOunce);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialPint"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromImperialPints(double imperialpints) => new Volume(imperialpints, VolumeUnit.ImperialPint);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KilocubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromKilocubicFeet(double kilocubicfeet) => new Volume(kilocubicfeet, VolumeUnit.KilocubicFoot);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KilocubicMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromKilocubicMeters(double kilocubicmeters) => new Volume(kilocubicmeters, VolumeUnit.KilocubicMeter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KiloimperialGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromKiloimperialGallons(double kiloimperialgallons) => new Volume(kiloimperialgallons, VolumeUnit.KiloimperialGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Kiloliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromKiloliters(double kiloliters) => new Volume(kiloliters, VolumeUnit.Kiloliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KilousGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromKilousGallons(double kilousgallons) => new Volume(kilousgallons, VolumeUnit.KilousGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Liter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromLiters(double liters) => new Volume(liters, VolumeUnit.Liter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MegacubicFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMegacubicFeet(double megacubicfeet) => new Volume(megacubicfeet, VolumeUnit.MegacubicFoot);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MegaimperialGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMegaimperialGallons(double megaimperialgallons) => new Volume(megaimperialgallons, VolumeUnit.MegaimperialGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Megaliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMegaliters(double megaliters) => new Volume(megaliters, VolumeUnit.Megaliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MegausGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMegausGallons(double megausgallons) => new Volume(megausgallons, VolumeUnit.MegausGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MetricCup"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMetricCups(double metriccups) => new Volume(metriccups, VolumeUnit.MetricCup);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MetricTeaspoon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMetricTeaspoons(double metricteaspoons) => new Volume(metricteaspoons, VolumeUnit.MetricTeaspoon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Microliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMicroliters(double microliters) => new Volume(microliters, VolumeUnit.Microliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Milliliter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromMilliliters(double milliliters) => new Volume(milliliters, VolumeUnit.Milliliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.OilBarrel"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromOilBarrels(double oilbarrels) => new Volume(oilbarrels, VolumeUnit.OilBarrel);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UkTablespoon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUkTablespoons(double uktablespoons) => new Volume(uktablespoons, VolumeUnit.UkTablespoon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsBeerBarrel"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsBeerBarrels(double usbeerbarrels) => new Volume(usbeerbarrels, VolumeUnit.UsBeerBarrel);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsCustomaryCup"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsCustomaryCups(double uscustomarycups) => new Volume(uscustomarycups, VolumeUnit.UsCustomaryCup);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsGallon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsGallons(double usgallons) => new Volume(usgallons, VolumeUnit.UsGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsLegalCup"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsLegalCups(double uslegalcups) => new Volume(uslegalcups, VolumeUnit.UsLegalCup);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsOunce"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsOunces(double usounces) => new Volume(usounces, VolumeUnit.UsOunce);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsPint"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsPints(double uspints) => new Volume(uspints, VolumeUnit.UsPint);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsQuart"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsQuarts(double usquarts) => new Volume(usquarts, VolumeUnit.UsQuart);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsTablespoon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsTablespoons(double ustablespoons) => new Volume(ustablespoons, VolumeUnit.UsTablespoon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsTeaspoon"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Volume FromUsTeaspoons(double usteaspoons) => new Volume(usteaspoons, VolumeUnit.UsTeaspoon);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeUnit" /> to <see cref="Volume" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Volume unit value.</returns>
        public static Volume From(double value, VolumeUnit fromUnit)
        {
            return new Volume(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(VolumeUnit unit) => GetValueAs(unit);

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public Volume ToUnit(VolumeUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new Volume(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            return Unit switch
            {
                VolumeUnit.AcreFoot => _value / 0.000810714,
                VolumeUnit.AuTablespoon => _value * 2e-5,
                VolumeUnit.BoardFoot => _value * 2.3597372158e-3,
                VolumeUnit.Centiliter => (_value / 1e3) * 1e-2d,
                VolumeUnit.CubicCentimeter => _value / 1e6,
                VolumeUnit.CubicDecimeter => _value / 1e3,
                VolumeUnit.CubicFoot => _value * 2.8316846592e-2,
                VolumeUnit.CubicHectometer => _value * 1e6,
                VolumeUnit.CubicInch => _value * 1.6387 * 1e-5,
                VolumeUnit.CubicKilometer => _value * 1e9,
                VolumeUnit.CubicMeter => _value,
                VolumeUnit.CubicMicrometer => _value / 1e18,
                VolumeUnit.CubicMile => _value * 4.16818182544058e9,
                VolumeUnit.CubicMillimeter => _value / 1e9,
                VolumeUnit.CubicYard => _value * 0.764554858,
                VolumeUnit.Decaliter => (_value / 1e3) * 1e1d,
                VolumeUnit.DecausGallon => (_value * 0.00378541) * 1e1d,
                VolumeUnit.Deciliter => (_value / 1e3) * 1e-1d,
                VolumeUnit.DeciusGallon => (_value * 0.00378541) * 1e-1d,
                VolumeUnit.HectocubicFoot => (_value * 2.8316846592e-2) * 1e2d,
                VolumeUnit.HectocubicMeter => (_value) * 1e2d,
                VolumeUnit.Hectoliter => (_value / 1e3) * 1e2d,
                VolumeUnit.HectousGallon => (_value * 0.00378541) * 1e2d,
                VolumeUnit.ImperialBeerBarrel => _value * 0.16365924,
                VolumeUnit.ImperialGallon => _value * 0.00454609000000181429905810072407,
                VolumeUnit.ImperialOunce => _value * 2.8413062499962901241875439064617e-5,
                VolumeUnit.ImperialPint => _value * 5.6826125e-4,
                VolumeUnit.KilocubicFoot => (_value * 2.8316846592e-2) * 1e3d,
                VolumeUnit.KilocubicMeter => (_value) * 1e3d,
                VolumeUnit.KiloimperialGallon => (_value * 0.00454609000000181429905810072407) * 1e3d,
                VolumeUnit.Kiloliter => (_value / 1e3) * 1e3d,
                VolumeUnit.KilousGallon => (_value * 0.00378541) * 1e3d,
                VolumeUnit.Liter => _value / 1e3,
                VolumeUnit.MegacubicFoot => (_value * 2.8316846592e-2) * 1e6d,
                VolumeUnit.MegaimperialGallon => (_value * 0.00454609000000181429905810072407) * 1e6d,
                VolumeUnit.Megaliter => (_value / 1e3) * 1e6d,
                VolumeUnit.MegausGallon => (_value * 0.00378541) * 1e6d,
                VolumeUnit.MetricCup => _value * 0.00025,
                VolumeUnit.MetricTeaspoon => _value * 0.5e-5,
                VolumeUnit.Microliter => (_value / 1e3) * 1e-6d,
                VolumeUnit.Milliliter => (_value / 1e3) * 1e-3d,
                VolumeUnit.OilBarrel => _value * 0.158987294928,
                VolumeUnit.UkTablespoon => _value * 1.5e-5,
                VolumeUnit.UsBeerBarrel => _value * 0.1173477658,
                VolumeUnit.UsCustomaryCup => _value * 0.0002365882365,
                VolumeUnit.UsGallon => _value * 0.00378541,
                VolumeUnit.UsLegalCup => _value * 0.00024,
                VolumeUnit.UsOunce => _value * 2.957352956253760505068307980135e-5,
                VolumeUnit.UsPint => _value * 4.73176473e-4,
                VolumeUnit.UsQuart => _value * 9.46352946e-4,
                VolumeUnit.UsTablespoon => _value * 1.478676478125e-5,
                VolumeUnit.UsTeaspoon => _value * 4.92892159375e-6,
                _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
            };
        }

        private double GetValueAs(VolumeUnit unit)
        {
            if (Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            return unit switch
            {
                VolumeUnit.AcreFoot => baseUnitValue * 0.000810714,
                VolumeUnit.AuTablespoon => baseUnitValue / 2e-5,
                VolumeUnit.BoardFoot => baseUnitValue / 2.3597372158e-3,
                VolumeUnit.Centiliter => (baseUnitValue * 1e3) / 1e-2d,
                VolumeUnit.CubicCentimeter => baseUnitValue * 1e6,
                VolumeUnit.CubicDecimeter => baseUnitValue * 1e3,
                VolumeUnit.CubicFoot => baseUnitValue / 2.8316846592e-2,
                VolumeUnit.CubicHectometer => baseUnitValue / 1e6,
                VolumeUnit.CubicInch => baseUnitValue / (1.6387 * 1e-5),
                VolumeUnit.CubicKilometer => baseUnitValue / 1e9,
                VolumeUnit.CubicMeter => baseUnitValue,
                VolumeUnit.CubicMicrometer => baseUnitValue * 1e18,
                VolumeUnit.CubicMile => baseUnitValue / 4.16818182544058e9,
                VolumeUnit.CubicMillimeter => baseUnitValue * 1e9,
                VolumeUnit.CubicYard => baseUnitValue / 0.764554858,
                VolumeUnit.Decaliter => (baseUnitValue * 1e3) / 1e1d,
                VolumeUnit.DecausGallon => (baseUnitValue / 0.00378541) / 1e1d,
                VolumeUnit.Deciliter => (baseUnitValue * 1e3) / 1e-1d,
                VolumeUnit.DeciusGallon => (baseUnitValue / 0.00378541) / 1e-1d,
                VolumeUnit.HectocubicFoot => (baseUnitValue / 2.8316846592e-2) / 1e2d,
                VolumeUnit.HectocubicMeter => (baseUnitValue) / 1e2d,
                VolumeUnit.Hectoliter => (baseUnitValue * 1e3) / 1e2d,
                VolumeUnit.HectousGallon => (baseUnitValue / 0.00378541) / 1e2d,
                VolumeUnit.ImperialBeerBarrel => baseUnitValue / 0.16365924,
                VolumeUnit.ImperialGallon => baseUnitValue / 0.00454609000000181429905810072407,
                VolumeUnit.ImperialOunce => baseUnitValue / 2.8413062499962901241875439064617e-5,
                VolumeUnit.ImperialPint => baseUnitValue / 5.6826125e-4,
                VolumeUnit.KilocubicFoot => (baseUnitValue / 2.8316846592e-2) / 1e3d,
                VolumeUnit.KilocubicMeter => (baseUnitValue) / 1e3d,
                VolumeUnit.KiloimperialGallon => (baseUnitValue / 0.00454609000000181429905810072407) / 1e3d,
                VolumeUnit.Kiloliter => (baseUnitValue * 1e3) / 1e3d,
                VolumeUnit.KilousGallon => (baseUnitValue / 0.00378541) / 1e3d,
                VolumeUnit.Liter => baseUnitValue * 1e3,
                VolumeUnit.MegacubicFoot => (baseUnitValue / 2.8316846592e-2) / 1e6d,
                VolumeUnit.MegaimperialGallon => (baseUnitValue / 0.00454609000000181429905810072407) / 1e6d,
                VolumeUnit.Megaliter => (baseUnitValue * 1e3) / 1e6d,
                VolumeUnit.MegausGallon => (baseUnitValue / 0.00378541) / 1e6d,
                VolumeUnit.MetricCup => baseUnitValue / 0.00025,
                VolumeUnit.MetricTeaspoon => baseUnitValue / 0.5e-5,
                VolumeUnit.Microliter => (baseUnitValue * 1e3) / 1e-6d,
                VolumeUnit.Milliliter => (baseUnitValue * 1e3) / 1e-3d,
                VolumeUnit.OilBarrel => baseUnitValue / 0.158987294928,
                VolumeUnit.UkTablespoon => baseUnitValue / 1.5e-5,
                VolumeUnit.UsBeerBarrel => baseUnitValue / 0.1173477658,
                VolumeUnit.UsCustomaryCup => baseUnitValue / 0.0002365882365,
                VolumeUnit.UsGallon => baseUnitValue / 0.00378541,
                VolumeUnit.UsLegalCup => baseUnitValue / 0.00024,
                VolumeUnit.UsOunce => baseUnitValue / 2.957352956253760505068307980135e-5,
                VolumeUnit.UsPint => baseUnitValue / 4.73176473e-4,
                VolumeUnit.UsQuart => baseUnitValue / 9.46352946e-4,
                VolumeUnit.UsTablespoon => baseUnitValue / 1.478676478125e-5,
                VolumeUnit.UsTeaspoon => baseUnitValue / 4.92892159375e-6,
                _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
            };
        }

        #endregion
    }
}

