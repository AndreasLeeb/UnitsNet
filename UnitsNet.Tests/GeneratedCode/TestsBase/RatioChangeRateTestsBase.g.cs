//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of RatioChangeRate.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class RatioChangeRateTestsBase : QuantityTestsBase
    {
        protected abstract double DecimalFractionsPerSecondInOneDecimalPerSecond { get; }
        protected abstract double DecimalPerSecondInOneDecimalPerSecond { get; }
        protected abstract double PercentsPerSecondInOneDecimalPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double DecimalFractionsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecimalPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PercentsPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RatioChangeRate((double)0.0, RatioChangeRateUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new RatioChangeRate();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(RatioChangeRateUnit.DecimalPerSecond, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RatioChangeRate(double.PositiveInfinity, RatioChangeRateUnit.DecimalPerSecond));
            Assert.Throws<ArgumentException>(() => new RatioChangeRate(double.NegativeInfinity, RatioChangeRateUnit.DecimalPerSecond));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RatioChangeRate(double.NaN, RatioChangeRateUnit.DecimalPerSecond));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new RatioChangeRate(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new RatioChangeRate(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (RatioChangeRate) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void RatioChangeRate_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new RatioChangeRate(1, RatioChangeRateUnit.DecimalPerSecond);

            QuantityInfo<RatioChangeRateUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(RatioChangeRate.Zero, quantityInfo.Zero);
            Assert.Equal("RatioChangeRate", quantityInfo.Name);
            Assert.Equal(QuantityType.RatioChangeRate, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<RatioChangeRateUnit>().Except(new[] {RatioChangeRateUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void DecimalPerSecondToRatioChangeRateUnits()
        {
            RatioChangeRate decimalpersecond = RatioChangeRate.FromDecimalPerSecond(1);
            AssertEx.EqualTolerance(DecimalFractionsPerSecondInOneDecimalPerSecond, decimalpersecond.DecimalFractionsPerSecond, DecimalFractionsPerSecondTolerance);
            AssertEx.EqualTolerance(DecimalPerSecondInOneDecimalPerSecond, decimalpersecond.DecimalPerSecond, DecimalPerSecondTolerance);
            AssertEx.EqualTolerance(PercentsPerSecondInOneDecimalPerSecond, decimalpersecond.PercentsPerSecond, PercentsPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = RatioChangeRate.From(1, RatioChangeRateUnit.DecimalFractionPerSecond);
            AssertEx.EqualTolerance(1, quantity00.DecimalFractionsPerSecond, DecimalFractionsPerSecondTolerance);
            Assert.Equal(RatioChangeRateUnit.DecimalFractionPerSecond, quantity00.Unit);

            var quantity01 = RatioChangeRate.From(1, RatioChangeRateUnit.DecimalPerSecond);
            AssertEx.EqualTolerance(1, quantity01.DecimalPerSecond, DecimalPerSecondTolerance);
            Assert.Equal(RatioChangeRateUnit.DecimalPerSecond, quantity01.Unit);

            var quantity02 = RatioChangeRate.From(1, RatioChangeRateUnit.PercentPerSecond);
            AssertEx.EqualTolerance(1, quantity02.PercentsPerSecond, PercentsPerSecondTolerance);
            Assert.Equal(RatioChangeRateUnit.PercentPerSecond, quantity02.Unit);

        }

        [Fact]
        public void FromDecimalPerSecond_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => RatioChangeRate.FromDecimalPerSecond(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => RatioChangeRate.FromDecimalPerSecond(double.NegativeInfinity));
        }

        [Fact]
        public void FromDecimalPerSecond_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => RatioChangeRate.FromDecimalPerSecond(double.NaN));
        }

        [Fact]
        public void As()
        {
            var decimalpersecond = RatioChangeRate.FromDecimalPerSecond(1);
            AssertEx.EqualTolerance(DecimalFractionsPerSecondInOneDecimalPerSecond, decimalpersecond.As(RatioChangeRateUnit.DecimalFractionPerSecond), DecimalFractionsPerSecondTolerance);
            AssertEx.EqualTolerance(DecimalPerSecondInOneDecimalPerSecond, decimalpersecond.As(RatioChangeRateUnit.DecimalPerSecond), DecimalPerSecondTolerance);
            AssertEx.EqualTolerance(PercentsPerSecondInOneDecimalPerSecond, decimalpersecond.As(RatioChangeRateUnit.PercentPerSecond), PercentsPerSecondTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new RatioChangeRate(value: 1, unit: RatioChangeRate.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var decimalpersecond = RatioChangeRate.FromDecimalPerSecond(1);

            var decimalfractionpersecondQuantity = decimalpersecond.ToUnit(RatioChangeRateUnit.DecimalFractionPerSecond);
            AssertEx.EqualTolerance(DecimalFractionsPerSecondInOneDecimalPerSecond, (double)decimalfractionpersecondQuantity.Value, DecimalFractionsPerSecondTolerance);
            Assert.Equal(RatioChangeRateUnit.DecimalFractionPerSecond, decimalfractionpersecondQuantity.Unit);

            var decimalpersecondQuantity = decimalpersecond.ToUnit(RatioChangeRateUnit.DecimalPerSecond);
            AssertEx.EqualTolerance(DecimalPerSecondInOneDecimalPerSecond, (double)decimalpersecondQuantity.Value, DecimalPerSecondTolerance);
            Assert.Equal(RatioChangeRateUnit.DecimalPerSecond, decimalpersecondQuantity.Unit);

            var percentpersecondQuantity = decimalpersecond.ToUnit(RatioChangeRateUnit.PercentPerSecond);
            AssertEx.EqualTolerance(PercentsPerSecondInOneDecimalPerSecond, (double)percentpersecondQuantity.Value, PercentsPerSecondTolerance);
            Assert.Equal(RatioChangeRateUnit.PercentPerSecond, percentpersecondQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = RatioChangeRate.FromDecimalPerSecond(1).ToBaseUnit();
            Assert.Equal(RatioChangeRate.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            RatioChangeRate decimalpersecond = RatioChangeRate.FromDecimalPerSecond(1);
            AssertEx.EqualTolerance(1, RatioChangeRate.FromDecimalFractionsPerSecond(decimalpersecond.DecimalFractionsPerSecond).DecimalPerSecond, DecimalFractionsPerSecondTolerance);
            AssertEx.EqualTolerance(1, RatioChangeRate.FromDecimalPerSecond(decimalpersecond.DecimalPerSecond).DecimalPerSecond, DecimalPerSecondTolerance);
            AssertEx.EqualTolerance(1, RatioChangeRate.FromPercentsPerSecond(decimalpersecond.PercentsPerSecond).DecimalPerSecond, PercentsPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            RatioChangeRate v = RatioChangeRate.FromDecimalPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.DecimalPerSecond, DecimalPerSecondTolerance);
            AssertEx.EqualTolerance(2, (RatioChangeRate.FromDecimalPerSecond(3)-v).DecimalPerSecond, DecimalPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).DecimalPerSecond, DecimalPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).DecimalPerSecond, DecimalPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).DecimalPerSecond, DecimalPerSecondTolerance);
            AssertEx.EqualTolerance(2, (RatioChangeRate.FromDecimalPerSecond(10)/5).DecimalPerSecond, DecimalPerSecondTolerance);
            AssertEx.EqualTolerance(2, RatioChangeRate.FromDecimalPerSecond(10)/RatioChangeRate.FromDecimalPerSecond(5), DecimalPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            RatioChangeRate oneDecimalPerSecond = RatioChangeRate.FromDecimalPerSecond(1);
            RatioChangeRate twoDecimalPerSecond = RatioChangeRate.FromDecimalPerSecond(2);

            Assert.True(oneDecimalPerSecond < twoDecimalPerSecond);
            Assert.True(oneDecimalPerSecond <= twoDecimalPerSecond);
            Assert.True(twoDecimalPerSecond > oneDecimalPerSecond);
            Assert.True(twoDecimalPerSecond >= oneDecimalPerSecond);

            Assert.False(oneDecimalPerSecond > twoDecimalPerSecond);
            Assert.False(oneDecimalPerSecond >= twoDecimalPerSecond);
            Assert.False(twoDecimalPerSecond < oneDecimalPerSecond);
            Assert.False(twoDecimalPerSecond <= oneDecimalPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            RatioChangeRate decimalpersecond = RatioChangeRate.FromDecimalPerSecond(1);
            Assert.Equal(0, decimalpersecond.CompareTo(decimalpersecond));
            Assert.True(decimalpersecond.CompareTo(RatioChangeRate.Zero) > 0);
            Assert.True(RatioChangeRate.Zero.CompareTo(decimalpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            RatioChangeRate decimalpersecond = RatioChangeRate.FromDecimalPerSecond(1);
            Assert.Throws<ArgumentException>(() => decimalpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            RatioChangeRate decimalpersecond = RatioChangeRate.FromDecimalPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => decimalpersecond.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = RatioChangeRate.FromDecimalPerSecond(1);
            var b = RatioChangeRate.FromDecimalPerSecond(2);

 // ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = RatioChangeRate.FromDecimalPerSecond(1);
            var b = RatioChangeRate.FromDecimalPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = RatioChangeRate.FromDecimalPerSecond(1);
            object b = RatioChangeRate.FromDecimalPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = RatioChangeRate.FromDecimalPerSecond(1);
            Assert.True(v.Equals(RatioChangeRate.FromDecimalPerSecond(1), DecimalPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(RatioChangeRate.Zero, DecimalPerSecondTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = RatioChangeRate.FromDecimalPerSecond(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(RatioChangeRate.FromDecimalPerSecond(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            RatioChangeRate decimalpersecond = RatioChangeRate.FromDecimalPerSecond(1);
            Assert.False(decimalpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            RatioChangeRate decimalpersecond = RatioChangeRate.FromDecimalPerSecond(1);
            Assert.False(decimalpersecond.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(RatioChangeRateUnit.Undefined, RatioChangeRate.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(RatioChangeRateUnit)).Cast<RatioChangeRateUnit>();
            foreach(var unit in units)
            {
                if(unit == RatioChangeRateUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(RatioChangeRate.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 /s", new RatioChangeRate(1, RatioChangeRateUnit.DecimalFractionPerSecond).ToString());
                Assert.Equal("1 /s", new RatioChangeRate(1, RatioChangeRateUnit.DecimalPerSecond).ToString());
                Assert.Equal("1 %/s", new RatioChangeRate(1, RatioChangeRateUnit.PercentPerSecond).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 /s", new RatioChangeRate(1, RatioChangeRateUnit.DecimalFractionPerSecond).ToString(swedishCulture));
            Assert.Equal("1 /s", new RatioChangeRate(1, RatioChangeRateUnit.DecimalPerSecond).ToString(swedishCulture));
            Assert.Equal("1 %/s", new RatioChangeRate(1, RatioChangeRateUnit.PercentPerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 /s", new RatioChangeRate(0.123456, RatioChangeRateUnit.DecimalPerSecond).ToString("s1"));
                Assert.Equal("0.12 /s", new RatioChangeRate(0.123456, RatioChangeRateUnit.DecimalPerSecond).ToString("s2"));
                Assert.Equal("0.123 /s", new RatioChangeRate(0.123456, RatioChangeRateUnit.DecimalPerSecond).ToString("s3"));
                Assert.Equal("0.1235 /s", new RatioChangeRate(0.123456, RatioChangeRateUnit.DecimalPerSecond).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 /s", new RatioChangeRate(0.123456, RatioChangeRateUnit.DecimalPerSecond).ToString("s1", culture));
            Assert.Equal("0.12 /s", new RatioChangeRate(0.123456, RatioChangeRateUnit.DecimalPerSecond).ToString("s2", culture));
            Assert.Equal("0.123 /s", new RatioChangeRate(0.123456, RatioChangeRateUnit.DecimalPerSecond).ToString("s3", culture));
            Assert.Equal("0.1235 /s", new RatioChangeRate(0.123456, RatioChangeRateUnit.DecimalPerSecond).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(RatioChangeRate)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(RatioChangeRateUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal(QuantityType.RatioChangeRate, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal(RatioChangeRate.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal(RatioChangeRate.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(1.0);
            Assert.Equal(new {RatioChangeRate.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = RatioChangeRate.FromDecimalPerSecond(value);
            Assert.Equal(RatioChangeRate.FromDecimalPerSecond(-value), -quantity);
        }
    }
}
