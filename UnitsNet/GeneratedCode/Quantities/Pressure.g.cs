//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Runtime.Serialization;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Pressure (symbol: P or p) is the ratio of force to the area over which that force is distributed. Pressure is force per unit area applied in a direction perpendicular to the surface of an object. Gauge pressure (also spelled gage pressure)[a] is the pressure relative to the local atmospheric or ambient pressure. Pressure is measured in any unit of force divided by any unit of area. The SI unit of pressure is the newton per square metre, which is called the pascal (Pa) after the seventeenth-century philosopher and scientist Blaise Pascal. A pressure of 1 Pa is small; it approximately equals the pressure exerted by a dollar bill resting flat on a table. Everyday pressures are often stated in kilopascals (1 kPa = 1000 Pa).
    /// </summary>
    [DataContract]
    public partial struct Pressure : IQuantity<PressureUnit>, IEquatable<Pressure>, IComparable, IComparable<Pressure>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 0)]
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 1)]
        private readonly PressureUnit? _unit;

        static Pressure()
        {
            BaseDimensions = new BaseDimensions(-1, 1, -2, 0, 0, 0, 0);
            BaseUnit = PressureUnit.Pascal;
            MaxValue = new Pressure(double.MaxValue, BaseUnit);
            MinValue = new Pressure(double.MinValue, BaseUnit);
            QuantityType = QuantityType.Pressure;
            Units = Enum.GetValues(typeof(PressureUnit)).Cast<PressureUnit>().Except(new PressureUnit[]{ PressureUnit.Undefined }).ToArray();
            Zero = new Pressure(0, BaseUnit);
            Info = new QuantityInfo<PressureUnit>("Pressure",
                new UnitInfo<PressureUnit>[]
                {
                    new UnitInfo<PressureUnit>(PressureUnit.Atmosphere, "Atmospheres", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Bar, "Bars", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Centibar, "Centibars", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Decapascal, "Decapascals", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Decibar, "Decibars", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.DynePerSquareCentimeter, "DynesPerSquareCentimeter", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.FootOfElevation, "FeetOfElevation", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.FootOfHead, "FeetOfHead", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Gigapascal, "Gigapascals", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Hectopascal, "Hectopascals", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.InchOfMercury, "InchesOfMercury", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.InchOfWaterColumn, "InchesOfWaterColumn", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Kilobar, "Kilobars", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilogramForcePerSquareCentimeter, "KilogramsForcePerSquareCentimeter", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilogramForcePerSquareMeter, "KilogramsForcePerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilogramForcePerSquareMillimeter, "KilogramsForcePerSquareMillimeter", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilonewtonPerSquareCentimeter, "KilonewtonsPerSquareCentimeter", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilonewtonPerSquareMeter, "KilonewtonsPerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilonewtonPerSquareMillimeter, "KilonewtonsPerSquareMillimeter", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Kilopascal, "Kilopascals", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilopoundForcePerSquareFoot, "KilopoundsForcePerSquareFoot", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.KilopoundForcePerSquareInch, "KilopoundsForcePerSquareInch", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Megabar, "Megabars", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.MeganewtonPerSquareMeter, "MeganewtonsPerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Megapascal, "Megapascals", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.MeterOfElevation, "MetersOfElevation", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.MeterOfHead, "MetersOfHead", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Microbar, "Microbars", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Micropascal, "Micropascals", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Millibar, "Millibars", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.MillimeterOfMercury, "MillimetersOfMercury", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.MillimeterOfWaterColumn, "MillimeterOfWaterColumn", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Millipascal, "Millipascals", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.NewtonPerSquareCentimeter, "NewtonsPerSquareCentimeter", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.NewtonPerSquareMeter, "NewtonsPerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.NewtonPerSquareMillimeter, "NewtonsPerSquareMillimeter", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Pascal, "Pascals", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<PressureUnit>(PressureUnit.PoundForcePerSquareFoot, "PoundsForcePerSquareFoot", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.PoundForcePerSquareInch, "PoundsForcePerSquareInch", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.PoundPerInchSecondSquared, "PoundsPerInchSecondSquared", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.TechnicalAtmosphere, "TechnicalAtmospheres", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.TonneForcePerSquareCentimeter, "TonnesForcePerSquareCentimeter", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.TonneForcePerSquareMeter, "TonnesForcePerSquareMeter", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.TonneForcePerSquareMillimeter, "TonnesForcePerSquareMillimeter", BaseUnits.Undefined),
                    new UnitInfo<PressureUnit>(PressureUnit.Torr, "Torrs", BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions, QuantityType.Pressure);

            DefaultConversionFunctions = new UnitConverter();
            RegisterDefaultConversions(DefaultConversionFunctions);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Pressure(double value, PressureUnit unit)
        {
            if (unit == PressureUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Pressure(double value, UnitSystem unitSystem)
        {
            if (unitSystem is null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="Pressure" /> instances.
        /// </summary>
        public static UnitConverter DefaultConversionFunctions { get; }

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<PressureUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of Pressure, which is Pascal. All conversions go via this value.
        /// </summary>
        public static PressureUnit BaseUnit { get; }

        /// <summary>
        /// Represents the largest possible value of Pressure
        /// </summary>
        [Obsolete("MaxValue and MinValue will be removed. Choose your own value or use nullability for unbounded lower/upper range checks. See discussion in https://github.com/angularsen/UnitsNet/issues/848.")]
        public static Pressure MaxValue { get; }

        /// <summary>
        /// Represents the smallest possible value of Pressure
        /// </summary>
        [Obsolete("MaxValue and MinValue will be removed. Choose your own value or use nullability for unbounded lower/upper range checks. See discussion in https://github.com/angularsen/UnitsNet/issues/848.")]
        public static Pressure MinValue { get; }

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public static QuantityType QuantityType { get; }

        /// <summary>
        ///     All units of measurement for the Pressure quantity.
        /// </summary>
        public static PressureUnit[] Units { get; }

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Pascal.
        /// </summary>
        public static Pressure Zero { get; }

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public PressureUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<PressureUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use the Info property instead.")]
        public QuantityType Type => QuantityType.Pressure;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Pressure.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Atmosphere">Atmospheres</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToAtmospheres property.")]
        public double Atmospheres => As(PressureUnit.Atmosphere);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Bar">Bars</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToBars property.")]
        public double Bars => As(PressureUnit.Bar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Centibar">Centibars</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToCentibars property.")]
        public double Centibars => As(PressureUnit.Centibar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Decapascal">Decapascals</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecapascals property.")]
        public double Decapascals => As(PressureUnit.Decapascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Decibar">Decibars</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDecibars property.")]
        public double Decibars => As(PressureUnit.Decibar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.DynePerSquareCentimeter">DynesPerSquareCentimeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToDynesPerSquareCentimeter property.")]
        public double DynesPerSquareCentimeter => As(PressureUnit.DynePerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.FootOfElevation">FeetOfElevation</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToFeetOfElevation property.")]
        public double FeetOfElevation => As(PressureUnit.FootOfElevation);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.FootOfHead">FeetOfHead</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToFeetOfHead property.")]
        public double FeetOfHead => As(PressureUnit.FootOfHead);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Gigapascal">Gigapascals</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToGigapascals property.")]
        public double Gigapascals => As(PressureUnit.Gigapascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Hectopascal">Hectopascals</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToHectopascals property.")]
        public double Hectopascals => As(PressureUnit.Hectopascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.InchOfMercury">InchesOfMercury</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToInchesOfMercury property.")]
        public double InchesOfMercury => As(PressureUnit.InchOfMercury);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.InchOfWaterColumn">InchesOfWaterColumn</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToInchesOfWaterColumn property.")]
        public double InchesOfWaterColumn => As(PressureUnit.InchOfWaterColumn);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Kilobar">Kilobars</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilobars property.")]
        public double Kilobars => As(PressureUnit.Kilobar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilogramForcePerSquareCentimeter">KilogramsForcePerSquareCentimeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilogramsForcePerSquareCentimeter property.")]
        public double KilogramsForcePerSquareCentimeter => As(PressureUnit.KilogramForcePerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilogramForcePerSquareMeter">KilogramsForcePerSquareMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilogramsForcePerSquareMeter property.")]
        public double KilogramsForcePerSquareMeter => As(PressureUnit.KilogramForcePerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilogramForcePerSquareMillimeter">KilogramsForcePerSquareMillimeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilogramsForcePerSquareMillimeter property.")]
        public double KilogramsForcePerSquareMillimeter => As(PressureUnit.KilogramForcePerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilonewtonPerSquareCentimeter">KilonewtonsPerSquareCentimeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilonewtonsPerSquareCentimeter property.")]
        public double KilonewtonsPerSquareCentimeter => As(PressureUnit.KilonewtonPerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilonewtonPerSquareMeter">KilonewtonsPerSquareMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilonewtonsPerSquareMeter property.")]
        public double KilonewtonsPerSquareMeter => As(PressureUnit.KilonewtonPerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilonewtonPerSquareMillimeter">KilonewtonsPerSquareMillimeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilonewtonsPerSquareMillimeter property.")]
        public double KilonewtonsPerSquareMillimeter => As(PressureUnit.KilonewtonPerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Kilopascal">Kilopascals</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilopascals property.")]
        public double Kilopascals => As(PressureUnit.Kilopascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilopoundForcePerSquareFoot">KilopoundsForcePerSquareFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilopoundsForcePerSquareFoot property.")]
        public double KilopoundsForcePerSquareFoot => As(PressureUnit.KilopoundForcePerSquareFoot);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilopoundForcePerSquareInch">KilopoundsForcePerSquareInch</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToKilopoundsForcePerSquareInch property.")]
        public double KilopoundsForcePerSquareInch => As(PressureUnit.KilopoundForcePerSquareInch);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Megabar">Megabars</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegabars property.")]
        public double Megabars => As(PressureUnit.Megabar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MeganewtonPerSquareMeter">MeganewtonsPerSquareMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMeganewtonsPerSquareMeter property.")]
        public double MeganewtonsPerSquareMeter => As(PressureUnit.MeganewtonPerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Megapascal">Megapascals</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMegapascals property.")]
        public double Megapascals => As(PressureUnit.Megapascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MeterOfElevation">MetersOfElevation</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMetersOfElevation property.")]
        public double MetersOfElevation => As(PressureUnit.MeterOfElevation);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MeterOfHead">MetersOfHead</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMetersOfHead property.")]
        public double MetersOfHead => As(PressureUnit.MeterOfHead);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Microbar">Microbars</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicrobars property.")]
        public double Microbars => As(PressureUnit.Microbar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Micropascal">Micropascals</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMicropascals property.")]
        public double Micropascals => As(PressureUnit.Micropascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Millibar">Millibars</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillibars property.")]
        public double Millibars => As(PressureUnit.Millibar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MillimeterOfMercury">MillimetersOfMercury</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillimetersOfMercury property.")]
        public double MillimetersOfMercury => As(PressureUnit.MillimeterOfMercury);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MillimeterOfWaterColumn">MillimeterOfWaterColumn</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillimeterOfWaterColumn property.")]
        public double MillimeterOfWaterColumn => As(PressureUnit.MillimeterOfWaterColumn);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Millipascal">Millipascals</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToMillipascals property.")]
        public double Millipascals => As(PressureUnit.Millipascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.NewtonPerSquareCentimeter">NewtonsPerSquareCentimeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNewtonsPerSquareCentimeter property.")]
        public double NewtonsPerSquareCentimeter => As(PressureUnit.NewtonPerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.NewtonPerSquareMeter">NewtonsPerSquareMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNewtonsPerSquareMeter property.")]
        public double NewtonsPerSquareMeter => As(PressureUnit.NewtonPerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.NewtonPerSquareMillimeter">NewtonsPerSquareMillimeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToNewtonsPerSquareMillimeter property.")]
        public double NewtonsPerSquareMillimeter => As(PressureUnit.NewtonPerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Pascal">Pascals</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPascals property.")]
        public double Pascals => As(PressureUnit.Pascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.PoundForcePerSquareFoot">PoundsForcePerSquareFoot</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPoundsForcePerSquareFoot property.")]
        public double PoundsForcePerSquareFoot => As(PressureUnit.PoundForcePerSquareFoot);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.PoundForcePerSquareInch">PoundsForcePerSquareInch</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPoundsForcePerSquareInch property.")]
        public double PoundsForcePerSquareInch => As(PressureUnit.PoundForcePerSquareInch);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.PoundPerInchSecondSquared">PoundsPerInchSecondSquared</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToPoundsPerInchSecondSquared property.")]
        public double PoundsPerInchSecondSquared => As(PressureUnit.PoundPerInchSecondSquared);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TechnicalAtmosphere">TechnicalAtmospheres</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTechnicalAtmospheres property.")]
        public double TechnicalAtmospheres => As(PressureUnit.TechnicalAtmosphere);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TonneForcePerSquareCentimeter">TonnesForcePerSquareCentimeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTonnesForcePerSquareCentimeter property.")]
        public double TonnesForcePerSquareCentimeter => As(PressureUnit.TonneForcePerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TonneForcePerSquareMeter">TonnesForcePerSquareMeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTonnesForcePerSquareMeter property.")]
        public double TonnesForcePerSquareMeter => As(PressureUnit.TonneForcePerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TonneForcePerSquareMillimeter">TonnesForcePerSquareMillimeter</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTonnesForcePerSquareMillimeter property.")]
        public double TonnesForcePerSquareMillimeter => As(PressureUnit.TonneForcePerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Torr">Torrs</see> as a <see cref="double"/>.
        /// </summary>
        [Obsolete("Use the ToTorrs property.")]
        public double Torrs => As(PressureUnit.Torr);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Atmosphere">Atmospheres</see>.
        /// </summary>
        public Pressure ToAtmospheres => ToUnit(PressureUnit.Atmosphere);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Bar">Bars</see>.
        /// </summary>
        public Pressure ToBars => ToUnit(PressureUnit.Bar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Centibar">Centibars</see>.
        /// </summary>
        public Pressure ToCentibars => ToUnit(PressureUnit.Centibar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Decapascal">Decapascals</see>.
        /// </summary>
        public Pressure ToDecapascals => ToUnit(PressureUnit.Decapascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Decibar">Decibars</see>.
        /// </summary>
        public Pressure ToDecibars => ToUnit(PressureUnit.Decibar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.DynePerSquareCentimeter">DynesPerSquareCentimeter</see>.
        /// </summary>
        public Pressure ToDynesPerSquareCentimeter => ToUnit(PressureUnit.DynePerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.FootOfElevation">FeetOfElevation</see>.
        /// </summary>
        public Pressure ToFeetOfElevation => ToUnit(PressureUnit.FootOfElevation);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.FootOfHead">FeetOfHead</see>.
        /// </summary>
        public Pressure ToFeetOfHead => ToUnit(PressureUnit.FootOfHead);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Gigapascal">Gigapascals</see>.
        /// </summary>
        public Pressure ToGigapascals => ToUnit(PressureUnit.Gigapascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Hectopascal">Hectopascals</see>.
        /// </summary>
        public Pressure ToHectopascals => ToUnit(PressureUnit.Hectopascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.InchOfMercury">InchesOfMercury</see>.
        /// </summary>
        public Pressure ToInchesOfMercury => ToUnit(PressureUnit.InchOfMercury);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.InchOfWaterColumn">InchesOfWaterColumn</see>.
        /// </summary>
        public Pressure ToInchesOfWaterColumn => ToUnit(PressureUnit.InchOfWaterColumn);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Kilobar">Kilobars</see>.
        /// </summary>
        public Pressure ToKilobars => ToUnit(PressureUnit.Kilobar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilogramForcePerSquareCentimeter">KilogramsForcePerSquareCentimeter</see>.
        /// </summary>
        public Pressure ToKilogramsForcePerSquareCentimeter => ToUnit(PressureUnit.KilogramForcePerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilogramForcePerSquareMeter">KilogramsForcePerSquareMeter</see>.
        /// </summary>
        public Pressure ToKilogramsForcePerSquareMeter => ToUnit(PressureUnit.KilogramForcePerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilogramForcePerSquareMillimeter">KilogramsForcePerSquareMillimeter</see>.
        /// </summary>
        public Pressure ToKilogramsForcePerSquareMillimeter => ToUnit(PressureUnit.KilogramForcePerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilonewtonPerSquareCentimeter">KilonewtonsPerSquareCentimeter</see>.
        /// </summary>
        public Pressure ToKilonewtonsPerSquareCentimeter => ToUnit(PressureUnit.KilonewtonPerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilonewtonPerSquareMeter">KilonewtonsPerSquareMeter</see>.
        /// </summary>
        public Pressure ToKilonewtonsPerSquareMeter => ToUnit(PressureUnit.KilonewtonPerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilonewtonPerSquareMillimeter">KilonewtonsPerSquareMillimeter</see>.
        /// </summary>
        public Pressure ToKilonewtonsPerSquareMillimeter => ToUnit(PressureUnit.KilonewtonPerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Kilopascal">Kilopascals</see>.
        /// </summary>
        public Pressure ToKilopascals => ToUnit(PressureUnit.Kilopascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilopoundForcePerSquareFoot">KilopoundsForcePerSquareFoot</see>.
        /// </summary>
        public Pressure ToKilopoundsForcePerSquareFoot => ToUnit(PressureUnit.KilopoundForcePerSquareFoot);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.KilopoundForcePerSquareInch">KilopoundsForcePerSquareInch</see>.
        /// </summary>
        public Pressure ToKilopoundsForcePerSquareInch => ToUnit(PressureUnit.KilopoundForcePerSquareInch);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Megabar">Megabars</see>.
        /// </summary>
        public Pressure ToMegabars => ToUnit(PressureUnit.Megabar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MeganewtonPerSquareMeter">MeganewtonsPerSquareMeter</see>.
        /// </summary>
        public Pressure ToMeganewtonsPerSquareMeter => ToUnit(PressureUnit.MeganewtonPerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Megapascal">Megapascals</see>.
        /// </summary>
        public Pressure ToMegapascals => ToUnit(PressureUnit.Megapascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MeterOfElevation">MetersOfElevation</see>.
        /// </summary>
        public Pressure ToMetersOfElevation => ToUnit(PressureUnit.MeterOfElevation);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MeterOfHead">MetersOfHead</see>.
        /// </summary>
        public Pressure ToMetersOfHead => ToUnit(PressureUnit.MeterOfHead);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Microbar">Microbars</see>.
        /// </summary>
        public Pressure ToMicrobars => ToUnit(PressureUnit.Microbar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Micropascal">Micropascals</see>.
        /// </summary>
        public Pressure ToMicropascals => ToUnit(PressureUnit.Micropascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Millibar">Millibars</see>.
        /// </summary>
        public Pressure ToMillibars => ToUnit(PressureUnit.Millibar);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MillimeterOfMercury">MillimetersOfMercury</see>.
        /// </summary>
        public Pressure ToMillimetersOfMercury => ToUnit(PressureUnit.MillimeterOfMercury);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.MillimeterOfWaterColumn">MillimeterOfWaterColumn</see>.
        /// </summary>
        public Pressure ToMillimeterOfWaterColumn => ToUnit(PressureUnit.MillimeterOfWaterColumn);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Millipascal">Millipascals</see>.
        /// </summary>
        public Pressure ToMillipascals => ToUnit(PressureUnit.Millipascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.NewtonPerSquareCentimeter">NewtonsPerSquareCentimeter</see>.
        /// </summary>
        public Pressure ToNewtonsPerSquareCentimeter => ToUnit(PressureUnit.NewtonPerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.NewtonPerSquareMeter">NewtonsPerSquareMeter</see>.
        /// </summary>
        public Pressure ToNewtonsPerSquareMeter => ToUnit(PressureUnit.NewtonPerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.NewtonPerSquareMillimeter">NewtonsPerSquareMillimeter</see>.
        /// </summary>
        public Pressure ToNewtonsPerSquareMillimeter => ToUnit(PressureUnit.NewtonPerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Pascal">Pascals</see>.
        /// </summary>
        public Pressure ToPascals => ToUnit(PressureUnit.Pascal);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.PoundForcePerSquareFoot">PoundsForcePerSquareFoot</see>.
        /// </summary>
        public Pressure ToPoundsForcePerSquareFoot => ToUnit(PressureUnit.PoundForcePerSquareFoot);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.PoundForcePerSquareInch">PoundsForcePerSquareInch</see>.
        /// </summary>
        public Pressure ToPoundsForcePerSquareInch => ToUnit(PressureUnit.PoundForcePerSquareInch);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.PoundPerInchSecondSquared">PoundsPerInchSecondSquared</see>.
        /// </summary>
        public Pressure ToPoundsPerInchSecondSquared => ToUnit(PressureUnit.PoundPerInchSecondSquared);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TechnicalAtmosphere">TechnicalAtmospheres</see>.
        /// </summary>
        public Pressure ToTechnicalAtmospheres => ToUnit(PressureUnit.TechnicalAtmosphere);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TonneForcePerSquareCentimeter">TonnesForcePerSquareCentimeter</see>.
        /// </summary>
        public Pressure ToTonnesForcePerSquareCentimeter => ToUnit(PressureUnit.TonneForcePerSquareCentimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TonneForcePerSquareMeter">TonnesForcePerSquareMeter</see>.
        /// </summary>
        public Pressure ToTonnesForcePerSquareMeter => ToUnit(PressureUnit.TonneForcePerSquareMeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.TonneForcePerSquareMillimeter">TonnesForcePerSquareMillimeter</see>.
        /// </summary>
        public Pressure ToTonnesForcePerSquareMillimeter => ToUnit(PressureUnit.TonneForcePerSquareMillimeter);

        /// <summary>
        ///     Gets this <see cref="Pressure"/> converted into <see cref="PressureUnit.Torr">Torrs</see>.
        /// </summary>
        public Pressure ToTorrs => ToUnit(PressureUnit.Torr);

        #endregion

        #region Static Methods

        /// <summary>
        /// Registers the default conversion functions in the given <see cref="UnitConverter"/> instance.
        /// </summary>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to register the default conversion functions in.</param>
        internal static void RegisterDefaultConversions(UnitConverter unitConverter)
        {
            // Register in unit converter: BaseUnit -> PressureUnit
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Atmosphere, quantity => new Pressure(quantity.Value / (1.01325 * 1e5), PressureUnit.Atmosphere));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Bar, quantity => new Pressure(quantity.Value / 1e5, PressureUnit.Bar));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Centibar, quantity => new Pressure((quantity.Value / 1e5) / 1e-2d, PressureUnit.Centibar));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Decapascal, quantity => new Pressure((quantity.Value) / 1e1d, PressureUnit.Decapascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Decibar, quantity => new Pressure((quantity.Value / 1e5) / 1e-1d, PressureUnit.Decibar));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.DynePerSquareCentimeter, quantity => new Pressure(quantity.Value / 1.0e-1, PressureUnit.DynePerSquareCentimeter));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.FootOfElevation, quantity => new Pressure((1.0 - Math.Pow(quantity.Value / 101325.0, 0.190284)) * 145366.45, PressureUnit.FootOfElevation));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.FootOfHead, quantity => new Pressure(quantity.Value * 0.000334552565551, PressureUnit.FootOfHead));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Gigapascal, quantity => new Pressure((quantity.Value) / 1e9d, PressureUnit.Gigapascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Hectopascal, quantity => new Pressure((quantity.Value) / 1e2d, PressureUnit.Hectopascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.InchOfMercury, quantity => new Pressure(quantity.Value * 2.95299830714159e-4, PressureUnit.InchOfMercury));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.InchOfWaterColumn, quantity => new Pressure(quantity.Value / 249.08890833333, PressureUnit.InchOfWaterColumn));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Kilobar, quantity => new Pressure((quantity.Value / 1e5) / 1e3d, PressureUnit.Kilobar));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.KilogramForcePerSquareCentimeter, quantity => new Pressure(quantity.Value / 9.80665e4, PressureUnit.KilogramForcePerSquareCentimeter));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.KilogramForcePerSquareMeter, quantity => new Pressure(quantity.Value * 0.101971619222242, PressureUnit.KilogramForcePerSquareMeter));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.KilogramForcePerSquareMillimeter, quantity => new Pressure(quantity.Value / 9.80665e6, PressureUnit.KilogramForcePerSquareMillimeter));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.KilonewtonPerSquareCentimeter, quantity => new Pressure((quantity.Value / 1e4) / 1e3d, PressureUnit.KilonewtonPerSquareCentimeter));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.KilonewtonPerSquareMeter, quantity => new Pressure((quantity.Value) / 1e3d, PressureUnit.KilonewtonPerSquareMeter));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.KilonewtonPerSquareMillimeter, quantity => new Pressure((quantity.Value / 1e6) / 1e3d, PressureUnit.KilonewtonPerSquareMillimeter));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Kilopascal, quantity => new Pressure((quantity.Value) / 1e3d, PressureUnit.Kilopascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.KilopoundForcePerSquareFoot, quantity => new Pressure((quantity.Value / 4.788025898033584e1) / 1e3d, PressureUnit.KilopoundForcePerSquareFoot));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.KilopoundForcePerSquareInch, quantity => new Pressure((quantity.Value / 6.894757293168361e3) / 1e3d, PressureUnit.KilopoundForcePerSquareInch));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Megabar, quantity => new Pressure((quantity.Value / 1e5) / 1e6d, PressureUnit.Megabar));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.MeganewtonPerSquareMeter, quantity => new Pressure((quantity.Value) / 1e6d, PressureUnit.MeganewtonPerSquareMeter));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Megapascal, quantity => new Pressure((quantity.Value) / 1e6d, PressureUnit.Megapascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.MeterOfElevation, quantity => new Pressure((1.0 - Math.Pow(quantity.Value / 101325.0, 0.190284)) * 44307.69396, PressureUnit.MeterOfElevation));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.MeterOfHead, quantity => new Pressure(quantity.Value * 0.0001019977334, PressureUnit.MeterOfHead));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Microbar, quantity => new Pressure((quantity.Value / 1e5) / 1e-6d, PressureUnit.Microbar));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Micropascal, quantity => new Pressure((quantity.Value) / 1e-6d, PressureUnit.Micropascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Millibar, quantity => new Pressure((quantity.Value / 1e5) / 1e-3d, PressureUnit.Millibar));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.MillimeterOfMercury, quantity => new Pressure(quantity.Value * 7.50061561302643e-3, PressureUnit.MillimeterOfMercury));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.MillimeterOfWaterColumn, quantity => new Pressure(quantity.Value / 9.806650000000272e0, PressureUnit.MillimeterOfWaterColumn));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Millipascal, quantity => new Pressure((quantity.Value) / 1e-3d, PressureUnit.Millipascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.NewtonPerSquareCentimeter, quantity => new Pressure(quantity.Value / 1e4, PressureUnit.NewtonPerSquareCentimeter));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.NewtonPerSquareMeter, quantity => new Pressure(quantity.Value, PressureUnit.NewtonPerSquareMeter));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.NewtonPerSquareMillimeter, quantity => new Pressure(quantity.Value / 1e6, PressureUnit.NewtonPerSquareMillimeter));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.PoundForcePerSquareFoot, quantity => new Pressure(quantity.Value / 4.788025898033584e1, PressureUnit.PoundForcePerSquareFoot));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.PoundForcePerSquareInch, quantity => new Pressure(quantity.Value / 6.894757293168361e3, PressureUnit.PoundForcePerSquareInch));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.PoundPerInchSecondSquared, quantity => new Pressure(quantity.Value / 1.785796732283465e1, PressureUnit.PoundPerInchSecondSquared));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.TechnicalAtmosphere, quantity => new Pressure(quantity.Value / (9.80680592331 * 1e4), PressureUnit.TechnicalAtmosphere));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.TonneForcePerSquareCentimeter, quantity => new Pressure(quantity.Value / 9.80665e7, PressureUnit.TonneForcePerSquareCentimeter));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.TonneForcePerSquareMeter, quantity => new Pressure(quantity.Value / 9.80665e3, PressureUnit.TonneForcePerSquareMeter));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.TonneForcePerSquareMillimeter, quantity => new Pressure(quantity.Value / 9.80665e9, PressureUnit.TonneForcePerSquareMillimeter));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Torr, quantity => new Pressure(quantity.Value / (1.3332266752 * 1e2), PressureUnit.Torr));

            // Register in unit converter: BaseUnit <-> BaseUnit
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Pascal, PressureUnit.Pascal, quantity => quantity);

            // Register in unit converter: PressureUnit -> BaseUnit
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Atmosphere, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 1.01325 * 1e5, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Bar, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 1e5, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Centibar, PressureUnit.Pascal, quantity => new Pressure((quantity.Value * 1e5) * 1e-2d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Decapascal, PressureUnit.Pascal, quantity => new Pressure((quantity.Value) * 1e1d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Decibar, PressureUnit.Pascal, quantity => new Pressure((quantity.Value * 1e5) * 1e-1d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.DynePerSquareCentimeter, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 1.0e-1, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.FootOfElevation, PressureUnit.Pascal, quantity => new Pressure(Math.Pow(1.0 - (quantity.Value / 145366.45), 5.2553026003237266401799415610351) * 101325.0, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.FootOfHead, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 2989.0669, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Gigapascal, PressureUnit.Pascal, quantity => new Pressure((quantity.Value) * 1e9d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Hectopascal, PressureUnit.Pascal, quantity => new Pressure((quantity.Value) * 1e2d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.InchOfMercury, PressureUnit.Pascal, quantity => new Pressure(quantity.Value / 2.95299830714159e-4, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.InchOfWaterColumn, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 249.08890833333, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Kilobar, PressureUnit.Pascal, quantity => new Pressure((quantity.Value * 1e5) * 1e3d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.KilogramForcePerSquareCentimeter, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 9.80665e4, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.KilogramForcePerSquareMeter, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 9.80665019960652, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.KilogramForcePerSquareMillimeter, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 9.80665e6, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.KilonewtonPerSquareCentimeter, PressureUnit.Pascal, quantity => new Pressure((quantity.Value * 1e4) * 1e3d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.KilonewtonPerSquareMeter, PressureUnit.Pascal, quantity => new Pressure((quantity.Value) * 1e3d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.KilonewtonPerSquareMillimeter, PressureUnit.Pascal, quantity => new Pressure((quantity.Value * 1e6) * 1e3d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Kilopascal, PressureUnit.Pascal, quantity => new Pressure((quantity.Value) * 1e3d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.KilopoundForcePerSquareFoot, PressureUnit.Pascal, quantity => new Pressure((quantity.Value * 4.788025898033584e1) * 1e3d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.KilopoundForcePerSquareInch, PressureUnit.Pascal, quantity => new Pressure((quantity.Value * 6.894757293168361e3) * 1e3d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Megabar, PressureUnit.Pascal, quantity => new Pressure((quantity.Value * 1e5) * 1e6d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.MeganewtonPerSquareMeter, PressureUnit.Pascal, quantity => new Pressure((quantity.Value) * 1e6d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Megapascal, PressureUnit.Pascal, quantity => new Pressure((quantity.Value) * 1e6d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.MeterOfElevation, PressureUnit.Pascal, quantity => new Pressure(Math.Pow(1.0 - (quantity.Value / 44307.69396), 5.2553026003237266401799415610351) * 101325.0, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.MeterOfHead, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 9804.139432, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Microbar, PressureUnit.Pascal, quantity => new Pressure((quantity.Value * 1e5) * 1e-6d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Micropascal, PressureUnit.Pascal, quantity => new Pressure((quantity.Value) * 1e-6d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Millibar, PressureUnit.Pascal, quantity => new Pressure((quantity.Value * 1e5) * 1e-3d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.MillimeterOfMercury, PressureUnit.Pascal, quantity => new Pressure(quantity.Value / 7.50061561302643e-3, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.MillimeterOfWaterColumn, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 9.806650000000272e0, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Millipascal, PressureUnit.Pascal, quantity => new Pressure((quantity.Value) * 1e-3d, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.NewtonPerSquareCentimeter, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 1e4, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.NewtonPerSquareMeter, PressureUnit.Pascal, quantity => new Pressure(quantity.Value, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.NewtonPerSquareMillimeter, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 1e6, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.PoundForcePerSquareFoot, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 4.788025898033584e1, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.PoundForcePerSquareInch, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 6.894757293168361e3, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.PoundPerInchSecondSquared, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 1.785796732283465e1, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.TechnicalAtmosphere, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 9.80680592331 * 1e4, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.TonneForcePerSquareCentimeter, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 9.80665e7, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.TonneForcePerSquareMeter, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 9.80665e3, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.TonneForcePerSquareMillimeter, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 9.80665e9, PressureUnit.Pascal));
            unitConverter.SetConversionFunction<Pressure>(PressureUnit.Torr, PressureUnit.Pascal, quantity => new Pressure(quantity.Value * 1.3332266752 * 1e2, PressureUnit.Pascal));
        }

        internal static void MapGeneratedLocalizations(UnitAbbreviationsCache unitAbbreviationsCache)
        {
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Atmosphere, new CultureInfo("en-US"), false, true, new string[]{"atm"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Atmosphere, new CultureInfo("ru-RU"), false, true, new string[]{"атм"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Bar, new CultureInfo("en-US"), false, true, new string[]{"bar"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Bar, new CultureInfo("ru-RU"), false, true, new string[]{"бар"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Centibar, new CultureInfo("en-US"), false, true, new string[]{"cbar"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Centibar, new CultureInfo("ru-RU"), false, true, new string[]{"сбар"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Decapascal, new CultureInfo("en-US"), false, true, new string[]{"daPa"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Decapascal, new CultureInfo("ru-RU"), false, true, new string[]{"даПа"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Decibar, new CultureInfo("en-US"), false, true, new string[]{"dbar"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Decibar, new CultureInfo("ru-RU"), false, true, new string[]{"дбар"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.DynePerSquareCentimeter, new CultureInfo("en-US"), false, true, new string[]{"dyn/cm²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.FootOfElevation, new CultureInfo("en-US"), false, true, new string[]{"ft of elevation"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.FootOfHead, new CultureInfo("en-US"), false, true, new string[]{"ft of head"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Gigapascal, new CultureInfo("en-US"), false, true, new string[]{"GPa"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Gigapascal, new CultureInfo("ru-RU"), false, true, new string[]{"ГПа"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Hectopascal, new CultureInfo("en-US"), false, true, new string[]{"hPa"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Hectopascal, new CultureInfo("ru-RU"), false, true, new string[]{"гПа"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.InchOfMercury, new CultureInfo("en-US"), false, true, new string[]{"inHg"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.InchOfWaterColumn, new CultureInfo("en-US"), false, true, new string[]{"inH2O", "inch wc", "wc"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Kilobar, new CultureInfo("en-US"), false, true, new string[]{"kbar"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Kilobar, new CultureInfo("ru-RU"), false, true, new string[]{"кбар"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.KilogramForcePerSquareCentimeter, new CultureInfo("en-US"), false, true, new string[]{"kgf/cm²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.KilogramForcePerSquareCentimeter, new CultureInfo("ru-RU"), false, true, new string[]{"кгс/см²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.KilogramForcePerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"kgf/m²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.KilogramForcePerSquareMeter, new CultureInfo("ru-RU"), false, true, new string[]{"кгс/м²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.KilogramForcePerSquareMillimeter, new CultureInfo("en-US"), false, true, new string[]{"kgf/mm²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.KilogramForcePerSquareMillimeter, new CultureInfo("ru-RU"), false, true, new string[]{"кгс/мм²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.KilonewtonPerSquareCentimeter, new CultureInfo("en-US"), false, true, new string[]{"kN/cm²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.KilonewtonPerSquareCentimeter, new CultureInfo("ru-RU"), false, true, new string[]{"кН/см²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.KilonewtonPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"kN/m²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.KilonewtonPerSquareMeter, new CultureInfo("ru-RU"), false, true, new string[]{"кН/м²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.KilonewtonPerSquareMillimeter, new CultureInfo("en-US"), false, true, new string[]{"kN/mm²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.KilonewtonPerSquareMillimeter, new CultureInfo("ru-RU"), false, true, new string[]{"кН/мм²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Kilopascal, new CultureInfo("en-US"), false, true, new string[]{"kPa"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Kilopascal, new CultureInfo("ru-RU"), false, true, new string[]{"кПа"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.KilopoundForcePerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"kipf/ft²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.KilopoundForcePerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"ksi", "kipf/in²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.KilopoundForcePerSquareInch, new CultureInfo("ru-RU"), false, true, new string[]{"ksi", "kipf/in²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Megabar, new CultureInfo("en-US"), false, true, new string[]{"Mbar"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Megabar, new CultureInfo("ru-RU"), false, true, new string[]{"Мбар"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.MeganewtonPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"MN/m²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.MeganewtonPerSquareMeter, new CultureInfo("ru-RU"), false, true, new string[]{"МН/м²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Megapascal, new CultureInfo("en-US"), false, true, new string[]{"MPa"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Megapascal, new CultureInfo("ru-RU"), false, true, new string[]{"МПа"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.MeterOfElevation, new CultureInfo("en-US"), false, true, new string[]{"m of elevation"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.MeterOfHead, new CultureInfo("en-US"), false, true, new string[]{"m of head"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Microbar, new CultureInfo("en-US"), false, true, new string[]{"µbar"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Microbar, new CultureInfo("ru-RU"), false, true, new string[]{"мкбар"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Micropascal, new CultureInfo("en-US"), false, true, new string[]{"µPa"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Micropascal, new CultureInfo("ru-RU"), false, true, new string[]{"мкПа"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Millibar, new CultureInfo("en-US"), false, true, new string[]{"mbar"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Millibar, new CultureInfo("ru-RU"), false, true, new string[]{"мбар"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.MillimeterOfMercury, new CultureInfo("en-US"), false, true, new string[]{"mmHg"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.MillimeterOfMercury, new CultureInfo("ru-RU"), false, true, new string[]{"мм рт.ст."});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.MillimeterOfWaterColumn, new CultureInfo("en-US"), false, true, new string[]{"mmH2O", "mm wc"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Millipascal, new CultureInfo("en-US"), false, true, new string[]{"mPa"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Millipascal, new CultureInfo("ru-RU"), false, true, new string[]{"мПа"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.NewtonPerSquareCentimeter, new CultureInfo("en-US"), false, true, new string[]{"N/cm²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.NewtonPerSquareCentimeter, new CultureInfo("ru-RU"), false, true, new string[]{"Н/см²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.NewtonPerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"N/m²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.NewtonPerSquareMeter, new CultureInfo("ru-RU"), false, true, new string[]{"Н/м²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.NewtonPerSquareMillimeter, new CultureInfo("en-US"), false, true, new string[]{"N/mm²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.NewtonPerSquareMillimeter, new CultureInfo("ru-RU"), false, true, new string[]{"Н/мм²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Pascal, new CultureInfo("en-US"), false, true, new string[]{"Pa"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Pascal, new CultureInfo("ru-RU"), false, true, new string[]{"Па"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.PoundForcePerSquareFoot, new CultureInfo("en-US"), false, true, new string[]{"lb/ft²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.PoundForcePerSquareInch, new CultureInfo("en-US"), false, true, new string[]{"psi", "lb/in²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.PoundForcePerSquareInch, new CultureInfo("ru-RU"), false, true, new string[]{"psi", "lb/in²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.PoundPerInchSecondSquared, new CultureInfo("en-US"), false, true, new string[]{"lbm/(in·s²)", "lb/(in·s²)"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.TechnicalAtmosphere, new CultureInfo("en-US"), false, true, new string[]{"at"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.TechnicalAtmosphere, new CultureInfo("ru-RU"), false, true, new string[]{"ат"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.TonneForcePerSquareCentimeter, new CultureInfo("en-US"), false, true, new string[]{"tf/cm²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.TonneForcePerSquareMeter, new CultureInfo("en-US"), false, true, new string[]{"tf/m²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.TonneForcePerSquareMillimeter, new CultureInfo("en-US"), false, true, new string[]{"tf/mm²"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Torr, new CultureInfo("en-US"), false, true, new string[]{"torr"});
            unitAbbreviationsCache.PerformAbbreviationMapping(PressureUnit.Torr, new CultureInfo("ru-RU"), false, true, new string[]{"торр"});
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(PressureUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(PressureUnit unit, IFormatProvider? provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Atmosphere"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromAtmospheres(QuantityValue atmospheres)
        {
            double value = (double) atmospheres;
            return new Pressure(value, PressureUnit.Atmosphere);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Bar"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromBars(QuantityValue bars)
        {
            double value = (double) bars;
            return new Pressure(value, PressureUnit.Bar);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Centibar"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromCentibars(QuantityValue centibars)
        {
            double value = (double) centibars;
            return new Pressure(value, PressureUnit.Centibar);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Decapascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromDecapascals(QuantityValue decapascals)
        {
            double value = (double) decapascals;
            return new Pressure(value, PressureUnit.Decapascal);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Decibar"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromDecibars(QuantityValue decibars)
        {
            double value = (double) decibars;
            return new Pressure(value, PressureUnit.Decibar);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.DynePerSquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromDynesPerSquareCentimeter(QuantityValue dynespersquarecentimeter)
        {
            double value = (double) dynespersquarecentimeter;
            return new Pressure(value, PressureUnit.DynePerSquareCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.FootOfElevation"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromFeetOfElevation(QuantityValue feetofelevation)
        {
            double value = (double) feetofelevation;
            return new Pressure(value, PressureUnit.FootOfElevation);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.FootOfHead"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromFeetOfHead(QuantityValue feetofhead)
        {
            double value = (double) feetofhead;
            return new Pressure(value, PressureUnit.FootOfHead);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Gigapascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromGigapascals(QuantityValue gigapascals)
        {
            double value = (double) gigapascals;
            return new Pressure(value, PressureUnit.Gigapascal);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Hectopascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromHectopascals(QuantityValue hectopascals)
        {
            double value = (double) hectopascals;
            return new Pressure(value, PressureUnit.Hectopascal);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.InchOfMercury"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromInchesOfMercury(QuantityValue inchesofmercury)
        {
            double value = (double) inchesofmercury;
            return new Pressure(value, PressureUnit.InchOfMercury);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.InchOfWaterColumn"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromInchesOfWaterColumn(QuantityValue inchesofwatercolumn)
        {
            double value = (double) inchesofwatercolumn;
            return new Pressure(value, PressureUnit.InchOfWaterColumn);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Kilobar"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilobars(QuantityValue kilobars)
        {
            double value = (double) kilobars;
            return new Pressure(value, PressureUnit.Kilobar);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilogramForcePerSquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilogramsForcePerSquareCentimeter(QuantityValue kilogramsforcepersquarecentimeter)
        {
            double value = (double) kilogramsforcepersquarecentimeter;
            return new Pressure(value, PressureUnit.KilogramForcePerSquareCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilogramForcePerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilogramsForcePerSquareMeter(QuantityValue kilogramsforcepersquaremeter)
        {
            double value = (double) kilogramsforcepersquaremeter;
            return new Pressure(value, PressureUnit.KilogramForcePerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilogramForcePerSquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilogramsForcePerSquareMillimeter(QuantityValue kilogramsforcepersquaremillimeter)
        {
            double value = (double) kilogramsforcepersquaremillimeter;
            return new Pressure(value, PressureUnit.KilogramForcePerSquareMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilonewtonPerSquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilonewtonsPerSquareCentimeter(QuantityValue kilonewtonspersquarecentimeter)
        {
            double value = (double) kilonewtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.KilonewtonPerSquareCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilonewtonPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilonewtonsPerSquareMeter(QuantityValue kilonewtonspersquaremeter)
        {
            double value = (double) kilonewtonspersquaremeter;
            return new Pressure(value, PressureUnit.KilonewtonPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilonewtonPerSquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilonewtonsPerSquareMillimeter(QuantityValue kilonewtonspersquaremillimeter)
        {
            double value = (double) kilonewtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.KilonewtonPerSquareMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Kilopascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilopascals(QuantityValue kilopascals)
        {
            double value = (double) kilopascals;
            return new Pressure(value, PressureUnit.Kilopascal);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilopoundForcePerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilopoundsForcePerSquareFoot(QuantityValue kilopoundsforcepersquarefoot)
        {
            double value = (double) kilopoundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.KilopoundForcePerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilopoundForcePerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromKilopoundsForcePerSquareInch(QuantityValue kilopoundsforcepersquareinch)
        {
            double value = (double) kilopoundsforcepersquareinch;
            return new Pressure(value, PressureUnit.KilopoundForcePerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Megabar"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMegabars(QuantityValue megabars)
        {
            double value = (double) megabars;
            return new Pressure(value, PressureUnit.Megabar);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MeganewtonPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMeganewtonsPerSquareMeter(QuantityValue meganewtonspersquaremeter)
        {
            double value = (double) meganewtonspersquaremeter;
            return new Pressure(value, PressureUnit.MeganewtonPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Megapascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMegapascals(QuantityValue megapascals)
        {
            double value = (double) megapascals;
            return new Pressure(value, PressureUnit.Megapascal);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MeterOfElevation"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMetersOfElevation(QuantityValue metersofelevation)
        {
            double value = (double) metersofelevation;
            return new Pressure(value, PressureUnit.MeterOfElevation);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MeterOfHead"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMetersOfHead(QuantityValue metersofhead)
        {
            double value = (double) metersofhead;
            return new Pressure(value, PressureUnit.MeterOfHead);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Microbar"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMicrobars(QuantityValue microbars)
        {
            double value = (double) microbars;
            return new Pressure(value, PressureUnit.Microbar);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Micropascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMicropascals(QuantityValue micropascals)
        {
            double value = (double) micropascals;
            return new Pressure(value, PressureUnit.Micropascal);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Millibar"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMillibars(QuantityValue millibars)
        {
            double value = (double) millibars;
            return new Pressure(value, PressureUnit.Millibar);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MillimeterOfMercury"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMillimetersOfMercury(QuantityValue millimetersofmercury)
        {
            double value = (double) millimetersofmercury;
            return new Pressure(value, PressureUnit.MillimeterOfMercury);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MillimeterOfWaterColumn"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMillimeterOfWaterColumn(QuantityValue millimeterofwatercolumn)
        {
            double value = (double) millimeterofwatercolumn;
            return new Pressure(value, PressureUnit.MillimeterOfWaterColumn);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Millipascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromMillipascals(QuantityValue millipascals)
        {
            double value = (double) millipascals;
            return new Pressure(value, PressureUnit.Millipascal);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.NewtonPerSquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromNewtonsPerSquareCentimeter(QuantityValue newtonspersquarecentimeter)
        {
            double value = (double) newtonspersquarecentimeter;
            return new Pressure(value, PressureUnit.NewtonPerSquareCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.NewtonPerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromNewtonsPerSquareMeter(QuantityValue newtonspersquaremeter)
        {
            double value = (double) newtonspersquaremeter;
            return new Pressure(value, PressureUnit.NewtonPerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.NewtonPerSquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromNewtonsPerSquareMillimeter(QuantityValue newtonspersquaremillimeter)
        {
            double value = (double) newtonspersquaremillimeter;
            return new Pressure(value, PressureUnit.NewtonPerSquareMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Pascal"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromPascals(QuantityValue pascals)
        {
            double value = (double) pascals;
            return new Pressure(value, PressureUnit.Pascal);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.PoundForcePerSquareFoot"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromPoundsForcePerSquareFoot(QuantityValue poundsforcepersquarefoot)
        {
            double value = (double) poundsforcepersquarefoot;
            return new Pressure(value, PressureUnit.PoundForcePerSquareFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.PoundForcePerSquareInch"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromPoundsForcePerSquareInch(QuantityValue poundsforcepersquareinch)
        {
            double value = (double) poundsforcepersquareinch;
            return new Pressure(value, PressureUnit.PoundForcePerSquareInch);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.PoundPerInchSecondSquared"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromPoundsPerInchSecondSquared(QuantityValue poundsperinchsecondsquared)
        {
            double value = (double) poundsperinchsecondsquared;
            return new Pressure(value, PressureUnit.PoundPerInchSecondSquared);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.TechnicalAtmosphere"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromTechnicalAtmospheres(QuantityValue technicalatmospheres)
        {
            double value = (double) technicalatmospheres;
            return new Pressure(value, PressureUnit.TechnicalAtmosphere);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.TonneForcePerSquareCentimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromTonnesForcePerSquareCentimeter(QuantityValue tonnesforcepersquarecentimeter)
        {
            double value = (double) tonnesforcepersquarecentimeter;
            return new Pressure(value, PressureUnit.TonneForcePerSquareCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.TonneForcePerSquareMeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromTonnesForcePerSquareMeter(QuantityValue tonnesforcepersquaremeter)
        {
            double value = (double) tonnesforcepersquaremeter;
            return new Pressure(value, PressureUnit.TonneForcePerSquareMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.TonneForcePerSquareMillimeter"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromTonnesForcePerSquareMillimeter(QuantityValue tonnesforcepersquaremillimeter)
        {
            double value = (double) tonnesforcepersquaremillimeter;
            return new Pressure(value, PressureUnit.TonneForcePerSquareMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Torr"/>.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Pressure FromTorrs(QuantityValue torrs)
        {
            double value = (double) torrs;
            return new Pressure(value, PressureUnit.Torr);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PressureUnit" /> to <see cref="Pressure" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Pressure unit value.</returns>
        public static Pressure From(QuantityValue value, PressureUnit fromUnit)
        {
            return new Pressure((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Pressure Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static Pressure Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<Pressure, PressureUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(string? str, out Pressure result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse(string? str, IFormatProvider? provider, out Pressure result)
        {
            return QuantityParser.Default.TryParse<Pressure, PressureUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PressureUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PressureUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse<PressureUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.PressureUnit)"/>
        public static bool TryParseUnit(string str, out PressureUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider? provider, out PressureUnit unit)
        {
            return UnitParser.Default.TryParse<PressureUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Pressure operator -(Pressure right)
        {
            return new Pressure(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Pressure"/> from adding two <see cref="Pressure"/>.</summary>
        public static Pressure operator +(Pressure left, Pressure right)
        {
            return new Pressure(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Pressure"/> from subtracting two <see cref="Pressure"/>.</summary>
        public static Pressure operator -(Pressure left, Pressure right)
        {
            return new Pressure(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Pressure"/> from multiplying value and <see cref="Pressure"/>.</summary>
        public static Pressure operator *(double left, Pressure right)
        {
            return new Pressure(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Pressure"/> from multiplying value and <see cref="Pressure"/>.</summary>
        public static Pressure operator *(Pressure left, double right)
        {
            return new Pressure(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Pressure"/> from dividing <see cref="Pressure"/> by value.</summary>
        public static Pressure operator /(Pressure left, double right)
        {
            return new Pressure(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Pressure"/> by <see cref="Pressure"/>.</summary>
        public static double operator /(Pressure left, Pressure right)
        {
            return left.Pascals / right.Pascals;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Pressure left, Pressure right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Pressure left, Pressure right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Pressure left, Pressure right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Pressure left, Pressure right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Pressure, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(Pressure left, Pressure right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(Pressure, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(Pressure left, Pressure right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if (obj is null) throw new ArgumentNullException(nameof(obj));
            if (!(obj is Pressure objPressure)) throw new ArgumentException("Expected type Pressure.", nameof(obj));

            return CompareTo(objPressure);
        }

        /// <inheritdoc />
        public int CompareTo(Pressure other)
        {
            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Pressure, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if (obj is null || !(obj is Pressure objPressure))
                return false;

            return Equals(objPressure);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(Pressure, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(Pressure other)
        {
            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another Pressure within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(Pressure other, double tolerance, ComparisonType comparisonType)
        {
            if (tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Pressure.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PressureUnit unit)
        {
            if (Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if (unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if (!(unit is PressureUnit unitAsPressureUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(PressureUnit)} is supported.", nameof(unit));

            return As(unitAsPressureUnit);
        }

        /// <summary>
        ///     Converts this Pressure to another Pressure with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <returns>A Pressure with the specified unit.</returns>
        public Pressure ToUnit(PressureUnit unit)
        {
            return ToUnit(unit, DefaultConversionFunctions);
        }

        /// <summary>
        ///     Converts this Pressure to another Pressure using the given <paramref name="unitConverter"/> with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <param name="unit">The unit to convert to.</param>
        /// <param name="unitConverter">The <see cref="UnitConverter"/> to use for the conversion.</param>
        /// <returns>A Pressure with the specified unit.</returns>
        public Pressure ToUnit(PressureUnit unit, UnitConverter unitConverter)
        {
            if (Unit == unit)
            {
                // Already in requested units.
                return this;
            }
            else if (unitConverter.TryGetConversionFunction((typeof(Pressure), Unit, typeof(Pressure), unit), out var conversionFunction))
            {
                // Direct conversion to requested unit found. Return the converted quantity.
                var converted = conversionFunction(this);
                return (Pressure)converted;
            }
            else if (Unit != BaseUnit)
            {
                // Direct conversion to requested unit NOT found. Convert to BaseUnit, and then from BaseUnit to requested unit.
                var inBaseUnits = ToUnit(BaseUnit);
                return inBaseUnits.ToUnit(unit);
            }
            else
            {
                throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if (!(unit is PressureUnit unitAsPressureUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(PressureUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsPressureUnit, DefaultConversionFunctions);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public Pressure ToUnit(UnitSystem unitSystem)
        {
            if (unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if (firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<PressureUnit> IQuantity<PressureUnit>.ToUnit(PressureUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<PressureUnit> IQuantity<PressureUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        private double GetValueAs(PressureUnit unit)
        {
            var converted = ToUnit(unit);
            return (double)converted.Value;
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString(IFormatProvider? provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString(IFormatProvider? provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider? provider)
        {
            return QuantityFormatter.Format<PressureUnit>(this, format, provider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Pressure)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Pressure)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(Pressure)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if (conversionType == typeof(Pressure))
                return this;
            else if (conversionType == typeof(PressureUnit))
                return Unit;
            else if (conversionType == typeof(QuantityType))
                return Pressure.QuantityType;
            else if (conversionType == typeof(QuantityInfo))
                return Pressure.Info;
            else if (conversionType == typeof(BaseDimensions))
                return Pressure.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(Pressure)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
